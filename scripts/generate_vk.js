#!/usr/bin/env node

const path = require('path');
const fs = require('fs');

const { parseFunctions, isHandle } = require('./parse_vulkan_h');
const { toSnakeCase, toPascalCase } = require('./utils');
const { HandleList } = require('./handles');

const ROOT = path.join(__dirname, '..');
const DST_DIR_NAME = 'vk';
const DST_DIR_PATH = path.join(ROOT, 'src', DST_DIR_NAME);

const HEADER = '// Generated by `scripts/generate_vk.js`';

const PRIMITIVE_TYPES = {
    uint32_t: 'u32',
    uint16_t: 'u16',
    uint8_t: 'u8',
    int32_t: 'i32',
    int16_t: 'i16',
    int8_t: 'i8',
    char: 'c_char',
    float: 'f32',
    double: 'f64',
    size_t: 'usize',
    ssize_t: 'isize',
    void: 'c_void'
};

main();

function main() {
    generateHandles();
}

function generateHandles() {
    const cFunctions = parseFunctions();
    const handles = new HandleList();

    const destroyFunctions = cFunctions.filter(func => func.name.includes('Destroy'));
    const otherFunctions = cFunctions.filter(func => !func.name.includes('Destroy'));

    destroyFunctions.forEach(func => {
        const handleName = func.args.beforeLast().typeName;
        const hasParent = func.args.length > 2;
        const parent = hasParent ? func.args[0].typeName : 'VkInstance';

        handles.get(parent).addHandleToDestroy(handleName, func);

        if (hasParent) {
            handles.get(handleName).setParent(parent);
        }
    });

    otherFunctions.forEach(func => {
        const firstArg = func.args[0];
        const isFirstArgHandle = !firstArg.isPointer && isHandle(firstArg.typeName);
        const handleName = isFirstArgHandle ? firstArg.typeName : 'VkInstance';

        handles.get(handleName).addMethod(func);
    });

    console.log(handles.get('VkInstance'))

    return handles;
}