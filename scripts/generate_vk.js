#!/usr/bin/env node

const path = require('path');
const fs = require('fs');

const { parseStructs, parseFunctions, isHandle } = require('./parse_vulkan_h');
const { toSnakeCase, toPascalCase, getRawTypeName, getWrappedTypeName } = require('./utils');
const { HandleList } = require('./handles');
const { generateVkStructDefinition } = require('./structs');

const ROOT_DIR_PATH         = path.join(__dirname, '..');
const OUTPUT_DIR_NAME       = 'vk';
const OUTPUT_DIR_PATH       = path.join(ROOT_DIR_PATH, 'src', OUTPUT_DIR_NAME);
const STATIC_FILES_DIR_PATH = path.join(__dirname, 'static');

const GENERATED_HEADER = '// Generated by `scripts/generate_vk.js`';
const COPIED_HEADER = '// Copied from `scripts/static/`'

main();

function main() {
    // generateHandles();
    generateStructs();
    copyStaticFiles();
    writeModFile(OUTPUT_DIR_PATH);
}

function copyStaticFiles() {
    const fileNames = fs.readdirSync(STATIC_FILES_DIR_PATH);

    fileNames.forEach(fileName => {
        const fileContent = fs.readFileSync(path.join(STATIC_FILES_DIR_PATH, fileName), 'utf8');
        const targetFilePath = path.join(OUTPUT_DIR_PATH, fileName);
        
        if (!fileContent.startsWith('// no-copy')) {
            fs.writeFileSync(targetFilePath, `${COPIED_HEADER}\n\n${fileContent}`, 'utf8');
        }
    });
}

function writeModFile(dirPath) {
    const filePath = path.join(dirPath, 'mod.rs');
    const files = [];
    const directories = [];

    fs.readdirSync(dirPath).forEach(name => {
        if (name !== 'mod.rs') {
            const stats = fs.statSync(path.join(dirPath, name));

            if (stats.isFile()) {
                files.push(name);
            } else if (stats.isDirectory()) {
                directories.push(name);
            }
        }
    });

    const moduleNames = files.map(name => name.replace('.rs', ''));
    const content = [
        GENERATED_HEADER,
        ``,
        ...moduleNames.map(name => `mod ${name};`),
        ``,
        ...moduleNames.map(name => `pub use self::${name}::*;`),
    ].join('\n');

    fs.writeFileSync(filePath, content);

    directories.forEach(writeModFile);
}

function generateStructs() {
    const cStructs = parseStructs().slice(0, 1);

    return cStructs.map(cDef => {
        const rustDefinition = generateVkStructDefinition(cDef);

        console.log(rustDefinition)

        return {
            name: cDef.name,
            extension: cDef.extension,
            definition: rustDefinition
        };
    });
}

function generateHandles() {
    const cFunctions = parseFunctions();
    const handles = new HandleList();

    const destroyFunctions = cFunctions.filter(func => func.name.includes('Destroy'));
    const otherFunctions = cFunctions.filter(func => !func.name.includes('Destroy'));

    destroyFunctions.forEach(func => {
        const handleName = func.args.beforeLast().typeName;
        const hasParent = func.args.length > 2;
        const parent = hasParent ? func.args[0].typeName : 'VkInstance';

        handles.get(parent).addHandleToDestroy(handleName, func);

        if (hasParent) {
            handles.get(handleName).setParent(parent);
        }
    });

    otherFunctions.forEach(func => {
        const firstArg = func.args[0];
        const isFirstArgHandle = !firstArg.isPointer && isHandle(firstArg.typeName);
        const handleName = isFirstArgHandle ? firstArg.typeName : 'VkInstance';

        handles.get(handleName).addMethod(func);
    });

    console.log(handles.get('VkInstance').toString());

    return handles;
}