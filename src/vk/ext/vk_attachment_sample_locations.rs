// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::ext::vk_sample_locations_info::*;

#[derive(Debug, Clone)]
pub struct VkAttachmentSampleLocations<'a> {
    pub attachment_index: usize,
    pub sample_locations_info: VkSampleLocationsInfo<'a>,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkAttachmentSampleLocations {
    pub attachment_index: u32,
    pub sample_locations_info: RawVkSampleLocationsInfo,
}

impl<'a> VkWrappedType<RawVkAttachmentSampleLocations> for VkAttachmentSampleLocations<'a> {
    fn vk_to_raw(src: &VkAttachmentSampleLocations, dst: &mut RawVkAttachmentSampleLocations) {
        dst.attachment_index = vk_to_raw_value(&src.attachment_index);
        dst.sample_locations_info = vk_to_raw_value(&src.sample_locations_info);
    }
}

impl Default for VkAttachmentSampleLocations<'static> {
    fn default() -> VkAttachmentSampleLocations<'static> {
        VkAttachmentSampleLocations {
            attachment_index: 0,
            sample_locations_info: VkSampleLocationsInfo::default(),
        }
    }
}

impl<'a> VkSetup for VkAttachmentSampleLocations<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkAttachmentSampleLocations {
    fn vk_free(&mut self) {
        RawVkSampleLocationsInfo::vk_free(&mut self.sample_locations_info);
    }
}