// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::ext::vk_debug_report_object_type::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDebugMarkerObjectNameInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub object_type: RawVkDebugReportObjectType,
    pub object: u64,
    pub object_name: *mut c_char,
}

#[derive(Debug, Clone)]
pub struct VkDebugMarkerObjectNameInfo<'a> {
    pub object_type: VkDebugReportObjectType,
    pub object: usize,
    pub object_name: &'a str,
}

impl<'a> VkWrappedType<RawVkDebugMarkerObjectNameInfo> for VkDebugMarkerObjectNameInfo<'a> {
    fn vk_to_raw(src: &VkDebugMarkerObjectNameInfo, dst: &mut RawVkDebugMarkerObjectNameInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DebugMarkerObjectNameInfoExt);
        dst.next = ptr::null();
        dst.object_type = vk_to_raw_value(&src.object_type);
        dst.object = vk_to_raw_value(&src.object);
        dst.object_name = new_ptr_string(src.object_name);
    }
}

impl Default for VkDebugMarkerObjectNameInfo<'static> {
    fn default() -> VkDebugMarkerObjectNameInfo<'static> {
        VkDebugMarkerObjectNameInfo {
            object_type: VkDebugReportObjectType::default(),
            object: 0,
            object_name: "",
        }
    }
}

impl<'a> VkSetup for VkDebugMarkerObjectNameInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkDebugMarkerObjectNameInfo {
    fn vk_free(&mut self) {
        free_ptr(self.object_name);
    }
}