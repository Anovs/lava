// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::ext::vk_debug_report_object_type::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDebugMarkerObjectTagInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub object_type: RawVkDebugReportObjectType,
    pub object: u64,
    pub tag_name: u64,
    pub tag_size: usize,
    pub tag: *const c_void,
}

#[derive(Debug, Clone)]
pub struct VkDebugMarkerObjectTagInfo<'a> {
    pub object_type: VkDebugReportObjectType,
    pub object: usize,
    pub tag_name: usize,
    pub tag_size: usize,
    pub tag: &'a c_void,
}

impl<'a> VkWrappedType<RawVkDebugMarkerObjectTagInfo> for VkDebugMarkerObjectTagInfo<'a> {
    fn vk_to_raw(src: &VkDebugMarkerObjectTagInfo, dst: &mut RawVkDebugMarkerObjectTagInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DebugMarkerObjectTagInfoExt);
        dst.next = ptr::null();
        dst.object_type = vk_to_raw_value(&src.object_type);
        dst.object = vk_to_raw_value(&src.object);
        dst.tag_name = vk_to_raw_value(&src.tag_name);
        dst.tag_size = src.tag_size;
        dst.tag = src.tag as *const c_void;
    }
}

impl Default for VkDebugMarkerObjectTagInfo<'static> {
    fn default() -> VkDebugMarkerObjectTagInfo<'static> {
        VkDebugMarkerObjectTagInfo {
            object_type: VkDebugReportObjectType::default(),
            object: 0,
            tag_name: 0,
            tag_size: 0,
            tag: &0,
        }
    }
}

impl<'a> VkSetup for VkDebugMarkerObjectTagInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkDebugMarkerObjectTagInfo {
    fn vk_free(&mut self) {
        
    }
}