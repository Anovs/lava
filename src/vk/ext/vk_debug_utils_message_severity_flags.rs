// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkDebugUtilsMessageSeverityFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkDebugUtilsMessageSeverityFlags {
    verbose: bool,
    info: bool,
    warning: bool,
    error: bool,
}

impl VkRawType<VkDebugUtilsMessageSeverityFlags> for RawVkDebugUtilsMessageSeverityFlags {
    
    fn vk_to_wrapped(src: &RawVkDebugUtilsMessageSeverityFlags) -> VkDebugUtilsMessageSeverityFlags {
        VkDebugUtilsMessageSeverityFlags {
            verbose: (src & 0x00000001) != 0,
            info: (src & 0x00000010) != 0,
            warning: (src & 0x00000100) != 0,
            error: (src & 0x00001000) != 0,
        }
    }
}

impl VkWrappedType<RawVkDebugUtilsMessageSeverityFlags> for VkDebugUtilsMessageSeverityFlags {
    
    fn vk_to_raw(src: &VkDebugUtilsMessageSeverityFlags, dst: &mut RawVkDebugUtilsMessageSeverityFlags) {
        *dst = 0;
        if src.verbose { *dst |= 0x00000001; }
        if src.info { *dst |= 0x00000010; }
        if src.warning { *dst |= 0x00000100; }
        if src.error { *dst |= 0x00001000; }
    }
    
    fn vk_default() -> VkDebugUtilsMessageSeverityFlags {
        VkDebugUtilsMessageSeverityFlags {
            verbose: false,
            info: false,
            warning: false,
            error: false,
        }
    }
}