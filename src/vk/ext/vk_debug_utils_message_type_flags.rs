// Generated by `scripts/generate_vk.js`

use utils::vk_traits::*;

pub type RawVkDebugUtilsMessageTypeFlags = u32;

#[derive(Debug, Clone, Copy)]
pub struct VkDebugUtilsMessageTypeFlags {
    pub general: bool,
    pub validation: bool,
    pub performance: bool,
}

impl VkRawType<VkDebugUtilsMessageTypeFlags> for RawVkDebugUtilsMessageTypeFlags {
    fn vk_to_wrapped(src: &RawVkDebugUtilsMessageTypeFlags) -> VkDebugUtilsMessageTypeFlags {
        VkDebugUtilsMessageTypeFlags {
            general: (src & 0x00000001) != 0,
            validation: (src & 0x00000002) != 0,
            performance: (src & 0x00000004) != 0,
        }
    }
}

impl VkWrappedType<RawVkDebugUtilsMessageTypeFlags> for VkDebugUtilsMessageTypeFlags {
    fn vk_to_raw(src: &VkDebugUtilsMessageTypeFlags, dst: &mut RawVkDebugUtilsMessageTypeFlags) {
        *dst = 0;
        if src.general { *dst |= 0x00000001; }
        if src.validation { *dst |= 0x00000002; }
        if src.performance { *dst |= 0x00000004; }
    }
}

impl Default for VkDebugUtilsMessageTypeFlags {
    fn default() -> VkDebugUtilsMessageTypeFlags {
        VkDebugUtilsMessageTypeFlags {
            general: false,
            validation: false,
            performance: false,
        }
    }
}

impl VkDebugUtilsMessageTypeFlags {
    
    pub fn none() -> VkDebugUtilsMessageTypeFlags {
        VkDebugUtilsMessageTypeFlags {
            general: false,
            validation: false,
            performance: false,
        }
    }
    
    pub fn all() -> VkDebugUtilsMessageTypeFlags {
        VkDebugUtilsMessageTypeFlags {
            general: true,
            validation: true,
            performance: true,
        }
    }
}

impl VkDebugUtilsMessageTypeFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.general { 0x00000001 } else { 0 }
        + if self.validation { 0x00000002 } else { 0 }
        + if self.performance { 0x00000004 } else { 0 }
    }
}