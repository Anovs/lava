// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkDescriptorBindingFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorBindingFlags {
    update_after_bind: bool,
    update_unused_while_pending: bool,
    partially_bound: bool,
    variable_descriptor_count: bool,
}

impl VkRawType<VkDescriptorBindingFlags> for RawVkDescriptorBindingFlags {
    
    fn vk_to_wrapped(src: &RawVkDescriptorBindingFlags) -> VkDescriptorBindingFlags {
        VkDescriptorBindingFlags {
            update_after_bind: (src & 0x00000001) != 0,
            update_unused_while_pending: (src & 0x00000002) != 0,
            partially_bound: (src & 0x00000004) != 0,
            variable_descriptor_count: (src & 0x00000008) != 0,
        }
    }
}

impl VkWrappedType<RawVkDescriptorBindingFlags> for VkDescriptorBindingFlags {
    
    fn vk_to_raw(src: &VkDescriptorBindingFlags, dst: &mut RawVkDescriptorBindingFlags) {
        *dst = 0;
        if src.update_after_bind { *dst |= 0x00000001; }
        if src.update_unused_while_pending { *dst |= 0x00000002; }
        if src.partially_bound { *dst |= 0x00000004; }
        if src.variable_descriptor_count { *dst |= 0x00000008; }
    }
}

impl VkDefault for VkDescriptorBindingFlags {
    
    fn vk_default() -> VkDescriptorBindingFlags {
        VkDescriptorBindingFlags {
            update_after_bind: false,
            update_unused_while_pending: false,
            partially_bound: false,
            variable_descriptor_count: false,
        }
    }
}