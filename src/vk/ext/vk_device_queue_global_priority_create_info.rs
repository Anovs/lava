// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::ext::vk_queue_global_priority::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDeviceQueueGlobalPriorityCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub global_priority: RawVkQueueGlobalPriority,
}

#[derive(Debug, Clone)]
pub struct VkDeviceQueueGlobalPriorityCreateInfo {
    pub global_priority: VkQueueGlobalPriority,
}

impl VkRawType<VkDeviceQueueGlobalPriorityCreateInfo> for RawVkDeviceQueueGlobalPriorityCreateInfo {
    fn vk_to_wrapped(src: &RawVkDeviceQueueGlobalPriorityCreateInfo) -> VkDeviceQueueGlobalPriorityCreateInfo {
        VkDeviceQueueGlobalPriorityCreateInfo {
            global_priority: RawVkQueueGlobalPriority::vk_to_wrapped(&src.global_priority),
        }
    }
}

impl VkWrappedType<RawVkDeviceQueueGlobalPriorityCreateInfo> for VkDeviceQueueGlobalPriorityCreateInfo {
    fn vk_to_raw(src: &VkDeviceQueueGlobalPriorityCreateInfo, dst: &mut RawVkDeviceQueueGlobalPriorityCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DeviceQueueGlobalPriorityCreateInfoExt);
        dst.next = ptr::null();
        dst.global_priority = vk_to_raw_value(&src.global_priority);
    }
}

impl Default for VkDeviceQueueGlobalPriorityCreateInfo {
    fn default() -> VkDeviceQueueGlobalPriorityCreateInfo {
        VkDeviceQueueGlobalPriorityCreateInfo {
            global_priority: VkQueueGlobalPriority::default(),
        }
    }
}

impl VkSetup for VkDeviceQueueGlobalPriorityCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkDeviceQueueGlobalPriorityCreateInfo {
    fn vk_free(&mut self) {
        
    }
}