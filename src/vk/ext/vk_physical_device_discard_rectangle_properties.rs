// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;

#[repr(C)]
pub struct RawVkPhysicalDeviceDiscardRectangleProperties {
    s_type: RawVkStructureType,
    next: *const c_void,
    max_discard_rectangles: u32,
}

#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceDiscardRectangleProperties {
    pub max_discard_rectangles: usize,
}

impl VkRawType<VkPhysicalDeviceDiscardRectangleProperties> for RawVkPhysicalDeviceDiscardRectangleProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceDiscardRectangleProperties) -> VkPhysicalDeviceDiscardRectangleProperties {
        VkPhysicalDeviceDiscardRectangleProperties {
            max_discard_rectangles: u32::vk_to_wrapped(&src.max_discard_rectangles),
        }
    }
}

impl VkWrappedType<RawVkPhysicalDeviceDiscardRectangleProperties> for VkPhysicalDeviceDiscardRectangleProperties {
    fn vk_to_raw(src: &VkPhysicalDeviceDiscardRectangleProperties, dst: &mut RawVkPhysicalDeviceDiscardRectangleProperties) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceDiscardRectanglePropertiesExt);
        dst.next = ptr::null();
        dst.max_discard_rectangles = vk_to_raw_value(&src.max_discard_rectangles);
    }
}

impl Default for VkPhysicalDeviceDiscardRectangleProperties {
    fn default() -> VkPhysicalDeviceDiscardRectangleProperties {
        VkPhysicalDeviceDiscardRectangleProperties {
            max_discard_rectangles: 0,
        }
    }
}

impl VkSetup for VkPhysicalDeviceDiscardRectangleProperties {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceDiscardRectangleProperties {
    fn vk_free(&mut self) {
        
    }
}