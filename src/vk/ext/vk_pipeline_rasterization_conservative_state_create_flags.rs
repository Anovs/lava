// Generated by `scripts/generate_vk.js`

use utils::vk_traits::*;

#[derive(Debug, Clone, Copy)]
pub struct VkPipelineRasterizationConservativeStateCreateFlags {
    
}

pub type RawVkPipelineRasterizationConservativeStateCreateFlags = u32;

impl VkWrappedType<RawVkPipelineRasterizationConservativeStateCreateFlags> for VkPipelineRasterizationConservativeStateCreateFlags {
    fn vk_to_raw(src: &VkPipelineRasterizationConservativeStateCreateFlags, dst: &mut RawVkPipelineRasterizationConservativeStateCreateFlags) {
        *dst = 0;
    }
}

impl VkRawType<VkPipelineRasterizationConservativeStateCreateFlags> for RawVkPipelineRasterizationConservativeStateCreateFlags {
    fn vk_to_wrapped(src: &RawVkPipelineRasterizationConservativeStateCreateFlags) -> VkPipelineRasterizationConservativeStateCreateFlags {
        VkPipelineRasterizationConservativeStateCreateFlags {
            
        }
    }
}

impl Default for VkPipelineRasterizationConservativeStateCreateFlags {
    fn default() -> VkPipelineRasterizationConservativeStateCreateFlags {
        VkPipelineRasterizationConservativeStateCreateFlags {
            
        }
    }
}

impl VkPipelineRasterizationConservativeStateCreateFlags {
    
    pub fn none() -> VkPipelineRasterizationConservativeStateCreateFlags {
        VkPipelineRasterizationConservativeStateCreateFlags {
            
        }
    }
    
    pub fn all() -> VkPipelineRasterizationConservativeStateCreateFlags {
        VkPipelineRasterizationConservativeStateCreateFlags {
            
        }
    }
}

impl VkPipelineRasterizationConservativeStateCreateFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
    }
}