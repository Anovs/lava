// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::ext::vk_sample_locations_info::*;

#[repr(C)]
pub struct RawVkPipelineSampleLocationsStateCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub sample_locations_enable: u32,
    pub sample_locations_info: RawVkSampleLocationsInfo,
}

#[derive(Debug, Clone)]
pub struct VkPipelineSampleLocationsStateCreateInfo<'a> {
    pub sample_locations_enable: bool,
    pub sample_locations_info: VkSampleLocationsInfo<'a>,
}

impl<'a> VkWrappedType<RawVkPipelineSampleLocationsStateCreateInfo> for VkPipelineSampleLocationsStateCreateInfo<'a> {
    fn vk_to_raw(src: &VkPipelineSampleLocationsStateCreateInfo, dst: &mut RawVkPipelineSampleLocationsStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineSampleLocationsStateCreateInfoExt);
        dst.next = ptr::null();
        dst.sample_locations_enable = vk_to_raw_value(&src.sample_locations_enable);
        dst.sample_locations_info = vk_to_raw_value(&src.sample_locations_info);
    }
}

impl Default for VkPipelineSampleLocationsStateCreateInfo<'static> {
    fn default() -> VkPipelineSampleLocationsStateCreateInfo<'static> {
        VkPipelineSampleLocationsStateCreateInfo {
            sample_locations_enable: false,
            sample_locations_info: VkSampleLocationsInfo::default(),
        }
    }
}

impl<'a> VkSetup for VkPipelineSampleLocationsStateCreateInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPipelineSampleLocationsStateCreateInfo {
    fn vk_free(&mut self) {
        RawVkSampleLocationsInfo::vk_free(&mut self.sample_locations_info);
    }
}