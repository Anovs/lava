// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_attachment_reference::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkRenderPassFragmentDensityMapCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub fragment_density_map_attachment: RawVkAttachmentReference,
}

#[derive(Debug, Clone)]
pub struct VkRenderPassFragmentDensityMapCreateInfo {
    pub fragment_density_map_attachment: VkAttachmentReference,
}

impl VkRawType<VkRenderPassFragmentDensityMapCreateInfo> for RawVkRenderPassFragmentDensityMapCreateInfo {
    fn vk_to_wrapped(src: &RawVkRenderPassFragmentDensityMapCreateInfo) -> VkRenderPassFragmentDensityMapCreateInfo {
        VkRenderPassFragmentDensityMapCreateInfo {
            fragment_density_map_attachment: RawVkAttachmentReference::vk_to_wrapped(&src.fragment_density_map_attachment),
        }
    }
}

impl VkWrappedType<RawVkRenderPassFragmentDensityMapCreateInfo> for VkRenderPassFragmentDensityMapCreateInfo {
    fn vk_to_raw(src: &VkRenderPassFragmentDensityMapCreateInfo, dst: &mut RawVkRenderPassFragmentDensityMapCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::RenderPassFragmentDensityMapCreateInfoExt);
        dst.next = ptr::null();
        dst.fragment_density_map_attachment = vk_to_raw_value(&src.fragment_density_map_attachment);
    }
}

impl Default for VkRenderPassFragmentDensityMapCreateInfo {
    fn default() -> VkRenderPassFragmentDensityMapCreateInfo {
        VkRenderPassFragmentDensityMapCreateInfo {
            fragment_density_map_attachment: VkAttachmentReference::default(),
        }
    }
}

impl VkSetup for VkRenderPassFragmentDensityMapCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        VkSetup::vk_setup(&mut self.fragment_density_map_attachment, fn_table, instance, device);
    }
}

impl VkFree for RawVkRenderPassFragmentDensityMapCreateInfo {
    fn vk_free(&mut self) {
        RawVkAttachmentReference::vk_free(&mut self.fragment_density_map_attachment);
    }
}