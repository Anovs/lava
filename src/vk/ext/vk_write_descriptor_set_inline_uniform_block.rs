// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;

#[derive(Debug, Clone)]
pub struct VkWriteDescriptorSetInlineUniformBlock<'a> {
    pub data_size: usize,
    pub data: &'a c_void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkWriteDescriptorSetInlineUniformBlock {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub data_size: u32,
    pub data: *const c_void,
}

impl<'a> VkWrappedType<RawVkWriteDescriptorSetInlineUniformBlock> for VkWriteDescriptorSetInlineUniformBlock<'a> {
    fn vk_to_raw(src: &VkWriteDescriptorSetInlineUniformBlock, dst: &mut RawVkWriteDescriptorSetInlineUniformBlock) {
        dst.s_type = vk_to_raw_value(&VkStructureType::WriteDescriptorSetInlineUniformBlockExt);
        dst.next = ptr::null();
        dst.data_size = vk_to_raw_value(&src.data_size);
        dst.data = src.data as *const c_void;
    }
}

impl Default for VkWriteDescriptorSetInlineUniformBlock<'static> {
    fn default() -> VkWriteDescriptorSetInlineUniformBlock<'static> {
        VkWriteDescriptorSetInlineUniformBlock {
            data_size: 0,
            data: &0,
        }
    }
}

impl<'a> VkSetup for VkWriteDescriptorSetInlineUniformBlock<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkWriteDescriptorSetInlineUniformBlock {
    fn vk_free(&mut self) {
        
    }
}