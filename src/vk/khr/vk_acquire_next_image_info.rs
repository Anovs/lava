// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::khr::vk_swapchain::*;
use vk::vk_semaphore::*;
use vk::vk_fence::*;

#[derive(Debug, Clone)]
pub struct VkAcquireNextImageInfo<'a, 'b, 'c> {
    pub swapchain: &'a VkSwapchain,
    pub timeout: u64,
    pub semaphore: Option<&'b VkSemaphore>,
    pub fence: Option<&'c VkFence>,
    pub device_mask: u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkAcquireNextImageInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub swapchain: RawVkSwapchain,
    pub timeout: u64,
    pub semaphore: RawVkSemaphore,
    pub fence: RawVkFence,
    pub device_mask: u32,
}

impl<'a, 'b, 'c> VkWrappedType<RawVkAcquireNextImageInfo> for VkAcquireNextImageInfo<'a, 'b, 'c> {
    fn vk_to_raw(src: &VkAcquireNextImageInfo, dst: &mut RawVkAcquireNextImageInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::AcquireNextImageInfoKhr);
        dst.next = ptr::null();
        dst.swapchain = vk_to_raw_value(src.swapchain);
        dst.timeout = src.timeout;
        dst.semaphore = if src.semaphore.is_some() { vk_to_raw_value(src.semaphore.unwrap()) } else { 0 };
        dst.fence = if src.fence.is_some() { vk_to_raw_value(src.fence.unwrap()) } else { 0 };
        dst.device_mask = src.device_mask;
    }
}

impl Default for VkAcquireNextImageInfo<'static, 'static, 'static> {
    fn default() -> VkAcquireNextImageInfo<'static, 'static, 'static> {
        VkAcquireNextImageInfo {
            swapchain: vk_null_ref(),
            timeout: 0,
            semaphore: None,
            fence: None,
            device_mask: 0,
        }
    }
}

impl<'a, 'b, 'c> VkSetup for VkAcquireNextImageInfo<'a, 'b, 'c> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkAcquireNextImageInfo {
    fn vk_free(&mut self) {
        
    }
}