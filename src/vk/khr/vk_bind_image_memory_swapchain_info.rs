// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::khr::vk_swapchain::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkBindImageMemorySwapchainInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub swapchain: RawVkSwapchain,
    pub image_index: u32,
}

#[derive(Debug, Clone)]
pub struct VkBindImageMemorySwapchainInfo<'a> {
    pub swapchain: &'a VkSwapchain,
    pub image_index: usize,
}

impl<'a> VkWrappedType<RawVkBindImageMemorySwapchainInfo> for VkBindImageMemorySwapchainInfo<'a> {
    fn vk_to_raw(src: &VkBindImageMemorySwapchainInfo, dst: &mut RawVkBindImageMemorySwapchainInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::BindImageMemorySwapchainInfoKhr);
        dst.next = ptr::null();
        dst.swapchain = vk_to_raw_value(src.swapchain);
        dst.image_index = vk_to_raw_value(&src.image_index);
    }
}

impl Default for VkBindImageMemorySwapchainInfo<'static> {
    fn default() -> VkBindImageMemorySwapchainInfo<'static> {
        VkBindImageMemorySwapchainInfo {
            swapchain: vk_null_ref(),
            image_index: 0,
        }
    }
}

impl<'a> VkSetup for VkBindImageMemorySwapchainInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkBindImageMemorySwapchainInfo {
    fn vk_free(&mut self) {
        
    }
}