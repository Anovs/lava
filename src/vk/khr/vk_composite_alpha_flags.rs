// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkCompositeAlphaFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkCompositeAlphaFlags {
    opaque: bool,
    pre_multiplied: bool,
    post_multiplied: bool,
    inherit: bool,
}

impl VkRawType<VkCompositeAlphaFlags> for RawVkCompositeAlphaFlags {
    
    fn vk_to_wrapped(src: &RawVkCompositeAlphaFlags) -> VkCompositeAlphaFlags {
        VkCompositeAlphaFlags {
            opaque: (src & 0x00000001) != 0,
            pre_multiplied: (src & 0x00000002) != 0,
            post_multiplied: (src & 0x00000004) != 0,
            inherit: (src & 0x00000008) != 0,
        }
    }
}

impl VkWrappedType<RawVkCompositeAlphaFlags> for VkCompositeAlphaFlags {
    
    fn vk_to_raw(src: &VkCompositeAlphaFlags, dst: &mut RawVkCompositeAlphaFlags) {
        *dst = 0;
        if src.opaque { *dst |= 0x00000001; }
        if src.pre_multiplied { *dst |= 0x00000002; }
        if src.post_multiplied { *dst |= 0x00000004; }
        if src.inherit { *dst |= 0x00000008; }
    }
}

impl VkDefault for VkCompositeAlphaFlags {
    
    fn vk_default() -> VkCompositeAlphaFlags {
        VkCompositeAlphaFlags {
            opaque: false,
            pre_multiplied: false,
            post_multiplied: false,
            inherit: false,
        }
    }
}