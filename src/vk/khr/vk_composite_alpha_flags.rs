// Generated by `scripts/generate_vk.js`

use utils::vk_traits::*;

pub type RawVkCompositeAlphaFlags = u32;

#[derive(Debug, Clone, Copy)]
pub struct VkCompositeAlphaFlags {
    pub opaque: bool,
    pub pre_multiplied: bool,
    pub post_multiplied: bool,
    pub inherit: bool,
}

impl VkRawType<VkCompositeAlphaFlags> for RawVkCompositeAlphaFlags {
    fn vk_to_wrapped(src: &RawVkCompositeAlphaFlags) -> VkCompositeAlphaFlags {
        VkCompositeAlphaFlags {
            opaque: (src & 0x00000001) != 0,
            pre_multiplied: (src & 0x00000002) != 0,
            post_multiplied: (src & 0x00000004) != 0,
            inherit: (src & 0x00000008) != 0,
        }
    }
}

impl VkWrappedType<RawVkCompositeAlphaFlags> for VkCompositeAlphaFlags {
    fn vk_to_raw(src: &VkCompositeAlphaFlags, dst: &mut RawVkCompositeAlphaFlags) {
        *dst = 0;
        if src.opaque { *dst |= 0x00000001; }
        if src.pre_multiplied { *dst |= 0x00000002; }
        if src.post_multiplied { *dst |= 0x00000004; }
        if src.inherit { *dst |= 0x00000008; }
    }
}

impl Default for VkCompositeAlphaFlags {
    fn default() -> VkCompositeAlphaFlags {
        VkCompositeAlphaFlags {
            opaque: false,
            pre_multiplied: false,
            post_multiplied: false,
            inherit: false,
        }
    }
}

impl VkCompositeAlphaFlags {
    
    pub fn none() -> VkCompositeAlphaFlags {
        VkCompositeAlphaFlags {
            opaque: false,
            pre_multiplied: false,
            post_multiplied: false,
            inherit: false,
        }
    }
    
    pub fn all() -> VkCompositeAlphaFlags {
        VkCompositeAlphaFlags {
            opaque: true,
            pre_multiplied: true,
            post_multiplied: true,
            inherit: true,
        }
    }
}

impl VkCompositeAlphaFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.opaque { 0x00000001 } else { 0 }
        + if self.pre_multiplied { 0x00000002 } else { 0 }
        + if self.post_multiplied { 0x00000004 } else { 0 }
        + if self.inherit { 0x00000008 } else { 0 }
    }
}