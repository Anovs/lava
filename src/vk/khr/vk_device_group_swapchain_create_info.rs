// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::khr::vk_device_group_present_mode_flags::*;

#[repr(C)]
pub struct RawVkDeviceGroupSwapchainCreateInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    modes: RawVkDeviceGroupPresentModeFlags,
}

#[derive(Debug, Clone)]
pub struct VkDeviceGroupSwapchainCreateInfo {
    pub modes: VkDeviceGroupPresentModeFlags,
}

impl VkRawType<VkDeviceGroupSwapchainCreateInfo> for RawVkDeviceGroupSwapchainCreateInfo {
    fn vk_to_wrapped(src: &RawVkDeviceGroupSwapchainCreateInfo) -> VkDeviceGroupSwapchainCreateInfo {
        VkDeviceGroupSwapchainCreateInfo {
            modes: RawVkDeviceGroupPresentModeFlags::vk_to_wrapped(&src.modes),
        }
    }
}

impl VkWrappedType<RawVkDeviceGroupSwapchainCreateInfo> for VkDeviceGroupSwapchainCreateInfo {
    fn vk_to_raw(src: &VkDeviceGroupSwapchainCreateInfo, dst: &mut RawVkDeviceGroupSwapchainCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DeviceGroupSwapchainCreateInfoKhr);
        dst.next = ptr::null();
        dst.modes = vk_to_raw_value(&src.modes);
    }
}

impl Default for VkDeviceGroupSwapchainCreateInfo {
    fn default() -> VkDeviceGroupSwapchainCreateInfo {
        VkDeviceGroupSwapchainCreateInfo {
            modes: VkDeviceGroupPresentModeFlags::default(),
        }
    }
}

impl VkSetup for VkDeviceGroupSwapchainCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkDeviceGroupSwapchainCreateInfo {
    fn vk_free(&mut self) {
        
    }
}