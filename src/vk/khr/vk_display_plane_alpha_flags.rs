// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkDisplayPlaneAlphaFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkDisplayPlaneAlphaFlags {
    opaque: bool,
    global: bool,
    per_pixel: bool,
    per_pixel_premultiplied: bool,
}

impl VkRawType<VkDisplayPlaneAlphaFlags> for RawVkDisplayPlaneAlphaFlags {
    
    fn vk_to_wrapped(src: &RawVkDisplayPlaneAlphaFlags) -> VkDisplayPlaneAlphaFlags {
        VkDisplayPlaneAlphaFlags {
            opaque: (src & 0x00000001) != 0,
            global: (src & 0x00000002) != 0,
            per_pixel: (src & 0x00000004) != 0,
            per_pixel_premultiplied: (src & 0x00000008) != 0,
        }
    }
}

impl VkWrappedType<RawVkDisplayPlaneAlphaFlags> for VkDisplayPlaneAlphaFlags {
    
    fn vk_to_raw(src: &VkDisplayPlaneAlphaFlags, dst: &mut RawVkDisplayPlaneAlphaFlags) {
        *dst = 0;
        if src.opaque { *dst |= 0x00000001; }
        if src.global { *dst |= 0x00000002; }
        if src.per_pixel { *dst |= 0x00000004; }
        if src.per_pixel_premultiplied { *dst |= 0x00000008; }
    }
}

impl VkDefault for VkDisplayPlaneAlphaFlags {
    
    fn vk_default() -> VkDisplayPlaneAlphaFlags {
        VkDisplayPlaneAlphaFlags {
            opaque: false,
            global: false,
            per_pixel: false,
            per_pixel_premultiplied: false,
        }
    }
}