// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_rect_2d::*;

#[derive(Debug, Clone)]
pub struct VkDisplayPresentInfo {
    pub src_rect: VkRect2D,
    pub dst_rect: VkRect2D,
    pub persistent: bool,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDisplayPresentInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub src_rect: RawVkRect2D,
    pub dst_rect: RawVkRect2D,
    pub persistent: u32,
}

impl VkWrappedType<RawVkDisplayPresentInfo> for VkDisplayPresentInfo {
    fn vk_to_raw(src: &VkDisplayPresentInfo, dst: &mut RawVkDisplayPresentInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DisplayPresentInfoKhr);
        dst.next = ptr::null();
        dst.src_rect = vk_to_raw_value(&src.src_rect);
        dst.dst_rect = vk_to_raw_value(&src.dst_rect);
        dst.persistent = vk_to_raw_value(&src.persistent);
    }
}

impl VkRawType<VkDisplayPresentInfo> for RawVkDisplayPresentInfo {
    fn vk_to_wrapped(src: &RawVkDisplayPresentInfo) -> VkDisplayPresentInfo {
        VkDisplayPresentInfo {
            src_rect: RawVkRect2D::vk_to_wrapped(&src.src_rect),
            dst_rect: RawVkRect2D::vk_to_wrapped(&src.dst_rect),
            persistent: u32::vk_to_wrapped(&src.persistent),
        }
    }
}

impl Default for VkDisplayPresentInfo {
    fn default() -> VkDisplayPresentInfo {
        VkDisplayPresentInfo {
            src_rect: VkRect2D::default(),
            dst_rect: VkRect2D::default(),
            persistent: false,
        }
    }
}

impl VkSetup for VkDisplayPresentInfo {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        VkSetup::vk_setup(&mut self.src_rect, fn_table, instance, device);
        VkSetup::vk_setup(&mut self.dst_rect, fn_table, instance, device);
    }
}

impl VkFree for RawVkDisplayPresentInfo {
    fn vk_free(&mut self) {
        RawVkRect2D::vk_free(&mut self.src_rect);
        RawVkRect2D::vk_free(&mut self.dst_rect);
    }
}