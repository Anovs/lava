// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_format::*;

#[derive(Debug, Clone)]
pub struct VkImageFormatListCreateInfo<'a> {
    pub view_formats: &'a [VkFormat],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkImageFormatListCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub view_format_count: u32,
    pub view_formats: *mut RawVkFormat,
}

impl<'a> VkWrappedType<RawVkImageFormatListCreateInfo> for VkImageFormatListCreateInfo<'a> {
    fn vk_to_raw(src: &VkImageFormatListCreateInfo, dst: &mut RawVkImageFormatListCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::ImageFormatListCreateInfoKhr);
        dst.next = ptr::null();
        dst.view_format_count = src.view_formats.len() as u32;
        dst.view_formats = new_ptr_vk_array(src.view_formats);
    }
}

impl Default for VkImageFormatListCreateInfo<'static> {
    fn default() -> VkImageFormatListCreateInfo<'static> {
        VkImageFormatListCreateInfo {
            view_formats: &[],
        }
    }
}

impl<'a> VkSetup for VkImageFormatListCreateInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkImageFormatListCreateInfo {
    fn vk_free(&mut self) {
        free_ptr(self.view_formats);
    }
}