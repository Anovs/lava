// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;

#[repr(C)]
#[derive(Debug)]
pub struct RawVkMemoryFdProperties {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub memory_type_bits: u32,
}

#[derive(Debug, Clone)]
pub struct VkMemoryFdProperties {
    pub memory_type_bits: usize,
}

impl VkRawType<VkMemoryFdProperties> for RawVkMemoryFdProperties {
    fn vk_to_wrapped(src: &RawVkMemoryFdProperties) -> VkMemoryFdProperties {
        VkMemoryFdProperties {
            memory_type_bits: u32::vk_to_wrapped(&src.memory_type_bits),
        }
    }
}

impl VkWrappedType<RawVkMemoryFdProperties> for VkMemoryFdProperties {
    fn vk_to_raw(src: &VkMemoryFdProperties, dst: &mut RawVkMemoryFdProperties) {
        dst.s_type = vk_to_raw_value(&VkStructureType::MemoryFdPropertiesKhr);
        dst.next = ptr::null();
        dst.memory_type_bits = vk_to_raw_value(&src.memory_type_bits);
    }
}

impl Default for VkMemoryFdProperties {
    fn default() -> VkMemoryFdProperties {
        VkMemoryFdProperties {
            memory_type_bits: 0,
        }
    }
}

impl VkSetup for VkMemoryFdProperties {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkMemoryFdProperties {
    fn vk_free(&mut self) {
        
    }
}