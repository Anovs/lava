// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::khr::vk_driver_id::*;
use vk::khr::vk_conformance_version::*;

#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceDriverProperties {
    pub driver_id: VkDriverId,
    pub driver_name: String,
    pub driver_info: String,
    pub conformance_version: VkConformanceVersion,
}

#[repr(C)]
pub struct RawVkPhysicalDeviceDriverProperties {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub driver_id: RawVkDriverId,
    pub driver_name: [c_char; 256],
    pub driver_info: [c_char; 256],
    pub conformance_version: RawVkConformanceVersion,
}

impl VkRawType<VkPhysicalDeviceDriverProperties> for RawVkPhysicalDeviceDriverProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceDriverProperties) -> VkPhysicalDeviceDriverProperties {
        VkPhysicalDeviceDriverProperties {
            driver_id: RawVkDriverId::vk_to_wrapped(&src.driver_id),
            driver_name: new_string(&src.driver_name[0] as *const c_char),
            driver_info: new_string(&src.driver_info[0] as *const c_char),
            conformance_version: RawVkConformanceVersion::vk_to_wrapped(&src.conformance_version),
        }
    }
}

impl VkSetup for VkPhysicalDeviceDriverProperties {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        VkSetup::vk_setup(&mut self.conformance_version, fn_table, instance, device);
    }
}

impl VkFree for RawVkPhysicalDeviceDriverProperties {
    fn vk_free(&mut self) {
        RawVkConformanceVersion::vk_free(&mut self.conformance_version);
    }
}