// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::khr::vk_rect_layer::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPresentRegion {
    pub rectangle_count: u32,
    pub rectangles: *mut RawVkRectLayer,
}

#[derive(Debug, Clone)]
pub struct VkPresentRegion<'a> {
    pub rectangles: Option<&'a [VkRectLayer]>,
}

impl<'a> VkWrappedType<RawVkPresentRegion> for VkPresentRegion<'a> {
    fn vk_to_raw(src: &VkPresentRegion, dst: &mut RawVkPresentRegion) {
        dst.rectangle_count = get_array_option_len(src.rectangles) as u32;
        dst.rectangles = new_ptr_vk_array_checked(src.rectangles);
    }
}

impl Default for VkPresentRegion<'static> {
    fn default() -> VkPresentRegion<'static> {
        VkPresentRegion {
            rectangles: None,
        }
    }
}

impl<'a> VkSetup for VkPresentRegion<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPresentRegion {
    fn vk_free(&mut self) {
        free_vk_ptr_array(self.rectangle_count as usize, self.rectangles);
    }
}