// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_render_pass_create_flags::*;
use vk::khr::vk_attachment_description_2::*;
use vk::khr::vk_subpass_description_2::*;
use vk::khr::vk_subpass_dependency_2::*;

#[repr(C)]
#[derive(Debug)]
pub struct RawVkRenderPassCreateInfo2 {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkRenderPassCreateFlags,
    pub attachment_count: u32,
    pub attachments: *mut RawVkAttachmentDescription2,
    pub subpass_count: u32,
    pub subpasses: *mut RawVkSubpassDescription2,
    pub dependency_count: u32,
    pub dependencies: *mut RawVkSubpassDependency2,
    pub correlated_view_mask_count: u32,
    pub correlated_view_masks: *const u32,
}

#[derive(Debug, Clone)]
pub struct VkRenderPassCreateInfo2<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i>
    where
        'c: 'b,
        'd: 'b,
        'e: 'b,
        'f: 'b,
        'g: 'b,
{
    pub flags: VkRenderPassCreateFlags,
    pub attachments: &'a [VkAttachmentDescription2],
    pub subpasses: &'b [VkSubpassDescription2<'c, 'd, 'e, 'f, 'g>],
    pub dependencies: &'h [VkSubpassDependency2],
    pub correlated_view_masks: &'i [u32],
}

impl<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i> VkWrappedType<RawVkRenderPassCreateInfo2> for VkRenderPassCreateInfo2<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i>
    where
        'c: 'b,
        'd: 'b,
        'e: 'b,
        'f: 'b,
        'g: 'b,
{
    fn vk_to_raw(src: &VkRenderPassCreateInfo2, dst: &mut RawVkRenderPassCreateInfo2) {
        dst.s_type = vk_to_raw_value(&VkStructureType::RenderPassCreateInfo2Khr);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.attachment_count = src.attachments.len() as u32;
        dst.attachments = new_ptr_vk_array(src.attachments);
        dst.subpass_count = src.subpasses.len() as u32;
        dst.subpasses = new_ptr_vk_array(src.subpasses);
        dst.dependency_count = src.dependencies.len() as u32;
        dst.dependencies = new_ptr_vk_array(src.dependencies);
        dst.correlated_view_mask_count = src.correlated_view_masks.len() as u32;
        dst.correlated_view_masks = src.correlated_view_masks.as_ptr();
    }
}

impl Default for VkRenderPassCreateInfo2<'static, 'static, 'static, 'static, 'static, 'static, 'static, 'static, 'static> {
    fn default() -> VkRenderPassCreateInfo2<'static, 'static, 'static, 'static, 'static, 'static, 'static, 'static, 'static> {
        VkRenderPassCreateInfo2 {
            flags: VkRenderPassCreateFlags::default(),
            attachments: &[],
            subpasses: &[],
            dependencies: &[],
            correlated_view_masks: &[],
        }
    }
}

impl<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i> VkSetup for VkRenderPassCreateInfo2<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i>
    where
        'c: 'b,
        'd: 'b,
        'e: 'b,
        'f: 'b,
        'g: 'b,
{
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkRenderPassCreateInfo2 {
    fn vk_free(&mut self) {
        free_vk_ptr_array(self.attachment_count as usize, self.attachments);
        free_vk_ptr_array(self.subpass_count as usize, self.subpasses);
        free_vk_ptr_array(self.dependency_count as usize, self.dependencies);
    }
}