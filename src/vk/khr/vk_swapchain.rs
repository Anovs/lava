// Generated by `scripts/generate_vk.js`

use utils::c_bindings::*;
use utils::vk_traits::*;
use utils::vk_ptr::*;
use utils::vk_convert::*;
use std::os::raw::c_char;
use std::ptr;
use std::mem;
use std::cmp;
use std::slice;
use vk::*;

pub type RawVkSwapchain = u64;

#[derive(Debug, Copy, Clone)]
pub struct VkSwapchain {
    _handle: RawVkSwapchain,
    _parent_instance: RawVkInstance,
    _parent_device: RawVkDevice,
    _fn_table: *mut VkInstanceFunctionTable
}

impl VkRawType<VkSwapchain> for RawVkSwapchain {
    fn vk_to_wrapped(src: &RawVkSwapchain) -> VkSwapchain {
        VkSwapchain {
            _handle: *src,
            _parent_instance: 0,
            _parent_device: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl VkWrappedType<RawVkSwapchain> for VkSwapchain {
    fn vk_to_raw(src: &VkSwapchain, dst: &mut RawVkSwapchain) {
        *dst = src._handle
    }
}

impl Default for VkSwapchain {
    fn default() -> VkSwapchain {
        VkSwapchain {
            _handle: 0,
            _parent_instance: 0,
            _parent_device: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl PartialEq for VkSwapchain {
    fn eq(&self, other: &VkSwapchain) -> bool {
        self._handle == other._handle
    }
}

impl VkSetup for VkSwapchain {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        self._parent_instance = instance;
        self._parent_device = device;
        self._fn_table = fn_table;
    }
}

impl VkSwapchain {
    
    pub fn handle(&self) -> u64 {
        self._handle
    }
    
    pub fn destroy(&self) {
        unsafe {
            ((&*self._fn_table).vkDestroySwapchainKHR)(self._parent_device, self._handle, ptr::null());
        }
    }
    
    pub fn get_images(&self) -> Result<Vec<VkImage>, (VkResult, Vec<VkImage>)> {
        unsafe {
            let mut vk_result = 0;
            let mut raw_swapchain_images : *mut RawVkImage = ptr::null_mut();
            let raw_swapchain_image_count = &mut mem::zeroed() as *mut u32;
            vk_result = ((&*self._fn_table).vkGetSwapchainImagesKHR)(self._parent_device, self._handle, raw_swapchain_image_count, raw_swapchain_images);
            raw_swapchain_images = calloc(*raw_swapchain_image_count as usize, mem::size_of::<RawVkImage>()) as *mut RawVkImage;
            
            vk_result = ((&*self._fn_table).vkGetSwapchainImagesKHR)(self._parent_device, self._handle, raw_swapchain_image_count, raw_swapchain_images);
            
            let mut swapchain_images = new_vk_array(*raw_swapchain_image_count, raw_swapchain_images);
            if vk_result == 0 {
                for elt in &mut swapchain_images { VkSetup::vk_setup(elt, self._fn_table, self._parent_instance, self._parent_device); }
            }
            free_ptr(raw_swapchain_images);
            if vk_result == 0 { Ok(swapchain_images) } else { Err((RawVkResult::vk_to_wrapped(&vk_result), swapchain_images)) }
        }
    }
    
    pub fn acquire_next_image(&self, timeout: u64, semaphore: Option<&VkSemaphore>, fence: Option<&VkFence>) -> Result<usize, (VkResult, usize)> {
        unsafe {
            let raw_timeout = timeout;
            let raw_semaphore = if semaphore.is_some() { vk_to_raw_value(semaphore.unwrap()) } else { 0 };
            let raw_fence = if fence.is_some() { vk_to_raw_value(fence.unwrap()) } else { 0 };
            let mut vk_result = 0;
            let raw_image_index = &mut mem::zeroed() as *mut u32;
            
            vk_result = ((&*self._fn_table).vkAcquireNextImageKHR)(self._parent_device, self._handle, raw_timeout, raw_semaphore, raw_fence, raw_image_index);
            
            let image_index = new_vk_value(raw_image_index);
            if vk_result == 0 { Ok(image_index) } else { Err((RawVkResult::vk_to_wrapped(&vk_result), image_index)) }
        }
    }
    
    pub fn get_status(&self) -> VkResult {
        unsafe {
            let vk_result = ((&*self._fn_table).vkGetSwapchainStatusKHR)(self._parent_device, self._handle);
            RawVkResult::vk_to_wrapped(&vk_result)
        }
    }
    
    pub fn get_counter(&self, counter: ext::VkSurfaceCounterFlags) -> Result<usize, (VkResult, usize)> {
        unsafe {
            let raw_counter = vk_to_raw_value(&counter);
            let mut vk_result = 0;
            let raw_counter_value = &mut mem::zeroed() as *mut u64;
            
            vk_result = ((&*self._fn_table).vkGetSwapchainCounterEXT)(self._parent_device, self._handle, raw_counter, raw_counter_value);
            
            let counter_value = new_vk_value(raw_counter_value);
            if vk_result == 0 { Ok(counter_value) } else { Err((RawVkResult::vk_to_wrapped(&vk_result), counter_value)) }
        }
    }
}