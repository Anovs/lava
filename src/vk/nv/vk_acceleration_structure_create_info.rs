// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::nv::vk_acceleration_structure_info::*;

#[derive(Debug, Clone)]
pub struct VkAccelerationStructureCreateInfo<'a, 'b, 'c, 'd, 'e>
    where
        'b: 'a,
        'c: 'a,
        'd: 'a,
        'e: 'a,
{
    pub compacted_size: usize,
    pub info: VkAccelerationStructureInfo<'a, 'b, 'c, 'd, 'e>,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkAccelerationStructureCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub compacted_size: u64,
    pub info: RawVkAccelerationStructureInfo,
}

impl<'a, 'b, 'c, 'd, 'e> VkWrappedType<RawVkAccelerationStructureCreateInfo> for VkAccelerationStructureCreateInfo<'a, 'b, 'c, 'd, 'e>
    where
        'b: 'a,
        'c: 'a,
        'd: 'a,
        'e: 'a,
{
    fn vk_to_raw(src: &VkAccelerationStructureCreateInfo, dst: &mut RawVkAccelerationStructureCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::AccelerationStructureCreateInfoNv);
        dst.next = ptr::null();
        dst.compacted_size = vk_to_raw_value(&src.compacted_size);
        dst.info = vk_to_raw_value(&src.info);
    }
}

impl Default for VkAccelerationStructureCreateInfo<'static, 'static, 'static, 'static, 'static> {
    fn default() -> VkAccelerationStructureCreateInfo<'static, 'static, 'static, 'static, 'static> {
        VkAccelerationStructureCreateInfo {
            compacted_size: 0,
            info: VkAccelerationStructureInfo::default(),
        }
    }
}

impl<'a, 'b, 'c, 'd, 'e> VkSetup for VkAccelerationStructureCreateInfo<'a, 'b, 'c, 'd, 'e>
    where
        'b: 'a,
        'c: 'a,
        'd: 'a,
        'e: 'a,
{
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkAccelerationStructureCreateInfo {
    fn vk_free(&mut self) {
        RawVkAccelerationStructureInfo::vk_free(&mut self.info);
    }
}