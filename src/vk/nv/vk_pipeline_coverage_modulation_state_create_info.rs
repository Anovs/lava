// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::nv::vk_pipeline_coverage_modulation_state_create_flags::*;
use vk::nv::vk_coverage_modulation_mode::*;

#[repr(C)]
pub struct RawVkPipelineCoverageModulationStateCreateInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    flags: RawVkPipelineCoverageModulationStateCreateFlags,
    coverage_modulation_mode: RawVkCoverageModulationMode,
    coverage_modulation_table_enable: u32,
    coverage_modulation_table_count: u32,
    coverage_modulation_table: *const f32,
}

#[derive(Debug, Clone)]
pub struct VkPipelineCoverageModulationStateCreateInfo<'a> {
    pub flags: VkPipelineCoverageModulationStateCreateFlags,
    pub coverage_modulation_mode: VkCoverageModulationMode,
    pub coverage_modulation_table_enable: bool,
    pub coverage_modulation_table: Option<&'a [f32]>,
}

impl<'a> VkWrappedType<RawVkPipelineCoverageModulationStateCreateInfo> for VkPipelineCoverageModulationStateCreateInfo<'a> {
    fn vk_to_raw(src: &VkPipelineCoverageModulationStateCreateInfo, dst: &mut RawVkPipelineCoverageModulationStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineCoverageModulationStateCreateInfoNv);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.coverage_modulation_mode = vk_to_raw_value(&src.coverage_modulation_mode);
        dst.coverage_modulation_table_enable = vk_to_raw_value(&src.coverage_modulation_table_enable);
        dst.coverage_modulation_table_count = get_array_option_len(src.coverage_modulation_table) as u32;
        dst.coverage_modulation_table = slice_option_to_ptr(src.coverage_modulation_table);
    }
}

impl Default for VkPipelineCoverageModulationStateCreateInfo<'static> {
    fn default() -> VkPipelineCoverageModulationStateCreateInfo<'static> {
        VkPipelineCoverageModulationStateCreateInfo {
            flags: VkPipelineCoverageModulationStateCreateFlags::default(),
            coverage_modulation_mode: VkCoverageModulationMode::default(),
            coverage_modulation_table_enable: false,
            coverage_modulation_table: None,
        }
    }
}

impl<'a> VkSetup for VkPipelineCoverageModulationStateCreateInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPipelineCoverageModulationStateCreateInfo {
    fn vk_free(&mut self) {
        
    }
}