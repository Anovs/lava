// Generated by `scripts/generate_vk.js`

use utils::vk_traits::*;

pub type RawVkPipelineCoverageToColorStateCreateFlags = u32;

#[derive(Debug, Clone, Copy)]
pub struct VkPipelineCoverageToColorStateCreateFlags {
    
}

impl VkRawType<VkPipelineCoverageToColorStateCreateFlags> for RawVkPipelineCoverageToColorStateCreateFlags {
    fn vk_to_wrapped(src: &RawVkPipelineCoverageToColorStateCreateFlags) -> VkPipelineCoverageToColorStateCreateFlags {
        VkPipelineCoverageToColorStateCreateFlags {
            
        }
    }
}

impl VkWrappedType<RawVkPipelineCoverageToColorStateCreateFlags> for VkPipelineCoverageToColorStateCreateFlags {
    fn vk_to_raw(src: &VkPipelineCoverageToColorStateCreateFlags, dst: &mut RawVkPipelineCoverageToColorStateCreateFlags) {
        *dst = 0;
    }
}

impl Default for VkPipelineCoverageToColorStateCreateFlags {
    fn default() -> VkPipelineCoverageToColorStateCreateFlags {
        VkPipelineCoverageToColorStateCreateFlags {
            
        }
    }
}

impl VkPipelineCoverageToColorStateCreateFlags {
    
    pub fn none() -> VkPipelineCoverageToColorStateCreateFlags {
        VkPipelineCoverageToColorStateCreateFlags {
            
        }
    }
    
    pub fn all() -> VkPipelineCoverageToColorStateCreateFlags {
        VkPipelineCoverageToColorStateCreateFlags {
            
        }
    }
}

impl VkPipelineCoverageToColorStateCreateFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
    }
}