// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::nv::vk_pipeline_viewport_swizzle_state_create_flags::*;
use vk::nv::vk_viewport_swizzle::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPipelineViewportSwizzleStateCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkPipelineViewportSwizzleStateCreateFlags,
    pub viewport_count: u32,
    pub viewport_swizzles: *mut RawVkViewportSwizzle,
}

#[derive(Debug, Clone)]
pub struct VkPipelineViewportSwizzleStateCreateInfo<'a> {
    pub flags: VkPipelineViewportSwizzleStateCreateFlags,
    pub viewport_swizzles: Option<&'a [VkViewportSwizzle]>,
}

impl<'a> VkWrappedType<RawVkPipelineViewportSwizzleStateCreateInfo> for VkPipelineViewportSwizzleStateCreateInfo<'a> {
    fn vk_to_raw(src: &VkPipelineViewportSwizzleStateCreateInfo, dst: &mut RawVkPipelineViewportSwizzleStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineViewportSwizzleStateCreateInfoNv);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.viewport_count = get_array_option_len(src.viewport_swizzles) as u32;
        dst.viewport_swizzles = new_ptr_vk_array_checked(src.viewport_swizzles);
    }
}

impl Default for VkPipelineViewportSwizzleStateCreateInfo<'static> {
    fn default() -> VkPipelineViewportSwizzleStateCreateInfo<'static> {
        VkPipelineViewportSwizzleStateCreateInfo {
            flags: VkPipelineViewportSwizzleStateCreateFlags::default(),
            viewport_swizzles: None,
        }
    }
}

impl<'a> VkSetup for VkPipelineViewportSwizzleStateCreateInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPipelineViewportSwizzleStateCreateInfo {
    fn vk_free(&mut self) {
        free_vk_ptr_array(self.viewport_count as usize, self.viewport_swizzles);
    }
}