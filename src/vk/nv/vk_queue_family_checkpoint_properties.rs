// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_pipeline_stage_flags::*;

#[repr(C)]
pub struct RawVkQueueFamilyCheckpointProperties {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub checkpoint_execution_stage_mask: RawVkPipelineStageFlags,
}

#[derive(Debug, Clone)]
pub struct VkQueueFamilyCheckpointProperties {
    pub checkpoint_execution_stage_mask: VkPipelineStageFlags,
}

impl VkRawType<VkQueueFamilyCheckpointProperties> for RawVkQueueFamilyCheckpointProperties {
    fn vk_to_wrapped(src: &RawVkQueueFamilyCheckpointProperties) -> VkQueueFamilyCheckpointProperties {
        VkQueueFamilyCheckpointProperties {
            checkpoint_execution_stage_mask: RawVkPipelineStageFlags::vk_to_wrapped(&src.checkpoint_execution_stage_mask),
        }
    }
}

impl VkWrappedType<RawVkQueueFamilyCheckpointProperties> for VkQueueFamilyCheckpointProperties {
    fn vk_to_raw(src: &VkQueueFamilyCheckpointProperties, dst: &mut RawVkQueueFamilyCheckpointProperties) {
        dst.s_type = vk_to_raw_value(&VkStructureType::QueueFamilyCheckpointPropertiesNv);
        dst.next = ptr::null();
        dst.checkpoint_execution_stage_mask = vk_to_raw_value(&src.checkpoint_execution_stage_mask);
    }
}

impl Default for VkQueueFamilyCheckpointProperties {
    fn default() -> VkQueueFamilyCheckpointProperties {
        VkQueueFamilyCheckpointProperties {
            checkpoint_execution_stage_mask: VkPipelineStageFlags::default(),
        }
    }
}

impl VkSetup for VkQueueFamilyCheckpointProperties {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkQueueFamilyCheckpointProperties {
    fn vk_free(&mut self) {
        
    }
}