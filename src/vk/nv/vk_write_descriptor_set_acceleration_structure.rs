// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::nv::vk_acceleration_structure::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkWriteDescriptorSetAccelerationStructure {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub acceleration_structure_count: u32,
    pub acceleration_structures: *mut RawVkAccelerationStructure,
}

#[derive(Debug, Clone)]
pub struct VkWriteDescriptorSetAccelerationStructure<'a, 'b>
    where
        'b: 'a,
{
    pub acceleration_structures: &'a [&'b VkAccelerationStructure],
}

impl<'a, 'b> VkWrappedType<RawVkWriteDescriptorSetAccelerationStructure> for VkWriteDescriptorSetAccelerationStructure<'a, 'b>
    where
        'b: 'a,
{
    fn vk_to_raw(src: &VkWriteDescriptorSetAccelerationStructure, dst: &mut RawVkWriteDescriptorSetAccelerationStructure) {
        dst.s_type = vk_to_raw_value(&VkStructureType::WriteDescriptorSetAccelerationStructureNv);
        dst.next = ptr::null();
        dst.acceleration_structure_count = src.acceleration_structures.len() as u32;
        dst.acceleration_structures = new_ptr_vk_array_from_ref(src.acceleration_structures);
    }
}

impl Default for VkWriteDescriptorSetAccelerationStructure<'static, 'static> {
    fn default() -> VkWriteDescriptorSetAccelerationStructure<'static, 'static> {
        VkWriteDescriptorSetAccelerationStructure {
            acceleration_structures: &[],
        }
    }
}

impl<'a, 'b> VkSetup for VkWriteDescriptorSetAccelerationStructure<'a, 'b>
    where
        'b: 'a,
{
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkWriteDescriptorSetAccelerationStructure {
    fn vk_free(&mut self) {
        free_ptr(self.acceleration_structures);
    }
}