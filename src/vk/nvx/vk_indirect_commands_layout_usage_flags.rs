// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkIndirectCommandsLayoutUsageFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkIndirectCommandsLayoutUsageFlags {
    unordered_sequences: bool,
    sparse_sequences: bool,
    empty_executions: bool,
    indexed_sequences: bool,
}

impl VkRawType<VkIndirectCommandsLayoutUsageFlags> for RawVkIndirectCommandsLayoutUsageFlags {
    
    fn vk_to_wrapped(src: &RawVkIndirectCommandsLayoutUsageFlags) -> VkIndirectCommandsLayoutUsageFlags {
        VkIndirectCommandsLayoutUsageFlags {
            unordered_sequences: (src & 0x00000001) != 0,
            sparse_sequences: (src & 0x00000002) != 0,
            empty_executions: (src & 0x00000004) != 0,
            indexed_sequences: (src & 0x00000008) != 0,
        }
    }
}

impl VkWrappedType<RawVkIndirectCommandsLayoutUsageFlags> for VkIndirectCommandsLayoutUsageFlags {
    
    fn vk_to_raw(src: &VkIndirectCommandsLayoutUsageFlags, dst: &mut RawVkIndirectCommandsLayoutUsageFlags) {
        *dst = 0;
        if src.unordered_sequences { *dst |= 0x00000001; }
        if src.sparse_sequences { *dst |= 0x00000002; }
        if src.empty_executions { *dst |= 0x00000004; }
        if src.indexed_sequences { *dst |= 0x00000008; }
    }
}

impl VkDefault for VkIndirectCommandsLayoutUsageFlags {
    
    fn vk_default() -> VkIndirectCommandsLayoutUsageFlags {
        VkIndirectCommandsLayoutUsageFlags {
            unordered_sequences: false,
            sparse_sequences: false,
            empty_executions: false,
            indexed_sequences: false,
        }
    }
}