// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::nvx::vk_object_entry_type::*;
use vk::nvx::vk_object_entry_usage_flags::*;

#[derive(Debug, Clone)]
pub struct VkObjectTableEntry {
    pub type_: VkObjectEntryType,
    pub flags: VkObjectEntryUsageFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkObjectTableEntry {
    pub type_: RawVkObjectEntryType,
    pub flags: RawVkObjectEntryUsageFlags,
}

impl VkWrappedType<RawVkObjectTableEntry> for VkObjectTableEntry {
    fn vk_to_raw(src: &VkObjectTableEntry, dst: &mut RawVkObjectTableEntry) {
        dst.type_ = vk_to_raw_value(&src.type_);
        dst.flags = vk_to_raw_value(&src.flags);
    }
}

impl VkRawType<VkObjectTableEntry> for RawVkObjectTableEntry {
    fn vk_to_wrapped(src: &RawVkObjectTableEntry) -> VkObjectTableEntry {
        VkObjectTableEntry {
            type_: RawVkObjectEntryType::vk_to_wrapped(&src.type_),
            flags: RawVkObjectEntryUsageFlags::vk_to_wrapped(&src.flags),
        }
    }
}

impl Default for VkObjectTableEntry {
    fn default() -> VkObjectTableEntry {
        VkObjectTableEntry {
            type_: VkObjectEntryType::default(),
            flags: VkObjectEntryUsageFlags::default(),
        }
    }
}

impl VkSetup for VkObjectTableEntry {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkObjectTableEntry {
    fn vk_free(&mut self) {
        
    }
}