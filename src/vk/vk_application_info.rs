// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::string::String;
use std::vec::Vec;
use std::ops::Deref;
use std::ptr;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_type::*;
use vk::vk_structure_type::*;
use vk::vk_version::*;

pub struct RawVkApplicationInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    application_name: VkPtr<c_char>,
    application_version: u32,
    engine_name: VkPtr<c_char>,
    engine_version: u32,
    api_version: u32,
}

pub struct VkApplicationInfo<A, B>
    where
        A : Deref<Target=str>,
        B : Deref<Target=str>,
 {
    pub application_name: A,
    pub application_version: VkVersion,
    pub engine_name: B,
    pub engine_version: VkVersion,
    pub api_version: VkVersion,
}

impl<A, B> Deref for VkApplicationInfo<A, B>
    where
        A : Deref<Target=str>,
        B : Deref<Target=str>,
 {
    type Target = VkApplicationInfo<A, B>;
    fn deref(&self) -> &VkApplicationInfo<A, B> {
        self
    }
}

impl VkRawType<VkApplicationInfo<String, String>> for RawVkApplicationInfo {
    fn vk_to_wrapped(src: &RawVkApplicationInfo) -> VkApplicationInfo<String, String> {
        VkApplicationInfo {
            application_name: new_string(src.application_name.as_ptr()),
            application_version: u32::vk_to_wrapped(&src.application_version),
            engine_name: new_string(src.engine_name.as_ptr()),
            engine_version: u32::vk_to_wrapped(&src.engine_version),
            api_version: u32::vk_to_wrapped(&src.api_version),
        }
    }
}

impl<A, B> VkWrappedType<RawVkApplicationInfo> for VkApplicationInfo<A, B>
    where
        A : Deref<Target=str>,
        B : Deref<Target=str>,
 {
    fn vk_to_raw(src: &VkApplicationInfo<A, B>, dst: &mut RawVkApplicationInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::ApplicationInfo);
        dst.next = ptr::null();
        dst.application_name = VkPtr::new_string(&src.application_name);
        dst.application_version = vk_to_raw_value(&src.application_version);
        dst.engine_name = VkPtr::new_string(&src.engine_name);
        dst.engine_version = vk_to_raw_value(&src.engine_version);
        dst.api_version = vk_to_raw_value(&src.api_version);
    }
}

impl VkDefault for VkApplicationInfo<&'static str, &'static str> {
    fn vk_default() -> VkApplicationInfo<&'static str, &'static str> {
        VkApplicationInfo {
            application_name: vk_null::<String>(),
            application_version: VkVersion::vk_default(),
            engine_name: vk_null::<String>(),
            engine_version: VkVersion::vk_default(),
            api_version: VkVersion::vk_default(),
        }
    }
}