// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::ptr::null;
use libc::*;

#[repr(C)]
pub struct RawVkApplicationInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    application_name: *mut c_char,
    application_version: u32,
    engine_name: *mut c_char,
    engine_version: u32,
    api_version: u32,
}

#[derive(Debug)]
pub struct VkApplicationInfo {
    pub application_name: String,
    pub application_version: [u32; 3],
    pub engine_name: String,
    pub engine_version: [u32; 3],
    pub api_version: [u32; 3],
}

impl VkFrom<VkApplicationInfo> for RawVkApplicationInfo {
    
    fn vk_from(value: &VkApplicationInfo) -> Self {
        unsafe {
            Self {
                s_type: VkFrom::vk_from(&VkStructureType::ApplicationInfo),
                next: null(),
                application_name: copy_as_c_string(&value.application_name),
                application_version: vk_make_version(&value.application_version),
                engine_name: copy_as_c_string(&value.engine_name),
                engine_version: vk_make_version(&value.engine_version),
                api_version: vk_make_version(&value.api_version),
            }
        }
    }
}

impl Drop for RawVkApplicationInfo {
    
    fn drop(&mut self) {
        unsafe {
            free_c_string(self.application_name);
            free_c_string(self.engine_name);
        }
    }
}