// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_image_layout::*;

#[derive(Debug, Clone)]
pub struct VkAttachmentReference {
    pub attachment: usize,
    pub layout: VkImageLayout,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkAttachmentReference {
    pub attachment: u32,
    pub layout: RawVkImageLayout,
}

impl VkWrappedType<RawVkAttachmentReference> for VkAttachmentReference {
    fn vk_to_raw(src: &VkAttachmentReference, dst: &mut RawVkAttachmentReference) {
        dst.attachment = vk_to_raw_value(&src.attachment);
        dst.layout = vk_to_raw_value(&src.layout);
    }
}

impl VkRawType<VkAttachmentReference> for RawVkAttachmentReference {
    fn vk_to_wrapped(src: &RawVkAttachmentReference) -> VkAttachmentReference {
        VkAttachmentReference {
            attachment: u32::vk_to_wrapped(&src.attachment),
            layout: RawVkImageLayout::vk_to_wrapped(&src.layout),
        }
    }
}

impl Default for VkAttachmentReference {
    fn default() -> VkAttachmentReference {
        VkAttachmentReference {
            attachment: 0,
            layout: VkImageLayout::default(),
        }
    }
}

impl VkSetup for VkAttachmentReference {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkAttachmentReference {
    fn vk_free(&mut self) {
        
    }
}