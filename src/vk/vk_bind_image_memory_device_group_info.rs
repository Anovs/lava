// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_rect_2d::*;

#[derive(Debug, Clone)]
pub struct VkBindImageMemoryDeviceGroupInfo<'a, 'b> {
    pub device_indices: &'a [usize],
    pub split_instance_bind_regions: &'b [VkRect2D],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkBindImageMemoryDeviceGroupInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub device_index_count: u32,
    pub device_indices: *mut u32,
    pub split_instance_bind_region_count: u32,
    pub split_instance_bind_regions: *mut RawVkRect2D,
}

impl<'a, 'b> VkWrappedType<RawVkBindImageMemoryDeviceGroupInfo> for VkBindImageMemoryDeviceGroupInfo<'a, 'b> {
    fn vk_to_raw(src: &VkBindImageMemoryDeviceGroupInfo, dst: &mut RawVkBindImageMemoryDeviceGroupInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::BindImageMemoryDeviceGroupInfo);
        dst.next = ptr::null();
        dst.device_index_count = src.device_indices.len() as u32;
        dst.device_indices = new_ptr_vk_array(src.device_indices);
        dst.split_instance_bind_region_count = src.split_instance_bind_regions.len() as u32;
        dst.split_instance_bind_regions = new_ptr_vk_array(src.split_instance_bind_regions);
    }
}

impl Default for VkBindImageMemoryDeviceGroupInfo<'static, 'static> {
    fn default() -> VkBindImageMemoryDeviceGroupInfo<'static, 'static> {
        VkBindImageMemoryDeviceGroupInfo {
            device_indices: &[],
            split_instance_bind_regions: &[],
        }
    }
}

impl<'a, 'b> VkSetup for VkBindImageMemoryDeviceGroupInfo<'a, 'b> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkBindImageMemoryDeviceGroupInfo {
    fn vk_free(&mut self) {
        free_ptr(self.device_indices);
        free_vk_ptr_array(self.split_instance_bind_region_count as usize, self.split_instance_bind_regions);
    }
}