// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_image::*;
use vk::vk_device_memory::*;

#[repr(C)]
#[derive(Debug)]
pub struct RawVkBindImageMemoryInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub image: RawVkImage,
    pub memory: RawVkDeviceMemory,
    pub memory_offset: u64,
}

#[derive(Debug, Clone)]
pub struct VkBindImageMemoryInfo<'a, 'b> {
    pub image: &'a VkImage,
    pub memory: &'b VkDeviceMemory,
    pub memory_offset: usize,
}

impl<'a, 'b> VkWrappedType<RawVkBindImageMemoryInfo> for VkBindImageMemoryInfo<'a, 'b> {
    fn vk_to_raw(src: &VkBindImageMemoryInfo, dst: &mut RawVkBindImageMemoryInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::BindImageMemoryInfo);
        dst.next = ptr::null();
        dst.image = vk_to_raw_value(src.image);
        dst.memory = vk_to_raw_value(src.memory);
        dst.memory_offset = vk_to_raw_value(&src.memory_offset);
    }
}

impl Default for VkBindImageMemoryInfo<'static, 'static> {
    fn default() -> VkBindImageMemoryInfo<'static, 'static> {
        VkBindImageMemoryInfo {
            image: vk_null_ref(),
            memory: vk_null_ref(),
            memory_offset: 0,
        }
    }
}

impl<'a, 'b> VkSetup for VkBindImageMemoryInfo<'a, 'b> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkBindImageMemoryInfo {
    fn vk_free(&mut self) {
        
    }
}