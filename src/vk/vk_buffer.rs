// Generated by `scripts/generate_vk.js`

use utils::c_bindings::*;
use utils::vk_traits::*;
use utils::vk_ptr::*;
use utils::vk_convert::*;
use std::os::raw::c_char;
use std::ptr;
use std::mem;
use std::cmp;
use vk::*;

pub type RawVkBuffer = u64;

#[derive(Debug, Copy, Clone)]
pub struct VkBuffer {
    _handle: RawVkBuffer,
    _parent_instance: RawVkInstance,
    _parent_device: RawVkDevice,
    _fn_table: *mut VkInstanceFunctionTable
}

impl VkRawType<VkBuffer> for RawVkBuffer {
    fn vk_to_wrapped(src: &RawVkBuffer) -> VkBuffer {
        VkBuffer {
            _handle: *src,
            _parent_instance: 0,
            _parent_device: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl VkWrappedType<RawVkBuffer> for VkBuffer {
    fn vk_to_raw(src: &VkBuffer, dst: &mut RawVkBuffer) {
        *dst = src._handle
    }
}

impl Default for VkBuffer {
    fn default() -> VkBuffer {
        VkBuffer {
            _handle: 0,
            _parent_instance: 0,
            _parent_device: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl PartialEq for VkBuffer {
    fn eq(&self, other: &VkBuffer) -> bool {
        self._handle == other._handle
    }
}

impl VkSetup for VkBuffer {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        self._parent_instance = instance;
        self._parent_device = device;
        self._fn_table = fn_table;
    }
}

impl VkBuffer {
    
    pub fn handle(&self) -> u64 {
        self._handle
    }
    
    pub fn bind_memory(&self, memory: &VkDeviceMemory, memory_offset: usize) -> Result<(), VkResult> {
        unsafe {
            let raw_memory = vk_to_raw_value(memory);
            let raw_memory_offset = vk_to_raw_value(&memory_offset);
            let vk_result = ((&*self._fn_table).vkBindBufferMemory)(self._parent_device, self._handle, raw_memory, raw_memory_offset);
            if vk_result != 0 { return Err(RawVkResult::vk_to_wrapped(&vk_result)) }
            Ok(())
        }
    }
    
    pub fn get_memory_requirements(&self) -> VkMemoryRequirements {
        unsafe {
            let raw_memory_requirements = &mut mem::uninitialized() as *mut RawVkMemoryRequirements;
            
            ((&*self._fn_table).vkGetBufferMemoryRequirements)(self._parent_device, self._handle, raw_memory_requirements);
            
            let mut memory_requirements = new_vk_value(raw_memory_requirements);
            let fn_table = self._fn_table;
            let parent_instance = self._parent_instance;
            let parent_device = self._parent_device;
            VkSetup::vk_setup(&mut memory_requirements, fn_table, parent_instance, parent_device);
            RawVkMemoryRequirements::vk_free(raw_memory_requirements.as_mut().unwrap());
            memory_requirements
        }
    }
    
    pub fn destroy(&self) {
        unsafe {
            ((&*self._fn_table).vkDestroyBuffer)(self._parent_device, self._handle, ptr::null());
        }
    }
}