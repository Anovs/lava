// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkBufferCreateFlags = u32;

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkBufferCreateFlags {
    pub sparse_binding: bool,
    pub sparse_residency: bool,
    pub sparse_aliased: bool,
    pub protected: bool,
}

impl VkFrom<VkBufferCreateFlags> for RawVkBufferCreateFlags {
    
    fn vk_from(value: &VkBufferCreateFlags) -> Self { {
            0
            + (if value.sparse_binding { 0x00000001 } else { 0 })
            + (if value.sparse_residency { 0x00000002 } else { 0 })
            + (if value.sparse_aliased { 0x00000004 } else { 0 })
            + (if value.protected { 0x00000008 } else { 0 })
        }
    }
}

impl VkFrom<RawVkBufferCreateFlags> for VkBufferCreateFlags {
    
    fn vk_from(value: &RawVkBufferCreateFlags) -> Self {
        Self {
            sparse_binding: (value & 0x00000001) > 0,
            sparse_residency: (value & 0x00000002) > 0,
            sparse_aliased: (value & 0x00000004) > 0,
            protected: (value & 0x00000008) > 0,
        }
    }
}