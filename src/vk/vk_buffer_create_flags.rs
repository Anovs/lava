// Generated by `scripts/generate_type.js`

use std::convert::From;

pub type RawVkBufferCreateFlags = u32;

#[derive(Debug, Default)]
pub struct VkBufferCreateFlags {
    pub sparse_binding: bool,
    pub sparse_residency: bool,
    pub sparse_aliased: bool,
    pub protected: bool
}

impl<'a> From<&'a u32> for VkBufferCreateFlags {
    fn from(value: &'a u32) -> Self {
        VkBufferCreateFlags {
            sparse_binding: (value & 0x00000001) > 0,
            sparse_residency: (value & 0x00000002) > 0,
            sparse_aliased: (value & 0x00000004) > 0,
            protected: (value & 0x00000008) > 0
        }
    }
}

impl<'a> From<&'a VkBufferCreateFlags> for u32 {
    fn from(value: &'a VkBufferCreateFlags) -> Self {
        (if value.sparse_binding { 0x00000001 } else { 0 }) +
        (if value.sparse_residency { 0x00000002 } else { 0 }) +
        (if value.sparse_aliased { 0x00000004 } else { 0 }) +
        (if value.protected { 0x00000008 } else { 0 })
    }
}

impl VkBufferCreateFlags {
    pub fn none() -> Self {
        VkBufferCreateFlags::default()
    }
}