// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_buffer_create_flags::*;
use vk::vk_buffer_usage_flags::*;
use vk::vk_sharing_mode::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkBufferCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkBufferCreateFlags,
    pub size: u64,
    pub usage: RawVkBufferUsageFlags,
    pub sharing_mode: RawVkSharingMode,
    pub queue_family_index_count: u32,
    pub queue_family_indices: *mut u32,
}

#[derive(Debug, Clone)]
pub struct VkBufferCreateInfo<'a> {
    pub flags: VkBufferCreateFlags,
    pub size: usize,
    pub usage: VkBufferUsageFlags,
    pub sharing_mode: VkSharingMode,
    pub queue_family_indices: &'a [usize],
}

impl<'a> VkWrappedType<RawVkBufferCreateInfo> for VkBufferCreateInfo<'a> {
    fn vk_to_raw(src: &VkBufferCreateInfo, dst: &mut RawVkBufferCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::BufferCreateInfo);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.size = vk_to_raw_value(&src.size);
        dst.usage = vk_to_raw_value(&src.usage);
        dst.sharing_mode = vk_to_raw_value(&src.sharing_mode);
        dst.queue_family_index_count = src.queue_family_indices.len() as u32;
        dst.queue_family_indices = new_ptr_vk_array(src.queue_family_indices);
    }
}

impl Default for VkBufferCreateInfo<'static> {
    fn default() -> VkBufferCreateInfo<'static> {
        VkBufferCreateInfo {
            flags: VkBufferCreateFlags::default(),
            size: 0,
            usage: VkBufferUsageFlags::default(),
            sharing_mode: VkSharingMode::default(),
            queue_family_indices: &[],
        }
    }
}

impl<'a> VkSetup for VkBufferCreateInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkBufferCreateInfo {
    fn vk_free(&mut self) {
        free_ptr(self.queue_family_indices);
    }
}