// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_image_subresource_layers::*;
use vk::vk_offset_3d::*;
use vk::vk_extent_3d::*;

#[repr(C)]
pub struct RawVkBufferImageCopy {
    buffer_offset: u64,
    buffer_row_length: u32,
    buffer_image_height: u32,
    image_subresource: RawVkImageSubresourceLayers,
    image_offset: RawVkOffset3D,
    image_extent: RawVkExtent3D,
}

#[derive(Debug, Clone)]
pub struct VkBufferImageCopy {
    pub buffer_offset: usize,
    pub buffer_row_length: usize,
    pub buffer_image_height: usize,
    pub image_subresource: VkImageSubresourceLayers,
    pub image_offset: VkOffset3D,
    pub image_extent: VkExtent3D,
}

impl VkRawType<VkBufferImageCopy> for RawVkBufferImageCopy {
    fn vk_to_wrapped(src: &RawVkBufferImageCopy) -> VkBufferImageCopy {
        VkBufferImageCopy {
            buffer_offset: u64::vk_to_wrapped(&src.buffer_offset),
            buffer_row_length: u32::vk_to_wrapped(&src.buffer_row_length),
            buffer_image_height: u32::vk_to_wrapped(&src.buffer_image_height),
            image_subresource: RawVkImageSubresourceLayers::vk_to_wrapped(&src.image_subresource),
            image_offset: RawVkOffset3D::vk_to_wrapped(&src.image_offset),
            image_extent: RawVkExtent3D::vk_to_wrapped(&src.image_extent),
        }
    }
}

impl VkWrappedType<RawVkBufferImageCopy> for VkBufferImageCopy {
    fn vk_to_raw(src: &VkBufferImageCopy, dst: &mut RawVkBufferImageCopy) {
        dst.buffer_offset = vk_to_raw_value(&src.buffer_offset);
        dst.buffer_row_length = vk_to_raw_value(&src.buffer_row_length);
        dst.buffer_image_height = vk_to_raw_value(&src.buffer_image_height);
        dst.image_subresource = vk_to_raw_value(&src.image_subresource);
        dst.image_offset = vk_to_raw_value(&src.image_offset);
        dst.image_extent = vk_to_raw_value(&src.image_extent);
    }
}

impl Default for VkBufferImageCopy {
    fn default() -> VkBufferImageCopy {
        VkBufferImageCopy {
            buffer_offset: 0,
            buffer_row_length: 0,
            buffer_image_height: 0,
            image_subresource: VkImageSubresourceLayers::default(),
            image_offset: VkOffset3D::default(),
            image_extent: VkExtent3D::default(),
        }
    }
}

impl VkSetup for VkBufferImageCopy {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        VkSetup::vk_setup(&mut self.image_subresource, fn_table, instance, device);
        VkSetup::vk_setup(&mut self.image_offset, fn_table, instance, device);
        VkSetup::vk_setup(&mut self.image_extent, fn_table, instance, device);
    }
}

impl VkFree for RawVkBufferImageCopy {
    fn vk_free(&mut self) {
        RawVkImageSubresourceLayers::vk_free(&mut self.image_subresource);
        RawVkOffset3D::vk_free(&mut self.image_offset);
        RawVkExtent3D::vk_free(&mut self.image_extent);
    }
}