// Generated by `scripts/generate_type.js`

use std::convert::From;

pub type RawVkBufferUsageFlags = u32;

#[derive(Debug, Default)]
pub struct VkBufferUsageFlags {
    pub transfer_src: bool,
    pub transfer_dst: bool,
    pub uniform_texel_buffer: bool,
    pub storage_texel_buffer: bool,
    pub uniform_buffer: bool,
    pub storage_buffer: bool,
    pub index_buffer: bool,
    pub vertex_buffer: bool,
    pub indirect_buffer: bool
}

impl<'a> From<&'a u32> for VkBufferUsageFlags {
    fn from(value: &'a u32) -> Self {
        VkBufferUsageFlags {
            transfer_src: (value & 0x00000001) > 0,
            transfer_dst: (value & 0x00000002) > 0,
            uniform_texel_buffer: (value & 0x00000004) > 0,
            storage_texel_buffer: (value & 0x00000008) > 0,
            uniform_buffer: (value & 0x00000010) > 0,
            storage_buffer: (value & 0x00000020) > 0,
            index_buffer: (value & 0x00000040) > 0,
            vertex_buffer: (value & 0x00000080) > 0,
            indirect_buffer: (value & 0x00000100) > 0
        }
    }
}

impl<'a> From<&'a VkBufferUsageFlags> for u32 {
    fn from(value: &'a VkBufferUsageFlags) -> Self {
        (if value.transfer_src { 0x00000001 } else { 0 }) +
        (if value.transfer_dst { 0x00000002 } else { 0 }) +
        (if value.uniform_texel_buffer { 0x00000004 } else { 0 }) +
        (if value.storage_texel_buffer { 0x00000008 } else { 0 }) +
        (if value.uniform_buffer { 0x00000010 } else { 0 }) +
        (if value.storage_buffer { 0x00000020 } else { 0 }) +
        (if value.index_buffer { 0x00000040 } else { 0 }) +
        (if value.vertex_buffer { 0x00000080 } else { 0 }) +
        (if value.indirect_buffer { 0x00000100 } else { 0 })
    }
}

impl VkBufferUsageFlags {
    pub fn none() -> Self {
        VkBufferUsageFlags::default()
    }

    pub fn all() -> Self {
        VkBufferUsageFlags {
            transfer_src: true,
            transfer_dst: true,
            uniform_texel_buffer: true,
            storage_texel_buffer: true,
            uniform_buffer: true,
            storage_buffer: true,
            index_buffer: true,
            vertex_buffer: true,
            indirect_buffer: true
        }
    }
}