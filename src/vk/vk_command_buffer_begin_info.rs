// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_command_buffer_usage_flags::*;
use vk::vk_command_buffer_inheritance_info::*;

#[repr(C)]
#[derive(Debug)]
pub struct RawVkCommandBufferBeginInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkCommandBufferUsageFlags,
    pub inheritance_info: *mut RawVkCommandBufferInheritanceInfo,
}

#[derive(Debug, Clone)]
pub struct VkCommandBufferBeginInfo<'a, 'b, 'c>
    where
        'b: 'a,
        'c: 'a,
{
    pub flags: VkCommandBufferUsageFlags,
    pub inheritance_info: Option<&'a VkCommandBufferInheritanceInfo<'b, 'c>>,
}

impl<'a, 'b, 'c> VkWrappedType<RawVkCommandBufferBeginInfo> for VkCommandBufferBeginInfo<'a, 'b, 'c>
    where
        'b: 'a,
        'c: 'a,
{
    fn vk_to_raw(src: &VkCommandBufferBeginInfo, dst: &mut RawVkCommandBufferBeginInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::CommandBufferBeginInfo);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.inheritance_info = new_ptr_vk_value_checked(src.inheritance_info);
    }
}

impl Default for VkCommandBufferBeginInfo<'static, 'static, 'static> {
    fn default() -> VkCommandBufferBeginInfo<'static, 'static, 'static> {
        VkCommandBufferBeginInfo {
            flags: VkCommandBufferUsageFlags::default(),
            inheritance_info: None,
        }
    }
}

impl<'a, 'b, 'c> VkSetup for VkCommandBufferBeginInfo<'a, 'b, 'c>
    where
        'b: 'a,
        'c: 'a,
{
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkCommandBufferBeginInfo {
    fn vk_free(&mut self) {
        free_vk_ptr(self.inheritance_info);
    }
}