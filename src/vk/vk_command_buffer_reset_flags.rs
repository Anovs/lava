// Generated by `scripts/generate_vk.js`

use utils::vk_traits::*;

#[derive(Debug, Clone, Copy)]
pub struct VkCommandBufferResetFlags {
    pub release_resources: bool,
}

pub type RawVkCommandBufferResetFlags = u32;

impl VkWrappedType<RawVkCommandBufferResetFlags> for VkCommandBufferResetFlags {
    fn vk_to_raw(src: &VkCommandBufferResetFlags, dst: &mut RawVkCommandBufferResetFlags) {
        *dst = 0;
        if src.release_resources { *dst |= 0x00000001; }
    }
}

impl VkRawType<VkCommandBufferResetFlags> for RawVkCommandBufferResetFlags {
    fn vk_to_wrapped(src: &RawVkCommandBufferResetFlags) -> VkCommandBufferResetFlags {
        VkCommandBufferResetFlags {
            release_resources: (src & 0x00000001) != 0,
        }
    }
}

impl Default for VkCommandBufferResetFlags {
    fn default() -> VkCommandBufferResetFlags {
        VkCommandBufferResetFlags {
            release_resources: false,
        }
    }
}

impl VkCommandBufferResetFlags {
    
    pub fn none() -> VkCommandBufferResetFlags {
        VkCommandBufferResetFlags {
            release_resources: false,
        }
    }
    
    pub fn all() -> VkCommandBufferResetFlags {
        VkCommandBufferResetFlags {
            release_resources: true,
        }
    }
}

impl VkCommandBufferResetFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.release_resources { 0x00000001 } else { 0 }
    }
}