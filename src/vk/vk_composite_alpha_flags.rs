// Generated by `scripts/generate_type.js`

use std::convert::From;

pub type RawVkCompositeAlphaFlags = u32;

#[derive(Debug, Default, Copy, Clone)]
pub struct VkCompositeAlphaFlags {
    pub opaque: bool,
    pub pre_multiplied: bool,
    pub post_multiplied: bool,
    pub inherit: bool
}

impl<'a> From<&'a u32> for VkCompositeAlphaFlags {
    fn from(value: &'a u32) -> Self {
        VkCompositeAlphaFlags {
            opaque: (value & 0x00000001) > 0,
            pre_multiplied: (value & 0x00000002) > 0,
            post_multiplied: (value & 0x00000004) > 0,
            inherit: (value & 0x00000008) > 0
        }
    }
}

impl<'a> From<&'a VkCompositeAlphaFlags> for u32 {
    fn from(value: &'a VkCompositeAlphaFlags) -> Self {
        (if value.opaque { 0x00000001 } else { 0 }) +
        (if value.pre_multiplied { 0x00000002 } else { 0 }) +
        (if value.post_multiplied { 0x00000004 } else { 0 }) +
        (if value.inherit { 0x00000008 } else { 0 })
    }
}

impl VkCompositeAlphaFlags {
    pub fn none() -> Self {
        VkCompositeAlphaFlags::default()
    }

    pub fn all() -> Self {
        VkCompositeAlphaFlags {
            opaque: true,
            pre_multiplied: true,
            post_multiplied: true,
            inherit: true
        }
    }
}