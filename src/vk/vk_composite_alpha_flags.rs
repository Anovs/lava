// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkCompositeAlphaFlags = u32;

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkCompositeAlphaFlags {
    pub opaque: bool,
    pub pre_multiplied: bool,
    pub post_multiplied: bool,
    pub inherit: bool,
}

impl VkFlags for VkCompositeAlphaFlags {
    
    fn none() -> Self {
        Self {
            opaque: false,
            pre_multiplied: false,
            post_multiplied: false,
            inherit: false,
        }
    }
    
    fn all() -> Self {
        Self {
            opaque: true,
            pre_multiplied: true,
            post_multiplied: true,
            inherit: true,
        }
    }
}

impl VkFrom<VkCompositeAlphaFlags> for RawVkCompositeAlphaFlags {
    
    fn vk_from(value: &VkCompositeAlphaFlags) -> Self { {
            0
            + (if value.opaque { 0x00000001 } else { 0 })
            + (if value.pre_multiplied { 0x00000002 } else { 0 })
            + (if value.post_multiplied { 0x00000004 } else { 0 })
            + (if value.inherit { 0x00000008 } else { 0 })
        }
    }
}

impl VkFrom<RawVkCompositeAlphaFlags> for VkCompositeAlphaFlags {
    
    fn vk_from(value: &RawVkCompositeAlphaFlags) -> Self {
        Self {
            opaque: (value & 0x00000001) != 0,
            pre_multiplied: (value & 0x00000002) != 0,
            post_multiplied: (value & 0x00000004) != 0,
            inherit: (value & 0x00000008) != 0,
        }
    }
}