// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkCompositeAlphaFlagsKHR = u32;

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkCompositeAlphaFlagsKHR {
    pub opaque_khr: bool,
    pub pre_multiplied_khr: bool,
    pub post_multiplied_khr: bool,
    pub inherit_khr: bool,
}

impl VkFrom<VkCompositeAlphaFlagsKHR> for RawVkCompositeAlphaFlagsKHR {
    
    fn vk_from(value: &VkCompositeAlphaFlagsKHR) -> Self { {
            0
            + (if value.opaque_khr { 0x00000001 } else { 0 })
            + (if value.pre_multiplied_khr { 0x00000002 } else { 0 })
            + (if value.post_multiplied_khr { 0x00000004 } else { 0 })
            + (if value.inherit_khr { 0x00000008 } else { 0 })
        }
    }
}

impl VkFrom<RawVkCompositeAlphaFlagsKHR> for VkCompositeAlphaFlagsKHR {
    
    fn vk_from(value: &RawVkCompositeAlphaFlagsKHR) -> Self {
        Self {
            opaque_khr: (value & 0x00000001) > 0,
            pre_multiplied_khr: (value & 0x00000002) > 0,
            post_multiplied_khr: (value & 0x00000004) > 0,
            inherit_khr: (value & 0x00000008) > 0,
        }
    }
}