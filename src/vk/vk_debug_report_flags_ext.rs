// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkDebugReportFlagsEXT = u32;

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkDebugReportFlagsEXT {
    pub information_ext: bool,
    pub warning_ext: bool,
    pub performance_warning_ext: bool,
    pub error_ext: bool,
    pub debug_ext: bool,
}

impl VkFlags for VkDebugReportFlagsEXT {
    
    fn none() -> Self {
        Self {
            information_ext: false,
            warning_ext: false,
            performance_warning_ext: false,
            error_ext: false,
            debug_ext: false,
        }
    }
    
    fn all() -> Self {
        Self {
            information_ext: true,
            warning_ext: true,
            performance_warning_ext: true,
            error_ext: true,
            debug_ext: true,
        }
    }
}

impl VkFrom<VkDebugReportFlagsEXT> for RawVkDebugReportFlagsEXT {
    
    fn vk_from(value: &VkDebugReportFlagsEXT) -> Self { {
            0
            + (if value.information_ext { 0x00000001 } else { 0 })
            + (if value.warning_ext { 0x00000002 } else { 0 })
            + (if value.performance_warning_ext { 0x00000004 } else { 0 })
            + (if value.error_ext { 0x00000008 } else { 0 })
            + (if value.debug_ext { 0x00000010 } else { 0 })
        }
    }
}

impl VkFrom<RawVkDebugReportFlagsEXT> for VkDebugReportFlagsEXT {
    
    fn vk_from(value: &RawVkDebugReportFlagsEXT) -> Self {
        Self {
            information_ext: (value & 0x00000001) != 0,
            warning_ext: (value & 0x00000002) != 0,
            performance_warning_ext: (value & 0x00000004) != 0,
            error_ext: (value & 0x00000008) != 0,
            debug_ext: (value & 0x00000010) != 0,
        }
    }
}