// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_buffer::*;

#[repr(C)]
pub struct RawVkDescriptorBufferInfo {
    pub buffer: RawVkBuffer,
    pub offset: u64,
    pub range: u64,
}

#[derive(Debug, Clone)]
pub struct VkDescriptorBufferInfo<'a> {
    pub buffer: &'a VkBuffer,
    pub offset: usize,
    pub range: usize,
}

impl<'a> VkWrappedType<RawVkDescriptorBufferInfo> for VkDescriptorBufferInfo<'a> {
    fn vk_to_raw(src: &VkDescriptorBufferInfo, dst: &mut RawVkDescriptorBufferInfo) {
        dst.buffer = vk_to_raw_value(src.buffer);
        dst.offset = vk_to_raw_value(&src.offset);
        dst.range = vk_to_raw_value(&src.range);
    }
}

impl Default for VkDescriptorBufferInfo<'static> {
    fn default() -> VkDescriptorBufferInfo<'static> {
        VkDescriptorBufferInfo {
            buffer: vk_null_ref(),
            offset: 0,
            range: 0,
        }
    }
}

impl<'a> VkSetup for VkDescriptorBufferInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkDescriptorBufferInfo {
    fn vk_free(&mut self) {
        
    }
}