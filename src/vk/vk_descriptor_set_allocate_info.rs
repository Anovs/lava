// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_descriptor_pool::*;
use vk::vk_descriptor_set_layout::*;

#[repr(C)]
pub struct RawVkDescriptorSetAllocateInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    descriptor_pool: RawVkDescriptorPool,
    descriptor_set_count: u32,
    set_layouts: *mut RawVkDescriptorSetLayout,
}

#[derive(Debug, Clone)]
pub struct VkDescriptorSetAllocateInfo<'a, 'b> {
    pub descriptor_pool: &'a VkDescriptorPool,
    pub set_layouts: &'b [VkDescriptorSetLayout],
}

impl<'a, 'b> VkWrappedType<RawVkDescriptorSetAllocateInfo> for VkDescriptorSetAllocateInfo<'a, 'b> {
    fn vk_to_raw(src: &VkDescriptorSetAllocateInfo, dst: &mut RawVkDescriptorSetAllocateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DescriptorSetAllocateInfo);
        dst.next = ptr::null();
        dst.descriptor_pool = vk_to_raw_value(src.descriptor_pool);
        dst.descriptor_set_count = src.set_layouts.len() as u32;
        dst.set_layouts = new_ptr_vk_array(src.set_layouts);
    }
}

impl Default for VkDescriptorSetAllocateInfo<'static, 'static> {
    fn default() -> VkDescriptorSetAllocateInfo<'static, 'static> {
        VkDescriptorSetAllocateInfo {
            descriptor_pool: vk_null_ref(),
            set_layouts: &[],
        }
    }
}

impl<'a, 'b> VkSetup for VkDescriptorSetAllocateInfo<'a, 'b> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkDescriptorSetAllocateInfo {
    fn vk_free(&mut self) {
        free_ptr(self.set_layouts);
    }
}