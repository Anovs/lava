// Generated by `scripts/generate_vk.js`

use utils::c_bindings::*;
use utils::vk_traits::*;
use utils::vk_ptr::*;
use utils::vk_convert::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::ptr;
use std::mem;
use std::cmp;
use std::slice;
use vk::*;

pub type RawVkDeviceMemory = u64;

#[derive(Debug, Clone)]
pub struct VkDeviceMemory {
    _handle: RawVkDeviceMemory,
    _parent_instance: RawVkInstance,
    _parent_device: RawVkDevice,
    _fn_table: *mut VkInstanceFunctionTable
}

impl VkRawType<VkDeviceMemory> for RawVkDeviceMemory {
    fn vk_to_wrapped(src: &RawVkDeviceMemory) -> VkDeviceMemory {
        VkDeviceMemory {
            _handle: *src,
            _parent_instance: 0,
            _parent_device: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl VkWrappedType<RawVkDeviceMemory> for VkDeviceMemory {
    fn vk_to_raw(src: &VkDeviceMemory, dst: &mut RawVkDeviceMemory) {
        *dst = src._handle
    }
}

impl Default for VkDeviceMemory {
    fn default() -> VkDeviceMemory {
        VkDeviceMemory {
            _handle: 0,
            _parent_instance: 0,
            _parent_device: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl PartialEq for VkDeviceMemory {
    fn eq(&self, other: &VkDeviceMemory) -> bool {
        self._handle == other._handle
    }
}

impl VkSetup for VkDeviceMemory {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        self._parent_instance = instance;
        self._parent_device = device;
        self._fn_table = fn_table;
    }
}

impl VkDeviceMemory {
    
    pub fn vk_handle(&self) -> u64 {
        self._handle
    }
    
    pub fn free(&self) {
        unsafe {
            ((&*self._fn_table).vkFreeMemory)(self._parent_device, self._handle, ptr::null());
        }
    }
    
    pub fn map<'a>(&self, offset: usize, size: usize, flags: VkMemoryMapFlags) -> Result<&'a mut [c_void], (VkResult, &'a mut [c_void])> {
        unsafe {
            let raw_offset = vk_to_raw_value(&offset);
            let raw_size = vk_to_raw_value(&size);
            let raw_flags = vk_to_raw_value(&flags);
            let mut vk_result = 0;
            let raw_data = &mut mem::zeroed() as *mut *mut c_void;
            
            vk_result = ((&*self._fn_table).vkMapMemory)(self._parent_device, self._handle, raw_offset, raw_size, raw_flags, raw_data);
            
            let data = slice::from_raw_parts_mut(*raw_data, size);
            if vk_result == 0 { Ok(data) } else { Err((RawVkResult::vk_to_wrapped(&vk_result), data)) }
        }
    }
    
    pub fn unmap(&self) {
        unsafe {
            ((&*self._fn_table).vkUnmapMemory)(self._parent_device, self._handle);
        }
    }
    
    pub fn get_commitment(&self) -> usize {
        unsafe {
            let raw_committed_memory_in_bytes = &mut mem::zeroed() as *mut u64;
            
            ((&*self._fn_table).vkGetDeviceMemoryCommitment)(self._parent_device, self._handle, raw_committed_memory_in_bytes);
            
            let committed_memory_in_bytes = new_vk_value(raw_committed_memory_in_bytes);
            committed_memory_in_bytes
        }
    }
}