// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ptr::null;
use libc::*;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RawVkDeviceQueueCreateInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    flags: RawVkDeviceQueueCreateFlags,
    queue_family_index: u32,
    queue_count: u32,
    queue_priorities: *mut f32,
}

#[derive(Debug)]
pub struct VkDeviceQueueCreateInfo {
    pub flags: VkDeviceQueueCreateFlags,
    pub queue_family_index: usize,
    pub queue_priorities: Vec<f32>,
}

impl VkFrom<VkDeviceQueueCreateInfo> for RawVkDeviceQueueCreateInfo {
    
    fn vk_from(value: &VkDeviceQueueCreateInfo) -> Self {
        unsafe {
            Self {
                s_type: VkFrom::vk_from(&VkStructureType::DeviceQueueCreateInfo),
                next: null(),
                flags: VkFrom::vk_from(&value.flags),
                queue_family_index: value.queue_family_index as u32,
                queue_count: value.queue_priorities.len() as u32,
                queue_priorities: copy_as_c_array(&value.queue_priorities),
            }
        }
    }
}