// Generated by `scripts/generate_type.js`

use std::convert::From;
use std::string::String;
use std::ffi::CStr;
use std::os::raw::c_char;

#[repr(C)]
#[derive(Clone, Copy)]
pub struct RawVkExtensionProperties {
    extension_name: [i8; 256],
    spec_version: u32
}

#[derive(Debug)]
pub struct VkExtensionProperties {
    pub extension_name: String,
    pub spec_version: u32
}

impl<'a> From<&'a RawVkExtensionProperties> for VkExtensionProperties {
    fn from(value: &'a RawVkExtensionProperties) -> Self {
        VkExtensionProperties {
            extension_name: unsafe { String::from_utf8_unchecked(CStr::from_ptr(&value.extension_name as *const c_char).to_bytes().to_vec()) },
            spec_version: value.spec_version
        }
    }
}

impl<'a> From<&'a VkExtensionProperties> for RawVkExtensionProperties {
    fn from(value: &'a VkExtensionProperties) -> Self {
        RawVkExtensionProperties {
            extension_name: [0; 256],
            spec_version: value.spec_version
        }
    }
}

