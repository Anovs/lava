// Generated by `scripts/generate_vk.js`

use utils::vk_traits::*;

pub type RawVkExternalFenceHandleTypeFlags = u32;

#[derive(Debug, Clone, Copy)]
pub struct VkExternalFenceHandleTypeFlags {
    pub opaque_fd: bool,
    pub opaque_win_32: bool,
    pub opaque_win_32_kmt: bool,
    pub sync_fd: bool,
}

impl VkRawType<VkExternalFenceHandleTypeFlags> for RawVkExternalFenceHandleTypeFlags {
    fn vk_to_wrapped(src: &RawVkExternalFenceHandleTypeFlags) -> VkExternalFenceHandleTypeFlags {
        VkExternalFenceHandleTypeFlags {
            opaque_fd: (src & 0x00000001) != 0,
            opaque_win_32: (src & 0x00000002) != 0,
            opaque_win_32_kmt: (src & 0x00000004) != 0,
            sync_fd: (src & 0x00000008) != 0,
        }
    }
}

impl VkWrappedType<RawVkExternalFenceHandleTypeFlags> for VkExternalFenceHandleTypeFlags {
    fn vk_to_raw(src: &VkExternalFenceHandleTypeFlags, dst: &mut RawVkExternalFenceHandleTypeFlags) {
        *dst = 0;
        if src.opaque_fd { *dst |= 0x00000001; }
        if src.opaque_win_32 { *dst |= 0x00000002; }
        if src.opaque_win_32_kmt { *dst |= 0x00000004; }
        if src.sync_fd { *dst |= 0x00000008; }
    }
}

impl Default for VkExternalFenceHandleTypeFlags {
    fn default() -> VkExternalFenceHandleTypeFlags {
        VkExternalFenceHandleTypeFlags {
            opaque_fd: false,
            opaque_win_32: false,
            opaque_win_32_kmt: false,
            sync_fd: false,
        }
    }
}

impl VkExternalFenceHandleTypeFlags {
    
    pub fn none() -> VkExternalFenceHandleTypeFlags {
        VkExternalFenceHandleTypeFlags {
            opaque_fd: false,
            opaque_win_32: false,
            opaque_win_32_kmt: false,
            sync_fd: false,
        }
    }
    
    pub fn all() -> VkExternalFenceHandleTypeFlags {
        VkExternalFenceHandleTypeFlags {
            opaque_fd: true,
            opaque_win_32: true,
            opaque_win_32_kmt: true,
            sync_fd: true,
        }
    }
}