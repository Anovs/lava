// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkFormatFeatureFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkFormatFeatureFlags {
    sampled_image: bool,
    storage_image: bool,
    storage_image_atomic: bool,
    uniform_texel_buffer: bool,
    storage_texel_buffer: bool,
    storage_texel_buffer_atomic: bool,
    vertex_buffer: bool,
    color_attachment: bool,
    color_attachment_blend: bool,
    depth_stencil_attachment: bool,
    blit_src: bool,
    blit_dst: bool,
    sampled_image_filter_linear: bool,
    transfer_src: bool,
    transfer_dst: bool,
    midpoint_chroma_samples: bool,
    sampled_image_ycbcr_conversion_linear_filter: bool,
    sampled_image_ycbcr_conversion_separate_reconstruction_filter: bool,
    sampled_image_ycbcr_conversion_chroma_reconstruction_explicit: bool,
    sampled_image_ycbcr_conversion_chroma_reconstruction_explicit_forceable: bool,
    disjoint: bool,
    cosited_chroma_samples: bool,
    sampled_image_filter_cubic_img: bool,
    sampled_image_filter_minmax_ext: bool,
}

impl VkRawType<VkFormatFeatureFlags> for RawVkFormatFeatureFlags {
    
    fn vk_to_wrapped(src: &RawVkFormatFeatureFlags) -> VkFormatFeatureFlags {
        VkFormatFeatureFlags {
            sampled_image: (src & 0x00000001) != 0,
            storage_image: (src & 0x00000002) != 0,
            storage_image_atomic: (src & 0x00000004) != 0,
            uniform_texel_buffer: (src & 0x00000008) != 0,
            storage_texel_buffer: (src & 0x00000010) != 0,
            storage_texel_buffer_atomic: (src & 0x00000020) != 0,
            vertex_buffer: (src & 0x00000040) != 0,
            color_attachment: (src & 0x00000080) != 0,
            color_attachment_blend: (src & 0x00000100) != 0,
            depth_stencil_attachment: (src & 0x00000200) != 0,
            blit_src: (src & 0x00000400) != 0,
            blit_dst: (src & 0x00000800) != 0,
            sampled_image_filter_linear: (src & 0x00001000) != 0,
            transfer_src: (src & 0x00004000) != 0,
            transfer_dst: (src & 0x00008000) != 0,
            midpoint_chroma_samples: (src & 0x00020000) != 0,
            sampled_image_ycbcr_conversion_linear_filter: (src & 0x00040000) != 0,
            sampled_image_ycbcr_conversion_separate_reconstruction_filter: (src & 0x00080000) != 0,
            sampled_image_ycbcr_conversion_chroma_reconstruction_explicit: (src & 0x00100000) != 0,
            sampled_image_ycbcr_conversion_chroma_reconstruction_explicit_forceable: (src & 0x00200000) != 0,
            disjoint: (src & 0x00400000) != 0,
            cosited_chroma_samples: (src & 0x00800000) != 0,
            sampled_image_filter_cubic_img: (src & 0x00002000) != 0,
            sampled_image_filter_minmax_ext: (src & 0x00010000) != 0,
        }
    }
}

impl VkWrappedType<RawVkFormatFeatureFlags> for VkFormatFeatureFlags {
    
    fn vk_to_raw(src: &VkFormatFeatureFlags, dst: &mut RawVkFormatFeatureFlags) {
        *dst = 0;
        if src.sampled_image { *dst |= 0x00000001; }
        if src.storage_image { *dst |= 0x00000002; }
        if src.storage_image_atomic { *dst |= 0x00000004; }
        if src.uniform_texel_buffer { *dst |= 0x00000008; }
        if src.storage_texel_buffer { *dst |= 0x00000010; }
        if src.storage_texel_buffer_atomic { *dst |= 0x00000020; }
        if src.vertex_buffer { *dst |= 0x00000040; }
        if src.color_attachment { *dst |= 0x00000080; }
        if src.color_attachment_blend { *dst |= 0x00000100; }
        if src.depth_stencil_attachment { *dst |= 0x00000200; }
        if src.blit_src { *dst |= 0x00000400; }
        if src.blit_dst { *dst |= 0x00000800; }
        if src.sampled_image_filter_linear { *dst |= 0x00001000; }
        if src.transfer_src { *dst |= 0x00004000; }
        if src.transfer_dst { *dst |= 0x00008000; }
        if src.midpoint_chroma_samples { *dst |= 0x00020000; }
        if src.sampled_image_ycbcr_conversion_linear_filter { *dst |= 0x00040000; }
        if src.sampled_image_ycbcr_conversion_separate_reconstruction_filter { *dst |= 0x00080000; }
        if src.sampled_image_ycbcr_conversion_chroma_reconstruction_explicit { *dst |= 0x00100000; }
        if src.sampled_image_ycbcr_conversion_chroma_reconstruction_explicit_forceable { *dst |= 0x00200000; }
        if src.disjoint { *dst |= 0x00400000; }
        if src.cosited_chroma_samples { *dst |= 0x00800000; }
        if src.sampled_image_filter_cubic_img { *dst |= 0x00002000; }
        if src.sampled_image_filter_minmax_ext { *dst |= 0x00010000; }
    }
}

impl VkDefault for VkFormatFeatureFlags {
    
    fn vk_default() -> VkFormatFeatureFlags {
        VkFormatFeatureFlags {
            sampled_image: false,
            storage_image: false,
            storage_image_atomic: false,
            uniform_texel_buffer: false,
            storage_texel_buffer: false,
            storage_texel_buffer_atomic: false,
            vertex_buffer: false,
            color_attachment: false,
            color_attachment_blend: false,
            depth_stencil_attachment: false,
            blit_src: false,
            blit_dst: false,
            sampled_image_filter_linear: false,
            transfer_src: false,
            transfer_dst: false,
            midpoint_chroma_samples: false,
            sampled_image_ycbcr_conversion_linear_filter: false,
            sampled_image_ycbcr_conversion_separate_reconstruction_filter: false,
            sampled_image_ycbcr_conversion_chroma_reconstruction_explicit: false,
            sampled_image_ycbcr_conversion_chroma_reconstruction_explicit_forceable: false,
            disjoint: false,
            cosited_chroma_samples: false,
            sampled_image_filter_cubic_img: false,
            sampled_image_filter_minmax_ext: false,
        }
    }
}