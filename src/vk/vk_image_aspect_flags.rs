// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkImageAspectFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkImageAspectFlags {
    color: bool,
    depth: bool,
    stencil: bool,
    metadata: bool,
    plane_0: bool,
    plane_1: bool,
    plane_2: bool,
}

impl VkRawType<VkImageAspectFlags> for RawVkImageAspectFlags {
    
    fn vk_to_wrapped(src: &RawVkImageAspectFlags) -> VkImageAspectFlags {
        VkImageAspectFlags {
            color: (src & 0x00000001) != 0,
            depth: (src & 0x00000002) != 0,
            stencil: (src & 0x00000004) != 0,
            metadata: (src & 0x00000008) != 0,
            plane_0: (src & 0x00000010) != 0,
            plane_1: (src & 0x00000020) != 0,
            plane_2: (src & 0x00000040) != 0,
        }
    }
}

impl VkWrappedType<RawVkImageAspectFlags> for VkImageAspectFlags {
    
    fn vk_to_raw(src: &VkImageAspectFlags, dst: &mut RawVkImageAspectFlags) {
        *dst = 0;
        if src.color { *dst |= 0x00000001; }
        if src.depth { *dst |= 0x00000002; }
        if src.stencil { *dst |= 0x00000004; }
        if src.metadata { *dst |= 0x00000008; }
        if src.plane_0 { *dst |= 0x00000010; }
        if src.plane_1 { *dst |= 0x00000020; }
        if src.plane_2 { *dst |= 0x00000040; }
    }
    
    fn vk_default() -> VkImageAspectFlags {
        VkImageAspectFlags {
            color: false,
            depth: false,
            stencil: false,
            metadata: false,
            plane_0: false,
            plane_1: false,
            plane_2: false,
        }
    }
}