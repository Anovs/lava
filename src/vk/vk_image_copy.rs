// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_image_subresource_layers::*;
use vk::vk_offset_3d::*;
use vk::vk_extent_3d::*;

#[derive(Debug, Clone)]
pub struct VkImageCopy {
    pub src_subresource: VkImageSubresourceLayers,
    pub src_offset: VkOffset3D,
    pub dst_subresource: VkImageSubresourceLayers,
    pub dst_offset: VkOffset3D,
    pub extent: VkExtent3D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkImageCopy {
    pub src_subresource: RawVkImageSubresourceLayers,
    pub src_offset: RawVkOffset3D,
    pub dst_subresource: RawVkImageSubresourceLayers,
    pub dst_offset: RawVkOffset3D,
    pub extent: RawVkExtent3D,
}

impl VkWrappedType<RawVkImageCopy> for VkImageCopy {
    fn vk_to_raw(src: &VkImageCopy, dst: &mut RawVkImageCopy) {
        dst.src_subresource = vk_to_raw_value(&src.src_subresource);
        dst.src_offset = vk_to_raw_value(&src.src_offset);
        dst.dst_subresource = vk_to_raw_value(&src.dst_subresource);
        dst.dst_offset = vk_to_raw_value(&src.dst_offset);
        dst.extent = vk_to_raw_value(&src.extent);
    }
}

impl VkRawType<VkImageCopy> for RawVkImageCopy {
    fn vk_to_wrapped(src: &RawVkImageCopy) -> VkImageCopy {
        VkImageCopy {
            src_subresource: RawVkImageSubresourceLayers::vk_to_wrapped(&src.src_subresource),
            src_offset: RawVkOffset3D::vk_to_wrapped(&src.src_offset),
            dst_subresource: RawVkImageSubresourceLayers::vk_to_wrapped(&src.dst_subresource),
            dst_offset: RawVkOffset3D::vk_to_wrapped(&src.dst_offset),
            extent: RawVkExtent3D::vk_to_wrapped(&src.extent),
        }
    }
}

impl Default for VkImageCopy {
    fn default() -> VkImageCopy {
        VkImageCopy {
            src_subresource: VkImageSubresourceLayers::default(),
            src_offset: VkOffset3D::default(),
            dst_subresource: VkImageSubresourceLayers::default(),
            dst_offset: VkOffset3D::default(),
            extent: VkExtent3D::default(),
        }
    }
}

impl VkSetup for VkImageCopy {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        VkSetup::vk_setup(&mut self.src_subresource, fn_table, instance, device);
        VkSetup::vk_setup(&mut self.src_offset, fn_table, instance, device);
        VkSetup::vk_setup(&mut self.dst_subresource, fn_table, instance, device);
        VkSetup::vk_setup(&mut self.dst_offset, fn_table, instance, device);
        VkSetup::vk_setup(&mut self.extent, fn_table, instance, device);
    }
}

impl VkFree for RawVkImageCopy {
    fn vk_free(&mut self) {
        RawVkImageSubresourceLayers::vk_free(&mut self.src_subresource);
        RawVkOffset3D::vk_free(&mut self.src_offset);
        RawVkImageSubresourceLayers::vk_free(&mut self.dst_subresource);
        RawVkOffset3D::vk_free(&mut self.dst_offset);
        RawVkExtent3D::vk_free(&mut self.extent);
    }
}