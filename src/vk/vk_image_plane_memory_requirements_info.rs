// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_image_aspect_flags::*;

#[derive(Debug, Clone)]
pub struct VkImagePlaneMemoryRequirementsInfo {
    pub plane_aspect: VkImageAspectFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkImagePlaneMemoryRequirementsInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub plane_aspect: RawVkImageAspectFlags,
}

impl VkWrappedType<RawVkImagePlaneMemoryRequirementsInfo> for VkImagePlaneMemoryRequirementsInfo {
    fn vk_to_raw(src: &VkImagePlaneMemoryRequirementsInfo, dst: &mut RawVkImagePlaneMemoryRequirementsInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::ImagePlaneMemoryRequirementsInfo);
        dst.next = ptr::null();
        dst.plane_aspect = vk_to_raw_value(&src.plane_aspect);
    }
}

impl VkRawType<VkImagePlaneMemoryRequirementsInfo> for RawVkImagePlaneMemoryRequirementsInfo {
    fn vk_to_wrapped(src: &RawVkImagePlaneMemoryRequirementsInfo) -> VkImagePlaneMemoryRequirementsInfo {
        VkImagePlaneMemoryRequirementsInfo {
            plane_aspect: RawVkImageAspectFlags::vk_to_wrapped(&src.plane_aspect),
        }
    }
}

impl Default for VkImagePlaneMemoryRequirementsInfo {
    fn default() -> VkImagePlaneMemoryRequirementsInfo {
        VkImagePlaneMemoryRequirementsInfo {
            plane_aspect: VkImageAspectFlags::default(),
        }
    }
}

impl VkSetup for VkImagePlaneMemoryRequirementsInfo {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkImagePlaneMemoryRequirementsInfo {
    fn vk_free(&mut self) {
        
    }
}