// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ptr::null;
use libc::*;

#[repr(C)]
pub struct RawVkImageSubresourceRange {
    aspect_mask: RawVkImageAspectFlags,
    base_mip_level: u32,
    level_count: u32,
    base_array_layer: u32,
    layer_count: u32,
}

#[derive(Debug)]
pub struct VkImageSubresourceRange {
    pub aspect_mask: VkImageAspectFlags,
    pub base_mip_level: u32,
    pub level_count: u32,
    pub base_array_layer: u32,
    pub layer_count: u32,
}

impl VkFrom<VkImageSubresourceRange> for RawVkImageSubresourceRange {
    
    fn vk_from(value: &VkImageSubresourceRange) -> Self {
        Self {
            aspect_mask: VkFrom::vk_from(&value.aspect_mask),
            base_mip_level: value.base_mip_level,
            level_count: value.level_count,
            base_array_layer: value.base_array_layer,
            layer_count: value.layer_count,
        }
    }
}

impl VkFrom<RawVkImageSubresourceRange> for VkImageSubresourceRange {
    
    fn vk_from(value: &RawVkImageSubresourceRange) -> Self {
        Self {
            aspect_mask: VkFrom::vk_from(&value.aspect_mask),
            base_mip_level: value.base_mip_level,
            level_count: value.level_count,
            base_array_layer: value.base_array_layer,
            layer_count: value.layer_count,
        }
    }
}