// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkImageUsageFlags = u32;

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkImageUsageFlags {
    pub transfer_src: bool,
    pub transfer_dst: bool,
    pub sampled: bool,
    pub storage: bool,
    pub color_attachment: bool,
    pub depth_stencil_attachment: bool,
    pub transient_attachment: bool,
    pub input_attachment: bool,
}

impl VkFlags for VkImageUsageFlags {
    
    fn none() -> Self {
        Self {
            transfer_src: false,
            transfer_dst: false,
            sampled: false,
            storage: false,
            color_attachment: false,
            depth_stencil_attachment: false,
            transient_attachment: false,
            input_attachment: false,
        }
    }
    
    fn all() -> Self {
        Self {
            transfer_src: true,
            transfer_dst: true,
            sampled: true,
            storage: true,
            color_attachment: true,
            depth_stencil_attachment: true,
            transient_attachment: true,
            input_attachment: true,
        }
    }
}

impl VkFrom<VkImageUsageFlags> for RawVkImageUsageFlags {
    
    fn vk_from(value: &VkImageUsageFlags) -> Self { {
            0
            + (if value.transfer_src { 0x00000001 } else { 0 })
            + (if value.transfer_dst { 0x00000002 } else { 0 })
            + (if value.sampled { 0x00000004 } else { 0 })
            + (if value.storage { 0x00000008 } else { 0 })
            + (if value.color_attachment { 0x00000010 } else { 0 })
            + (if value.depth_stencil_attachment { 0x00000020 } else { 0 })
            + (if value.transient_attachment { 0x00000040 } else { 0 })
            + (if value.input_attachment { 0x00000080 } else { 0 })
        }
    }
}

impl VkFrom<RawVkImageUsageFlags> for VkImageUsageFlags {
    
    fn vk_from(value: &RawVkImageUsageFlags) -> Self {
        Self {
            transfer_src: (value & 0x00000001) != 0,
            transfer_dst: (value & 0x00000002) != 0,
            sampled: (value & 0x00000004) != 0,
            storage: (value & 0x00000008) != 0,
            color_attachment: (value & 0x00000010) != 0,
            depth_stencil_attachment: (value & 0x00000020) != 0,
            transient_attachment: (value & 0x00000040) != 0,
            input_attachment: (value & 0x00000080) != 0,
        }
    }
}