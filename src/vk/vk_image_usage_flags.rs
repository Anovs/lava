// Generated by `scripts/generate_type.js`

use std::convert::From;

pub type RawVkImageUsageFlags = u32;

#[derive(Debug, Default)]
pub struct VkImageUsageFlags {
    pub transfer_src: bool,
    pub transfer_dst: bool,
    pub sampled: bool,
    pub storage: bool,
    pub color_attachment: bool,
    pub depth_stencil_attachment: bool,
    pub transient_attachment: bool,
    pub input_attachment: bool
}

impl<'a> From<&'a u32> for VkImageUsageFlags {
    fn from(value: &'a u32) -> Self {
        VkImageUsageFlags {
            transfer_src: (value & 0x00000001) > 0,
            transfer_dst: (value & 0x00000002) > 0,
            sampled: (value & 0x00000004) > 0,
            storage: (value & 0x00000008) > 0,
            color_attachment: (value & 0x00000010) > 0,
            depth_stencil_attachment: (value & 0x00000020) > 0,
            transient_attachment: (value & 0x00000040) > 0,
            input_attachment: (value & 0x00000080) > 0
        }
    }
}

impl<'a> From<&'a VkImageUsageFlags> for u32 {
    fn from(value: &'a VkImageUsageFlags) -> Self {
        (if value.transfer_src { 0x00000001 } else { 0 }) +
        (if value.transfer_dst { 0x00000002 } else { 0 }) +
        (if value.sampled { 0x00000004 } else { 0 }) +
        (if value.storage { 0x00000008 } else { 0 }) +
        (if value.color_attachment { 0x00000010 } else { 0 }) +
        (if value.depth_stencil_attachment { 0x00000020 } else { 0 }) +
        (if value.transient_attachment { 0x00000040 } else { 0 }) +
        (if value.input_attachment { 0x00000080 } else { 0 })
    }
}

impl VkImageUsageFlags {
    pub fn none() -> Self {
        VkImageUsageFlags::default()
    }

    pub fn all() -> Self {
        VkImageUsageFlags {
            transfer_src: true,
            transfer_dst: true,
            sampled: true,
            storage: true,
            color_attachment: true,
            depth_stencil_attachment: true,
            transient_attachment: true,
            input_attachment: true
        }
    }
}