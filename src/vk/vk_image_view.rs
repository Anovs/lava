// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::vec::Vec;
use std::ptr::null;
use libc::c_void;
use glfw::*;

pub type RawVkImageView = RawVkHandle;

#[derive(Debug)]
pub struct VkImageView {
    _handle: RawVkImageView,
    _device: RawVkDevice,
}

impl VkImageView {
    
    pub fn handle(&self) -> RawVkImageView {
        self._handle
    }
    
    pub fn new(device: &VkDevice, create_info: &VkImageViewCreateInfo) -> Result<VkImageView, VkResult> {
        unsafe {
            let device_handle = device.handle();
            let mut raw_create_info = RawVkImageViewCreateInfo::vk_from(create_info);
            let raw_create_info_ptr = &mut raw_create_info as *mut RawVkImageViewCreateInfo;
            vk_call_retrieve_single(
                |ptr| vkCreateImageView(device_handle, raw_create_info_ptr, null(), ptr),
                |image_view : &mut VkImageView| { image_view._device = device_handle; }
            )
        }
    }
}

impl VkFrom<VkImageView> for RawVkImageView {
    
    fn vk_from(value: &VkImageView) -> Self {
        value._handle
    }
}

impl VkFrom<RawVkImageView> for VkImageView {
    
    fn vk_from(value: &RawVkImageView) -> Self {
        Self {
            _handle: *value,
            _device: VK_NULL_HANDLE,
        }
    }
}

impl Drop for VkImageView {
    
    fn drop(&mut self) {
        unsafe {
            vkDestroyImageView(self._device, self._handle, null());
        }
    }
}

extern {
    fn vkDestroyImageView(device: RawVkDevice, image_view: RawVkImageView, p_allocator: *const c_void);
    fn vkCreateImageView(device: RawVkDevice, p_create_info: *const RawVkImageViewCreateInfo, p_allocator: *const c_void, p_view: *mut RawVkImageView)-> RawVkResult;
}