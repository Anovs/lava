// Generated by `scripts/schema.js`

use std::ops::Drop;
use std::vec::Vec;
use std::ptr::null;
use vk::VkFrom;
use vk::RawVkHandle;
use libc::c_void;

pub type RawVkInstance = RawVkHandle;

pub struct VkInstance {
    _handle: RawVkInstance,
}

impl VkInstance {
    pub fn handle(&self) -> RawVkInstance {
        self._handle
    }
}

impl VkFrom<RawVkInstance> for VkInstance {
    fn from(value: &RawVkInstance) -> Self {
        Self {
            _handle: *value,
        }
    }
}

impl VkFrom<VkInstance> for RawVkInstance {
    fn from(value: &VkInstance) -> Self {
        value._handle
    }
}

impl Drop for VkInstance {
    fn drop(&mut self) {
        unsafe {
            vkDestroyInstance(self._handle, null());
        }
    }
}

extern {
    fn vkDestroyInstance(instance: RawVkInstance, p_allocator: *const c_void);
}