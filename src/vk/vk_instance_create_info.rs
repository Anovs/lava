// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::string::String;
use std::vec::Vec;
use std::ops::Deref;
use std::ptr;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_type::*;
use vk::vk_structure_type::*;
use vk::vk_instance_create_flags::*;
use vk::vk_application_info::*;

pub struct RawVkInstanceCreateInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    flags: RawVkInstanceCreateFlags,
    application_info: VkPtr<RawVkApplicationInfo>,
    enabled_layer_count: u32,
    enabled_layer_names: VkPtr<c_char>,
    enabled_extension_count: u32,
    enabled_extension_names: VkPtr<c_char>,
}

pub struct VkInstanceCreateInfo<A>
    where
        A : Deref<Target=VkApplicationInfo>,
 {
    pub flags: VkInstanceCreateFlags,
    pub application_info: A,
    pub enabled_layer_count: u32,
    pub enabled_layer_names: Vec<String>,
    pub enabled_extension_count: u32,
    pub enabled_extension_names: Vec<String>,
}

impl<A> Deref for VkInstanceCreateInfo<A>
    where
        A : Deref<Target=VkApplicationInfo>,
 {
    type Target = VkInstanceCreateInfo<A>;
    fn deref(&self) -> &VkInstanceCreateInfo<A> {
        self
    }
}

impl VkRawType<VkInstanceCreateInfo<VkApplicationInfo>> for RawVkInstanceCreateInfo {
    fn vk_to_wrapped(src: &RawVkInstanceCreateInfo) -> VkInstanceCreateInfo<VkApplicationInfo> {
        VkInstanceCreateInfo {
            flags: RawVkInstanceCreateFlags::vk_to_wrapped(&src.flags),
            application_info: RawVkApplicationInfo::vk_to_wrapped(src.application_info.as_ref().unwrap()),
            enabled_layer_count: src.enabled_layer_count,
            enabled_layer_names: Vec::new(),
            enabled_extension_count: src.enabled_extension_count,
            enabled_extension_names: Vec::new(),
        }
    }
}

impl<A> VkWrappedType<RawVkInstanceCreateInfo> for VkInstanceCreateInfo<A>
    where
        A : Deref<Target=VkApplicationInfo>,
 {
    fn vk_to_raw(src: &VkInstanceCreateInfo<A>, dst: &mut RawVkInstanceCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::InstanceCreateInfo);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.application_info = VkPtr::new_vk_value(&src.application_info);
        dst.enabled_layer_count = src.enabled_layer_count;
        dst.enabled_layer_names = VkPtr::new_string_array(&src.enabled_layer_names);
        dst.enabled_extension_count = src.enabled_extension_count;
        dst.enabled_extension_names = VkPtr::new_string_array(&src.enabled_extension_names);
    }
}

impl VkDefault for VkInstanceCreateInfo<&'static VkApplicationInfo> {
    fn vk_default() -> VkInstanceCreateInfo<&'static VkApplicationInfo> {
        VkInstanceCreateInfo {
            flags: VkInstanceCreateFlags::vk_default(),
            application_info: vk_null(),
            enabled_layer_count: 0,
            enabled_layer_names: Vec::new(),
            enabled_extension_count: 0,
            enabled_extension_names: Vec::new(),
        }
    }
}