// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_instance_create_flags::*;
use vk::vk_application_info::*;

#[repr(C)]
pub struct RawVkInstanceCreateInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    flags: RawVkInstanceCreateFlags,
    application_info: *mut RawVkApplicationInfo,
    enabled_layer_count: u32,
    enabled_layer_names: *mut *mut c_char,
    enabled_extension_count: u32,
    enabled_extension_names: *mut *mut c_char,
}

#[derive(Debug, Clone)]
pub struct VkInstanceCreateInfo<'a, 'b, 'c, 'd, 'e, 'f, 'g>
    where
        'b: 'a,
        'c: 'a,
        'e: 'd,
        'g: 'f,
{
    pub flags: VkInstanceCreateFlags,
    pub application_info: Option<&'a VkApplicationInfo<'b, 'c>>,
    pub enabled_layer_names: &'d [&'e str],
    pub enabled_extension_names: &'f [&'g str],
}

impl<'a, 'b, 'c, 'd, 'e, 'f, 'g> VkWrappedType<RawVkInstanceCreateInfo> for VkInstanceCreateInfo<'a, 'b, 'c, 'd, 'e, 'f, 'g>
    where
        'b: 'a,
        'c: 'a,
        'e: 'd,
        'g: 'f,
{
    fn vk_to_raw(src: &VkInstanceCreateInfo, dst: &mut RawVkInstanceCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::InstanceCreateInfo);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.application_info = new_ptr_vk_value_checked(src.application_info);
        dst.enabled_layer_count = src.enabled_layer_names.len() as u32;
        dst.enabled_layer_names = new_ptr_string_array(src.enabled_layer_names);
        dst.enabled_extension_count = src.enabled_extension_names.len() as u32;
        dst.enabled_extension_names = new_ptr_string_array(src.enabled_extension_names);
    }
}

impl Default for VkInstanceCreateInfo<'static, 'static, 'static, 'static, 'static, 'static, 'static> {
    fn default() -> VkInstanceCreateInfo<'static, 'static, 'static, 'static, 'static, 'static, 'static> {
        VkInstanceCreateInfo {
            flags: VkInstanceCreateFlags::default(),
            application_info: None,
            enabled_layer_names: &[],
            enabled_extension_names: &[],
        }
    }
}

impl<'a, 'b, 'c, 'd, 'e, 'f, 'g> VkSetup for VkInstanceCreateInfo<'a, 'b, 'c, 'd, 'e, 'f, 'g>
    where
        'b: 'a,
        'c: 'a,
        'e: 'd,
        'g: 'f,
{
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkInstanceCreateInfo {
    fn vk_free(&mut self) {
        free_vk_ptr(self.application_info);
        free_ptr(self.enabled_layer_names);
        free_ptr(self.enabled_extension_names);
    }
}