// Generated by `scripts/schema.js`

use vk::*;
use std::os::raw::c_char;
use std::ptr::null;
use libc::*;

#[repr(C)]
pub struct RawVkInstanceCreateInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    flags: RawVkInstanceCreateFlags,
    application_info: *mut RawVkApplicationInfo,
    enabled_layer_count: u32,
    enabled_layer_names: *mut *mut c_char,
    enabled_extension_count: u32,
    enabled_extension_names: *mut *mut c_char,
}

pub struct VkInstanceCreateInfo {
    pub flags: VkInstanceCreateFlags,
    pub application_info: VkApplicationInfo,
    pub enabled_layer_names: Vec<String>,
    pub enabled_extension_names: Vec<String>,
}

impl VkFrom<VkInstanceCreateInfo> for RawVkInstanceCreateInfo {
    
    fn vk_from(value: &VkInstanceCreateInfo) -> Self {
        unsafe {
            Self {
                s_type: VkFrom::vk_from(&VkStructureType::InstanceCreateInfo),
                next: null(),
                flags: VkFrom::vk_from(&value.flags),
                application_info: copy_as_c_ptr(VkFrom::vk_from(&value.application_info)),
                enabled_layer_count: value.enabled_layer_names.len() as u32,
                enabled_layer_names: copy_as_c_string_array(&value.enabled_layer_names),
                enabled_extension_count: value.enabled_extension_names.len() as u32,
                enabled_extension_names: copy_as_c_string_array(&value.enabled_extension_names),
            }
        }
    }
}

impl VkFrom<RawVkInstanceCreateInfo> for VkInstanceCreateInfo {
    
    fn vk_from(value: &RawVkInstanceCreateInfo) -> Self {
        unsafe {
            Self {
                flags: VkFrom::vk_from(&value.flags),
                application_info: VkFrom::vk_from(&(*value.application_info)),
                enabled_layer_names: copy_as_string_vec(value.enabled_layer_count, value.enabled_layer_names as *const *const c_char),
                enabled_extension_names: copy_as_string_vec(value.enabled_extension_count, value.enabled_extension_names as *const *const c_char),
            }
        }
    }
}