// Generated by `scripts/generate_vk.js`

use utils::vk_traits::*;

pub type RawVkMemoryHeapFlags = u32;

#[derive(Debug, Clone, Copy)]
pub struct VkMemoryHeapFlags {
    pub device_local: bool,
    pub multi_instance: bool,
}

impl VkRawType<VkMemoryHeapFlags> for RawVkMemoryHeapFlags {
    fn vk_to_wrapped(src: &RawVkMemoryHeapFlags) -> VkMemoryHeapFlags {
        VkMemoryHeapFlags {
            device_local: (src & 0x00000001) != 0,
            multi_instance: (src & 0x00000002) != 0,
        }
    }
}

impl VkWrappedType<RawVkMemoryHeapFlags> for VkMemoryHeapFlags {
    fn vk_to_raw(src: &VkMemoryHeapFlags, dst: &mut RawVkMemoryHeapFlags) {
        *dst = 0;
        if src.device_local { *dst |= 0x00000001; }
        if src.multi_instance { *dst |= 0x00000002; }
    }
}

impl Default for VkMemoryHeapFlags {
    fn default() -> VkMemoryHeapFlags {
        VkMemoryHeapFlags {
            device_local: false,
            multi_instance: false,
        }
    }
}

impl VkMemoryHeapFlags {
    
    pub fn none() -> VkMemoryHeapFlags {
        VkMemoryHeapFlags {
            device_local: false,
            multi_instance: false,
        }
    }
    
    pub fn all() -> VkMemoryHeapFlags {
        VkMemoryHeapFlags {
            device_local: true,
            multi_instance: true,
        }
    }
}

impl VkMemoryHeapFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.device_local { 0x00000001 } else { 0 }
        + if self.multi_instance { 0x00000002 } else { 0 }
    }
}