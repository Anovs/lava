// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkMemoryHeapFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkMemoryHeapFlags {
    device_local: bool,
    multi_instance: bool,
}

impl VkRawType<VkMemoryHeapFlags> for RawVkMemoryHeapFlags {
    fn vk_to_wrapped(src: &RawVkMemoryHeapFlags) -> VkMemoryHeapFlags {
        VkMemoryHeapFlags {
            device_local: (src & 0x00000001) != 0,
            multi_instance: (src & 0x00000002) != 0,
        }
    }
}

impl VkWrappedType<RawVkMemoryHeapFlags> for VkMemoryHeapFlags {
    fn vk_to_raw(src: &VkMemoryHeapFlags, dst: &mut RawVkMemoryHeapFlags) {
        *dst = 0;
        if src.device_local { *dst |= 0x00000001; }
        if src.multi_instance { *dst |= 0x00000002; }
    }
}

pub static STATIC_VK_MEMORY_HEAP_FLAGS : VkMemoryHeapFlags = VkMemoryHeapFlags {
    device_local: false,
    multi_instance: false,
};

impl VkDefault for VkMemoryHeapFlags {
    fn vk_default() -> VkMemoryHeapFlags {
        STATIC_VK_MEMORY_HEAP_FLAGS
    }
}