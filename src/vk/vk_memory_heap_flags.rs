// Generated by `scripts/generate_type.js`

use std::convert::From;

pub type RawVkMemoryHeapFlags = u32;

#[derive(Debug, Default)]
pub struct VkMemoryHeapFlags {
    pub device_local: bool,
    pub multi_instance: bool
}

impl<'a> From<&'a u32> for VkMemoryHeapFlags {
    fn from(value: &'a u32) -> Self {
        VkMemoryHeapFlags {
            device_local: (value & 0x00000001) > 0,
            multi_instance: (value & 0x00000002) > 0
        }
    }
}

impl<'a> From<&'a VkMemoryHeapFlags> for u32 {
    fn from(value: &'a VkMemoryHeapFlags) -> Self {
        (if value.device_local { 0x00000001 } else { 0 }) +
        (if value.multi_instance { 0x00000002 } else { 0 })
    }
}

impl VkMemoryHeapFlags {
    pub fn none() -> Self {
        VkMemoryHeapFlags::default()
    }

    pub fn all() -> Self {
        VkMemoryHeapFlags {
            device_local: true,
            multi_instance: true
        }
    }
}