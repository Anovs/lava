// Generated by `scripts/generate_type.js`

use std::convert::From;

pub type RawVkMemoryPropertyFlags = u32;

#[derive(Debug, Default)]
pub struct VkMemoryPropertyFlags {
    pub device_local: bool,
    pub host_visible: bool,
    pub host_coherent: bool,
    pub host_cached: bool,
    pub lazily_allocated: bool,
    pub protected: bool
}

impl<'a> From<&'a u32> for VkMemoryPropertyFlags {
    fn from(value: &'a u32) -> Self {
        VkMemoryPropertyFlags {
            device_local: (value & 0x00000001) > 0,
            host_visible: (value & 0x00000002) > 0,
            host_coherent: (value & 0x00000004) > 0,
            host_cached: (value & 0x00000008) > 0,
            lazily_allocated: (value & 0x00000010) > 0,
            protected: (value & 0x00000020) > 0
        }
    }
}

impl<'a> From<&'a VkMemoryPropertyFlags> for u32 {
    fn from(value: &'a VkMemoryPropertyFlags) -> Self {
        (if value.device_local { 0x00000001 } else { 0 }) +
        (if value.host_visible { 0x00000002 } else { 0 }) +
        (if value.host_coherent { 0x00000004 } else { 0 }) +
        (if value.host_cached { 0x00000008 } else { 0 }) +
        (if value.lazily_allocated { 0x00000010 } else { 0 }) +
        (if value.protected { 0x00000020 } else { 0 })
    }
}

impl VkMemoryPropertyFlags {
    pub fn none() -> Self {
        VkMemoryPropertyFlags::default()
    }
}