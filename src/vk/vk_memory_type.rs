// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_memory_property_flags::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkMemoryType {
    pub property_flags: RawVkMemoryPropertyFlags,
    pub heap_index: u32,
}

#[derive(Debug, Clone)]
pub struct VkMemoryType {
    pub property_flags: VkMemoryPropertyFlags,
    pub heap_index: usize,
}

impl VkRawType<VkMemoryType> for RawVkMemoryType {
    fn vk_to_wrapped(src: &RawVkMemoryType) -> VkMemoryType {
        VkMemoryType {
            property_flags: RawVkMemoryPropertyFlags::vk_to_wrapped(&src.property_flags),
            heap_index: u32::vk_to_wrapped(&src.heap_index),
        }
    }
}

impl VkWrappedType<RawVkMemoryType> for VkMemoryType {
    fn vk_to_raw(src: &VkMemoryType, dst: &mut RawVkMemoryType) {
        dst.property_flags = vk_to_raw_value(&src.property_flags);
        dst.heap_index = vk_to_raw_value(&src.heap_index);
    }
}

impl Default for VkMemoryType {
    fn default() -> VkMemoryType {
        VkMemoryType {
            property_flags: VkMemoryPropertyFlags::default(),
            heap_index: 0,
        }
    }
}

impl VkSetup for VkMemoryType {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkMemoryType {
    fn vk_free(&mut self) {
        
    }
}