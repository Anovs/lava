// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;

#[repr(C)]
#[derive(Debug)]
pub struct RawVkOffset3D {
    pub x: i32,
    pub y: i32,
    pub z: i32,
}

#[derive(Debug, Clone)]
pub struct VkOffset3D {
    pub x: i32,
    pub y: i32,
    pub z: i32,
}

impl VkRawType<VkOffset3D> for RawVkOffset3D {
    fn vk_to_wrapped(src: &RawVkOffset3D) -> VkOffset3D {
        VkOffset3D {
            x: src.x,
            y: src.y,
            z: src.z,
        }
    }
}

impl VkWrappedType<RawVkOffset3D> for VkOffset3D {
    fn vk_to_raw(src: &VkOffset3D, dst: &mut RawVkOffset3D) {
        dst.x = src.x;
        dst.y = src.y;
        dst.z = src.z;
    }
}

impl Default for VkOffset3D {
    fn default() -> VkOffset3D {
        VkOffset3D {
            x: 0,
            y: 0,
            z: 0,
        }
    }
}

impl VkSetup for VkOffset3D {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkOffset3D {
    fn vk_free(&mut self) {
        
    }
}