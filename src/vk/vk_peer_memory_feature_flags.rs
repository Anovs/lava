// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkPeerMemoryFeatureFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkPeerMemoryFeatureFlags {
    copy_src: bool,
    copy_dst: bool,
    generic_src: bool,
    generic_dst: bool,
}

impl VkRawType<VkPeerMemoryFeatureFlags> for RawVkPeerMemoryFeatureFlags {
    
    fn vk_to_wrapped(src: &RawVkPeerMemoryFeatureFlags) -> VkPeerMemoryFeatureFlags {
        VkPeerMemoryFeatureFlags {
            copy_src: (src & 0x00000001) != 0,
            copy_dst: (src & 0x00000002) != 0,
            generic_src: (src & 0x00000004) != 0,
            generic_dst: (src & 0x00000008) != 0,
        }
    }
}

impl VkWrappedType<RawVkPeerMemoryFeatureFlags> for VkPeerMemoryFeatureFlags {
    
    fn vk_to_raw(src: &VkPeerMemoryFeatureFlags, dst: &mut RawVkPeerMemoryFeatureFlags) {
        *dst = 0;
        if src.copy_src { *dst |= 0x00000001; }
        if src.copy_dst { *dst |= 0x00000002; }
        if src.generic_src { *dst |= 0x00000004; }
        if src.generic_dst { *dst |= 0x00000008; }
    }
}

impl VkDefault for VkPeerMemoryFeatureFlags {
    
    fn vk_default() -> VkPeerMemoryFeatureFlags {
        VkPeerMemoryFeatureFlags {
            copy_src: false,
            copy_dst: false,
            generic_src: false,
            generic_dst: false,
        }
    }
}