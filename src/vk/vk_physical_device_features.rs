// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ptr::null;
use libc::*;

#[repr(C)]
pub struct RawVkPhysicalDeviceFeatures {
    robust_buffer_access: RawVkBool32,
    full_draw_index_uint32: RawVkBool32,
    image_cube_array: RawVkBool32,
    independent_blend: RawVkBool32,
    geometry_shader: RawVkBool32,
    tessellation_shader: RawVkBool32,
    sample_rate_shading: RawVkBool32,
    dual_src_blend: RawVkBool32,
    logic_op: RawVkBool32,
    multi_draw_indirect: RawVkBool32,
    draw_indirect_first_instance: RawVkBool32,
    depth_clamp: RawVkBool32,
    depth_bias_clamp: RawVkBool32,
    fill_mode_non_solid: RawVkBool32,
    depth_bounds: RawVkBool32,
    wide_lines: RawVkBool32,
    large_points: RawVkBool32,
    alpha_to_one: RawVkBool32,
    multi_viewport: RawVkBool32,
    sampler_anisotropy: RawVkBool32,
    texture_compression_etc2: RawVkBool32,
    texture_compression_astc_ldr: RawVkBool32,
    texture_compression_bc: RawVkBool32,
    occlusion_query_precise: RawVkBool32,
    pipeline_statistics_query: RawVkBool32,
    vertex_pipeline_stores_and_atomics: RawVkBool32,
    fragment_stores_and_atomics: RawVkBool32,
    shader_tessellation_and_geometry_point_size: RawVkBool32,
    shader_image_gather_extended: RawVkBool32,
    shader_storage_image_extended_formats: RawVkBool32,
    shader_storage_image_multisample: RawVkBool32,
    shader_storage_image_read_without_format: RawVkBool32,
    shader_storage_image_write_without_format: RawVkBool32,
    shader_uniform_buffer_array_dynamic_indexing: RawVkBool32,
    shader_sampled_image_array_dynamic_indexing: RawVkBool32,
    shader_storage_buffer_array_dynamic_indexing: RawVkBool32,
    shader_storage_image_array_dynamic_indexing: RawVkBool32,
    shader_clip_distance: RawVkBool32,
    shader_cull_distance: RawVkBool32,
    shader_float64: RawVkBool32,
    shader_int64: RawVkBool32,
    shader_int16: RawVkBool32,
    shader_resource_residency: RawVkBool32,
    shader_resource_min_lod: RawVkBool32,
    sparse_binding: RawVkBool32,
    sparse_residency_buffer: RawVkBool32,
    sparse_residency_image2d: RawVkBool32,
    sparse_residency_image3d: RawVkBool32,
    sparse_residency2samples: RawVkBool32,
    sparse_residency4samples: RawVkBool32,
    sparse_residency8samples: RawVkBool32,
    sparse_residency16samples: RawVkBool32,
    sparse_residency_aliased: RawVkBool32,
    variable_multisample_rate: RawVkBool32,
    inherited_queries: RawVkBool32,
}

#[derive(Debug)]
pub struct VkPhysicalDeviceFeatures {
    pub robust_buffer_access: bool,
    pub full_draw_index_uint32: bool,
    pub image_cube_array: bool,
    pub independent_blend: bool,
    pub geometry_shader: bool,
    pub tessellation_shader: bool,
    pub sample_rate_shading: bool,
    pub dual_src_blend: bool,
    pub logic_op: bool,
    pub multi_draw_indirect: bool,
    pub draw_indirect_first_instance: bool,
    pub depth_clamp: bool,
    pub depth_bias_clamp: bool,
    pub fill_mode_non_solid: bool,
    pub depth_bounds: bool,
    pub wide_lines: bool,
    pub large_points: bool,
    pub alpha_to_one: bool,
    pub multi_viewport: bool,
    pub sampler_anisotropy: bool,
    pub texture_compression_etc2: bool,
    pub texture_compression_astc_ldr: bool,
    pub texture_compression_bc: bool,
    pub occlusion_query_precise: bool,
    pub pipeline_statistics_query: bool,
    pub vertex_pipeline_stores_and_atomics: bool,
    pub fragment_stores_and_atomics: bool,
    pub shader_tessellation_and_geometry_point_size: bool,
    pub shader_image_gather_extended: bool,
    pub shader_storage_image_extended_formats: bool,
    pub shader_storage_image_multisample: bool,
    pub shader_storage_image_read_without_format: bool,
    pub shader_storage_image_write_without_format: bool,
    pub shader_uniform_buffer_array_dynamic_indexing: bool,
    pub shader_sampled_image_array_dynamic_indexing: bool,
    pub shader_storage_buffer_array_dynamic_indexing: bool,
    pub shader_storage_image_array_dynamic_indexing: bool,
    pub shader_clip_distance: bool,
    pub shader_cull_distance: bool,
    pub shader_float64: bool,
    pub shader_int64: bool,
    pub shader_int16: bool,
    pub shader_resource_residency: bool,
    pub shader_resource_min_lod: bool,
    pub sparse_binding: bool,
    pub sparse_residency_buffer: bool,
    pub sparse_residency_image2d: bool,
    pub sparse_residency_image3d: bool,
    pub sparse_residency2samples: bool,
    pub sparse_residency4samples: bool,
    pub sparse_residency8samples: bool,
    pub sparse_residency16samples: bool,
    pub sparse_residency_aliased: bool,
    pub variable_multisample_rate: bool,
    pub inherited_queries: bool,
}

impl VkFlags for VkPhysicalDeviceFeatures {
    
    fn none() -> Self {
        Self {
            robust_buffer_access: false,
            full_draw_index_uint32: false,
            image_cube_array: false,
            independent_blend: false,
            geometry_shader: false,
            tessellation_shader: false,
            sample_rate_shading: false,
            dual_src_blend: false,
            logic_op: false,
            multi_draw_indirect: false,
            draw_indirect_first_instance: false,
            depth_clamp: false,
            depth_bias_clamp: false,
            fill_mode_non_solid: false,
            depth_bounds: false,
            wide_lines: false,
            large_points: false,
            alpha_to_one: false,
            multi_viewport: false,
            sampler_anisotropy: false,
            texture_compression_etc2: false,
            texture_compression_astc_ldr: false,
            texture_compression_bc: false,
            occlusion_query_precise: false,
            pipeline_statistics_query: false,
            vertex_pipeline_stores_and_atomics: false,
            fragment_stores_and_atomics: false,
            shader_tessellation_and_geometry_point_size: false,
            shader_image_gather_extended: false,
            shader_storage_image_extended_formats: false,
            shader_storage_image_multisample: false,
            shader_storage_image_read_without_format: false,
            shader_storage_image_write_without_format: false,
            shader_uniform_buffer_array_dynamic_indexing: false,
            shader_sampled_image_array_dynamic_indexing: false,
            shader_storage_buffer_array_dynamic_indexing: false,
            shader_storage_image_array_dynamic_indexing: false,
            shader_clip_distance: false,
            shader_cull_distance: false,
            shader_float64: false,
            shader_int64: false,
            shader_int16: false,
            shader_resource_residency: false,
            shader_resource_min_lod: false,
            sparse_binding: false,
            sparse_residency_buffer: false,
            sparse_residency_image2d: false,
            sparse_residency_image3d: false,
            sparse_residency2samples: false,
            sparse_residency4samples: false,
            sparse_residency8samples: false,
            sparse_residency16samples: false,
            sparse_residency_aliased: false,
            variable_multisample_rate: false,
            inherited_queries: false,
        }
    }
    
    fn all() -> Self {
        Self {
            robust_buffer_access: true,
            full_draw_index_uint32: true,
            image_cube_array: true,
            independent_blend: true,
            geometry_shader: true,
            tessellation_shader: true,
            sample_rate_shading: true,
            dual_src_blend: true,
            logic_op: true,
            multi_draw_indirect: true,
            draw_indirect_first_instance: true,
            depth_clamp: true,
            depth_bias_clamp: true,
            fill_mode_non_solid: true,
            depth_bounds: true,
            wide_lines: true,
            large_points: true,
            alpha_to_one: true,
            multi_viewport: true,
            sampler_anisotropy: true,
            texture_compression_etc2: true,
            texture_compression_astc_ldr: true,
            texture_compression_bc: true,
            occlusion_query_precise: true,
            pipeline_statistics_query: true,
            vertex_pipeline_stores_and_atomics: true,
            fragment_stores_and_atomics: true,
            shader_tessellation_and_geometry_point_size: true,
            shader_image_gather_extended: true,
            shader_storage_image_extended_formats: true,
            shader_storage_image_multisample: true,
            shader_storage_image_read_without_format: true,
            shader_storage_image_write_without_format: true,
            shader_uniform_buffer_array_dynamic_indexing: true,
            shader_sampled_image_array_dynamic_indexing: true,
            shader_storage_buffer_array_dynamic_indexing: true,
            shader_storage_image_array_dynamic_indexing: true,
            shader_clip_distance: true,
            shader_cull_distance: true,
            shader_float64: true,
            shader_int64: true,
            shader_int16: true,
            shader_resource_residency: true,
            shader_resource_min_lod: true,
            sparse_binding: true,
            sparse_residency_buffer: true,
            sparse_residency_image2d: true,
            sparse_residency_image3d: true,
            sparse_residency2samples: true,
            sparse_residency4samples: true,
            sparse_residency8samples: true,
            sparse_residency16samples: true,
            sparse_residency_aliased: true,
            variable_multisample_rate: true,
            inherited_queries: true,
        }
    }
}

impl VkFrom<VkPhysicalDeviceFeatures> for RawVkPhysicalDeviceFeatures {
    
    fn vk_from(value: &VkPhysicalDeviceFeatures) -> Self {
        Self {
            robust_buffer_access: VkFrom::vk_from(&value.robust_buffer_access),
            full_draw_index_uint32: VkFrom::vk_from(&value.full_draw_index_uint32),
            image_cube_array: VkFrom::vk_from(&value.image_cube_array),
            independent_blend: VkFrom::vk_from(&value.independent_blend),
            geometry_shader: VkFrom::vk_from(&value.geometry_shader),
            tessellation_shader: VkFrom::vk_from(&value.tessellation_shader),
            sample_rate_shading: VkFrom::vk_from(&value.sample_rate_shading),
            dual_src_blend: VkFrom::vk_from(&value.dual_src_blend),
            logic_op: VkFrom::vk_from(&value.logic_op),
            multi_draw_indirect: VkFrom::vk_from(&value.multi_draw_indirect),
            draw_indirect_first_instance: VkFrom::vk_from(&value.draw_indirect_first_instance),
            depth_clamp: VkFrom::vk_from(&value.depth_clamp),
            depth_bias_clamp: VkFrom::vk_from(&value.depth_bias_clamp),
            fill_mode_non_solid: VkFrom::vk_from(&value.fill_mode_non_solid),
            depth_bounds: VkFrom::vk_from(&value.depth_bounds),
            wide_lines: VkFrom::vk_from(&value.wide_lines),
            large_points: VkFrom::vk_from(&value.large_points),
            alpha_to_one: VkFrom::vk_from(&value.alpha_to_one),
            multi_viewport: VkFrom::vk_from(&value.multi_viewport),
            sampler_anisotropy: VkFrom::vk_from(&value.sampler_anisotropy),
            texture_compression_etc2: VkFrom::vk_from(&value.texture_compression_etc2),
            texture_compression_astc_ldr: VkFrom::vk_from(&value.texture_compression_astc_ldr),
            texture_compression_bc: VkFrom::vk_from(&value.texture_compression_bc),
            occlusion_query_precise: VkFrom::vk_from(&value.occlusion_query_precise),
            pipeline_statistics_query: VkFrom::vk_from(&value.pipeline_statistics_query),
            vertex_pipeline_stores_and_atomics: VkFrom::vk_from(&value.vertex_pipeline_stores_and_atomics),
            fragment_stores_and_atomics: VkFrom::vk_from(&value.fragment_stores_and_atomics),
            shader_tessellation_and_geometry_point_size: VkFrom::vk_from(&value.shader_tessellation_and_geometry_point_size),
            shader_image_gather_extended: VkFrom::vk_from(&value.shader_image_gather_extended),
            shader_storage_image_extended_formats: VkFrom::vk_from(&value.shader_storage_image_extended_formats),
            shader_storage_image_multisample: VkFrom::vk_from(&value.shader_storage_image_multisample),
            shader_storage_image_read_without_format: VkFrom::vk_from(&value.shader_storage_image_read_without_format),
            shader_storage_image_write_without_format: VkFrom::vk_from(&value.shader_storage_image_write_without_format),
            shader_uniform_buffer_array_dynamic_indexing: VkFrom::vk_from(&value.shader_uniform_buffer_array_dynamic_indexing),
            shader_sampled_image_array_dynamic_indexing: VkFrom::vk_from(&value.shader_sampled_image_array_dynamic_indexing),
            shader_storage_buffer_array_dynamic_indexing: VkFrom::vk_from(&value.shader_storage_buffer_array_dynamic_indexing),
            shader_storage_image_array_dynamic_indexing: VkFrom::vk_from(&value.shader_storage_image_array_dynamic_indexing),
            shader_clip_distance: VkFrom::vk_from(&value.shader_clip_distance),
            shader_cull_distance: VkFrom::vk_from(&value.shader_cull_distance),
            shader_float64: VkFrom::vk_from(&value.shader_float64),
            shader_int64: VkFrom::vk_from(&value.shader_int64),
            shader_int16: VkFrom::vk_from(&value.shader_int16),
            shader_resource_residency: VkFrom::vk_from(&value.shader_resource_residency),
            shader_resource_min_lod: VkFrom::vk_from(&value.shader_resource_min_lod),
            sparse_binding: VkFrom::vk_from(&value.sparse_binding),
            sparse_residency_buffer: VkFrom::vk_from(&value.sparse_residency_buffer),
            sparse_residency_image2d: VkFrom::vk_from(&value.sparse_residency_image2d),
            sparse_residency_image3d: VkFrom::vk_from(&value.sparse_residency_image3d),
            sparse_residency2samples: VkFrom::vk_from(&value.sparse_residency2samples),
            sparse_residency4samples: VkFrom::vk_from(&value.sparse_residency4samples),
            sparse_residency8samples: VkFrom::vk_from(&value.sparse_residency8samples),
            sparse_residency16samples: VkFrom::vk_from(&value.sparse_residency16samples),
            sparse_residency_aliased: VkFrom::vk_from(&value.sparse_residency_aliased),
            variable_multisample_rate: VkFrom::vk_from(&value.variable_multisample_rate),
            inherited_queries: VkFrom::vk_from(&value.inherited_queries),
        }
    }
}

impl VkFrom<RawVkPhysicalDeviceFeatures> for VkPhysicalDeviceFeatures {
    
    fn vk_from(value: &RawVkPhysicalDeviceFeatures) -> Self {
        Self {
            robust_buffer_access: VkFrom::vk_from(&value.robust_buffer_access),
            full_draw_index_uint32: VkFrom::vk_from(&value.full_draw_index_uint32),
            image_cube_array: VkFrom::vk_from(&value.image_cube_array),
            independent_blend: VkFrom::vk_from(&value.independent_blend),
            geometry_shader: VkFrom::vk_from(&value.geometry_shader),
            tessellation_shader: VkFrom::vk_from(&value.tessellation_shader),
            sample_rate_shading: VkFrom::vk_from(&value.sample_rate_shading),
            dual_src_blend: VkFrom::vk_from(&value.dual_src_blend),
            logic_op: VkFrom::vk_from(&value.logic_op),
            multi_draw_indirect: VkFrom::vk_from(&value.multi_draw_indirect),
            draw_indirect_first_instance: VkFrom::vk_from(&value.draw_indirect_first_instance),
            depth_clamp: VkFrom::vk_from(&value.depth_clamp),
            depth_bias_clamp: VkFrom::vk_from(&value.depth_bias_clamp),
            fill_mode_non_solid: VkFrom::vk_from(&value.fill_mode_non_solid),
            depth_bounds: VkFrom::vk_from(&value.depth_bounds),
            wide_lines: VkFrom::vk_from(&value.wide_lines),
            large_points: VkFrom::vk_from(&value.large_points),
            alpha_to_one: VkFrom::vk_from(&value.alpha_to_one),
            multi_viewport: VkFrom::vk_from(&value.multi_viewport),
            sampler_anisotropy: VkFrom::vk_from(&value.sampler_anisotropy),
            texture_compression_etc2: VkFrom::vk_from(&value.texture_compression_etc2),
            texture_compression_astc_ldr: VkFrom::vk_from(&value.texture_compression_astc_ldr),
            texture_compression_bc: VkFrom::vk_from(&value.texture_compression_bc),
            occlusion_query_precise: VkFrom::vk_from(&value.occlusion_query_precise),
            pipeline_statistics_query: VkFrom::vk_from(&value.pipeline_statistics_query),
            vertex_pipeline_stores_and_atomics: VkFrom::vk_from(&value.vertex_pipeline_stores_and_atomics),
            fragment_stores_and_atomics: VkFrom::vk_from(&value.fragment_stores_and_atomics),
            shader_tessellation_and_geometry_point_size: VkFrom::vk_from(&value.shader_tessellation_and_geometry_point_size),
            shader_image_gather_extended: VkFrom::vk_from(&value.shader_image_gather_extended),
            shader_storage_image_extended_formats: VkFrom::vk_from(&value.shader_storage_image_extended_formats),
            shader_storage_image_multisample: VkFrom::vk_from(&value.shader_storage_image_multisample),
            shader_storage_image_read_without_format: VkFrom::vk_from(&value.shader_storage_image_read_without_format),
            shader_storage_image_write_without_format: VkFrom::vk_from(&value.shader_storage_image_write_without_format),
            shader_uniform_buffer_array_dynamic_indexing: VkFrom::vk_from(&value.shader_uniform_buffer_array_dynamic_indexing),
            shader_sampled_image_array_dynamic_indexing: VkFrom::vk_from(&value.shader_sampled_image_array_dynamic_indexing),
            shader_storage_buffer_array_dynamic_indexing: VkFrom::vk_from(&value.shader_storage_buffer_array_dynamic_indexing),
            shader_storage_image_array_dynamic_indexing: VkFrom::vk_from(&value.shader_storage_image_array_dynamic_indexing),
            shader_clip_distance: VkFrom::vk_from(&value.shader_clip_distance),
            shader_cull_distance: VkFrom::vk_from(&value.shader_cull_distance),
            shader_float64: VkFrom::vk_from(&value.shader_float64),
            shader_int64: VkFrom::vk_from(&value.shader_int64),
            shader_int16: VkFrom::vk_from(&value.shader_int16),
            shader_resource_residency: VkFrom::vk_from(&value.shader_resource_residency),
            shader_resource_min_lod: VkFrom::vk_from(&value.shader_resource_min_lod),
            sparse_binding: VkFrom::vk_from(&value.sparse_binding),
            sparse_residency_buffer: VkFrom::vk_from(&value.sparse_residency_buffer),
            sparse_residency_image2d: VkFrom::vk_from(&value.sparse_residency_image2d),
            sparse_residency_image3d: VkFrom::vk_from(&value.sparse_residency_image3d),
            sparse_residency2samples: VkFrom::vk_from(&value.sparse_residency2samples),
            sparse_residency4samples: VkFrom::vk_from(&value.sparse_residency4samples),
            sparse_residency8samples: VkFrom::vk_from(&value.sparse_residency8samples),
            sparse_residency16samples: VkFrom::vk_from(&value.sparse_residency16samples),
            sparse_residency_aliased: VkFrom::vk_from(&value.sparse_residency_aliased),
            variable_multisample_rate: VkFrom::vk_from(&value.variable_multisample_rate),
            inherited_queries: VkFrom::vk_from(&value.inherited_queries),
        }
    }
}