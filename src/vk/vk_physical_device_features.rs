// Generated by `scripts/generate_type.js`

use std::convert::From;

#[repr(C)]
pub struct RawVkPhysicalDeviceFeatures {
    robust_buffer_access: u32,
    full_draw_index_uint32: u32,
    image_cube_array: u32,
    independent_blend: u32,
    geometry_shader: u32,
    tessellation_shader: u32,
    sample_rate_shading: u32,
    dual_src_blend: u32,
    logic_op: u32,
    multi_draw_indirect: u32,
    draw_indirect_first_instance: u32,
    depth_clamp: u32,
    depth_bias_clamp: u32,
    fill_mode_non_solid: u32,
    depth_bounds: u32,
    wide_lines: u32,
    large_points: u32,
    alpha_to_one: u32,
    multi_viewport: u32,
    sampler_anisotropy: u32,
    texture_compression_etc2: u32,
    texture_compression_astc_ldr: u32,
    texture_compression_bc: u32,
    occlusion_query_precise: u32,
    pipeline_statistics_query: u32,
    vertex_pipeline_stores_and_atomics: u32,
    fragment_stores_and_atomics: u32,
    shader_tessellation_and_geometry_point_size: u32,
    shader_image_gather_extended: u32,
    shader_storage_image_extended_formats: u32,
    shader_storage_image_multisample: u32,
    shader_storage_image_read_without_format: u32,
    shader_storage_image_write_without_format: u32,
    shader_uniform_buffer_array_dynamic_indexing: u32,
    shader_sampled_image_array_dynamic_indexing: u32,
    shader_storage_buffer_array_dynamic_indexing: u32,
    shader_storage_image_array_dynamic_indexing: u32,
    shader_clip_distance: u32,
    shader_cull_distance: u32,
    shader_float64: u32,
    shader_int64: u32,
    shader_int16: u32,
    shader_resource_residency: u32,
    shader_resource_min_lod: u32,
    sparse_binding: u32,
    sparse_residency_buffer: u32,
    sparse_residency_image_2d: u32,
    sparse_residency_image_3d: u32,
    sparse_residency2_samples: u32,
    sparse_residency4_samples: u32,
    sparse_residency8_samples: u32,
    sparse_residency16_samples: u32,
    sparse_residency_aliased: u32,
    variable_multisample_rate: u32,
    inherited_queries: u32
}

#[derive(Debug, Default)]
pub struct VkPhysicalDeviceFeatures {
    pub robust_buffer_access: bool,
    pub full_draw_index_uint32: bool,
    pub image_cube_array: bool,
    pub independent_blend: bool,
    pub geometry_shader: bool,
    pub tessellation_shader: bool,
    pub sample_rate_shading: bool,
    pub dual_src_blend: bool,
    pub logic_op: bool,
    pub multi_draw_indirect: bool,
    pub draw_indirect_first_instance: bool,
    pub depth_clamp: bool,
    pub depth_bias_clamp: bool,
    pub fill_mode_non_solid: bool,
    pub depth_bounds: bool,
    pub wide_lines: bool,
    pub large_points: bool,
    pub alpha_to_one: bool,
    pub multi_viewport: bool,
    pub sampler_anisotropy: bool,
    pub texture_compression_etc2: bool,
    pub texture_compression_astc_ldr: bool,
    pub texture_compression_bc: bool,
    pub occlusion_query_precise: bool,
    pub pipeline_statistics_query: bool,
    pub vertex_pipeline_stores_and_atomics: bool,
    pub fragment_stores_and_atomics: bool,
    pub shader_tessellation_and_geometry_point_size: bool,
    pub shader_image_gather_extended: bool,
    pub shader_storage_image_extended_formats: bool,
    pub shader_storage_image_multisample: bool,
    pub shader_storage_image_read_without_format: bool,
    pub shader_storage_image_write_without_format: bool,
    pub shader_uniform_buffer_array_dynamic_indexing: bool,
    pub shader_sampled_image_array_dynamic_indexing: bool,
    pub shader_storage_buffer_array_dynamic_indexing: bool,
    pub shader_storage_image_array_dynamic_indexing: bool,
    pub shader_clip_distance: bool,
    pub shader_cull_distance: bool,
    pub shader_float64: bool,
    pub shader_int64: bool,
    pub shader_int16: bool,
    pub shader_resource_residency: bool,
    pub shader_resource_min_lod: bool,
    pub sparse_binding: bool,
    pub sparse_residency_buffer: bool,
    pub sparse_residency_image_2d: bool,
    pub sparse_residency_image_3d: bool,
    pub sparse_residency2_samples: bool,
    pub sparse_residency4_samples: bool,
    pub sparse_residency8_samples: bool,
    pub sparse_residency16_samples: bool,
    pub sparse_residency_aliased: bool,
    pub variable_multisample_rate: bool,
    pub inherited_queries: bool,
    pub _index: usize,
}

impl<'a> From<&'a RawVkPhysicalDeviceFeatures> for VkPhysicalDeviceFeatures {
    fn from(value: &'a RawVkPhysicalDeviceFeatures) -> Self {
        VkPhysicalDeviceFeatures {
            robust_buffer_access: value.robust_buffer_access != 0,
            full_draw_index_uint32: value.full_draw_index_uint32 != 0,
            image_cube_array: value.image_cube_array != 0,
            independent_blend: value.independent_blend != 0,
            geometry_shader: value.geometry_shader != 0,
            tessellation_shader: value.tessellation_shader != 0,
            sample_rate_shading: value.sample_rate_shading != 0,
            dual_src_blend: value.dual_src_blend != 0,
            logic_op: value.logic_op != 0,
            multi_draw_indirect: value.multi_draw_indirect != 0,
            draw_indirect_first_instance: value.draw_indirect_first_instance != 0,
            depth_clamp: value.depth_clamp != 0,
            depth_bias_clamp: value.depth_bias_clamp != 0,
            fill_mode_non_solid: value.fill_mode_non_solid != 0,
            depth_bounds: value.depth_bounds != 0,
            wide_lines: value.wide_lines != 0,
            large_points: value.large_points != 0,
            alpha_to_one: value.alpha_to_one != 0,
            multi_viewport: value.multi_viewport != 0,
            sampler_anisotropy: value.sampler_anisotropy != 0,
            texture_compression_etc2: value.texture_compression_etc2 != 0,
            texture_compression_astc_ldr: value.texture_compression_astc_ldr != 0,
            texture_compression_bc: value.texture_compression_bc != 0,
            occlusion_query_precise: value.occlusion_query_precise != 0,
            pipeline_statistics_query: value.pipeline_statistics_query != 0,
            vertex_pipeline_stores_and_atomics: value.vertex_pipeline_stores_and_atomics != 0,
            fragment_stores_and_atomics: value.fragment_stores_and_atomics != 0,
            shader_tessellation_and_geometry_point_size: value.shader_tessellation_and_geometry_point_size != 0,
            shader_image_gather_extended: value.shader_image_gather_extended != 0,
            shader_storage_image_extended_formats: value.shader_storage_image_extended_formats != 0,
            shader_storage_image_multisample: value.shader_storage_image_multisample != 0,
            shader_storage_image_read_without_format: value.shader_storage_image_read_without_format != 0,
            shader_storage_image_write_without_format: value.shader_storage_image_write_without_format != 0,
            shader_uniform_buffer_array_dynamic_indexing: value.shader_uniform_buffer_array_dynamic_indexing != 0,
            shader_sampled_image_array_dynamic_indexing: value.shader_sampled_image_array_dynamic_indexing != 0,
            shader_storage_buffer_array_dynamic_indexing: value.shader_storage_buffer_array_dynamic_indexing != 0,
            shader_storage_image_array_dynamic_indexing: value.shader_storage_image_array_dynamic_indexing != 0,
            shader_clip_distance: value.shader_clip_distance != 0,
            shader_cull_distance: value.shader_cull_distance != 0,
            shader_float64: value.shader_float64 != 0,
            shader_int64: value.shader_int64 != 0,
            shader_int16: value.shader_int16 != 0,
            shader_resource_residency: value.shader_resource_residency != 0,
            shader_resource_min_lod: value.shader_resource_min_lod != 0,
            sparse_binding: value.sparse_binding != 0,
            sparse_residency_buffer: value.sparse_residency_buffer != 0,
            sparse_residency_image_2d: value.sparse_residency_image_2d != 0,
            sparse_residency_image_3d: value.sparse_residency_image_3d != 0,
            sparse_residency2_samples: value.sparse_residency2_samples != 0,
            sparse_residency4_samples: value.sparse_residency4_samples != 0,
            sparse_residency8_samples: value.sparse_residency8_samples != 0,
            sparse_residency16_samples: value.sparse_residency16_samples != 0,
            sparse_residency_aliased: value.sparse_residency_aliased != 0,
            variable_multisample_rate: value.variable_multisample_rate != 0,
            inherited_queries: value.inherited_queries != 0,
            _index: 0,
        }
    }
}

impl<'a> From<&'a VkPhysicalDeviceFeatures> for RawVkPhysicalDeviceFeatures {
    fn from(value: &'a VkPhysicalDeviceFeatures) -> Self {
        RawVkPhysicalDeviceFeatures {
            robust_buffer_access: if value.robust_buffer_access { 1 } else { 0 },
            full_draw_index_uint32: if value.full_draw_index_uint32 { 1 } else { 0 },
            image_cube_array: if value.image_cube_array { 1 } else { 0 },
            independent_blend: if value.independent_blend { 1 } else { 0 },
            geometry_shader: if value.geometry_shader { 1 } else { 0 },
            tessellation_shader: if value.tessellation_shader { 1 } else { 0 },
            sample_rate_shading: if value.sample_rate_shading { 1 } else { 0 },
            dual_src_blend: if value.dual_src_blend { 1 } else { 0 },
            logic_op: if value.logic_op { 1 } else { 0 },
            multi_draw_indirect: if value.multi_draw_indirect { 1 } else { 0 },
            draw_indirect_first_instance: if value.draw_indirect_first_instance { 1 } else { 0 },
            depth_clamp: if value.depth_clamp { 1 } else { 0 },
            depth_bias_clamp: if value.depth_bias_clamp { 1 } else { 0 },
            fill_mode_non_solid: if value.fill_mode_non_solid { 1 } else { 0 },
            depth_bounds: if value.depth_bounds { 1 } else { 0 },
            wide_lines: if value.wide_lines { 1 } else { 0 },
            large_points: if value.large_points { 1 } else { 0 },
            alpha_to_one: if value.alpha_to_one { 1 } else { 0 },
            multi_viewport: if value.multi_viewport { 1 } else { 0 },
            sampler_anisotropy: if value.sampler_anisotropy { 1 } else { 0 },
            texture_compression_etc2: if value.texture_compression_etc2 { 1 } else { 0 },
            texture_compression_astc_ldr: if value.texture_compression_astc_ldr { 1 } else { 0 },
            texture_compression_bc: if value.texture_compression_bc { 1 } else { 0 },
            occlusion_query_precise: if value.occlusion_query_precise { 1 } else { 0 },
            pipeline_statistics_query: if value.pipeline_statistics_query { 1 } else { 0 },
            vertex_pipeline_stores_and_atomics: if value.vertex_pipeline_stores_and_atomics { 1 } else { 0 },
            fragment_stores_and_atomics: if value.fragment_stores_and_atomics { 1 } else { 0 },
            shader_tessellation_and_geometry_point_size: if value.shader_tessellation_and_geometry_point_size { 1 } else { 0 },
            shader_image_gather_extended: if value.shader_image_gather_extended { 1 } else { 0 },
            shader_storage_image_extended_formats: if value.shader_storage_image_extended_formats { 1 } else { 0 },
            shader_storage_image_multisample: if value.shader_storage_image_multisample { 1 } else { 0 },
            shader_storage_image_read_without_format: if value.shader_storage_image_read_without_format { 1 } else { 0 },
            shader_storage_image_write_without_format: if value.shader_storage_image_write_without_format { 1 } else { 0 },
            shader_uniform_buffer_array_dynamic_indexing: if value.shader_uniform_buffer_array_dynamic_indexing { 1 } else { 0 },
            shader_sampled_image_array_dynamic_indexing: if value.shader_sampled_image_array_dynamic_indexing { 1 } else { 0 },
            shader_storage_buffer_array_dynamic_indexing: if value.shader_storage_buffer_array_dynamic_indexing { 1 } else { 0 },
            shader_storage_image_array_dynamic_indexing: if value.shader_storage_image_array_dynamic_indexing { 1 } else { 0 },
            shader_clip_distance: if value.shader_clip_distance { 1 } else { 0 },
            shader_cull_distance: if value.shader_cull_distance { 1 } else { 0 },
            shader_float64: if value.shader_float64 { 1 } else { 0 },
            shader_int64: if value.shader_int64 { 1 } else { 0 },
            shader_int16: if value.shader_int16 { 1 } else { 0 },
            shader_resource_residency: if value.shader_resource_residency { 1 } else { 0 },
            shader_resource_min_lod: if value.shader_resource_min_lod { 1 } else { 0 },
            sparse_binding: if value.sparse_binding { 1 } else { 0 },
            sparse_residency_buffer: if value.sparse_residency_buffer { 1 } else { 0 },
            sparse_residency_image_2d: if value.sparse_residency_image_2d { 1 } else { 0 },
            sparse_residency_image_3d: if value.sparse_residency_image_3d { 1 } else { 0 },
            sparse_residency2_samples: if value.sparse_residency2_samples { 1 } else { 0 },
            sparse_residency4_samples: if value.sparse_residency4_samples { 1 } else { 0 },
            sparse_residency8_samples: if value.sparse_residency8_samples { 1 } else { 0 },
            sparse_residency16_samples: if value.sparse_residency16_samples { 1 } else { 0 },
            sparse_residency_aliased: if value.sparse_residency_aliased { 1 } else { 0 },
            variable_multisample_rate: if value.variable_multisample_rate { 1 } else { 0 },
            inherited_queries: if value.inherited_queries { 1 } else { 0 }
        }
    }
}

impl VkPhysicalDeviceFeatures {
    pub fn none() -> Self {
        VkPhysicalDeviceFeatures::default()
    }
}