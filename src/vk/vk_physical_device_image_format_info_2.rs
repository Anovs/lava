// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_format::*;
use vk::vk_image_type::*;
use vk::vk_image_tiling::*;
use vk::vk_image_usage_flags::*;
use vk::vk_image_create_flags::*;

#[repr(C)]
#[derive(Debug)]
pub struct RawVkPhysicalDeviceImageFormatInfo2 {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub format: RawVkFormat,
    pub type_: RawVkImageType,
    pub tiling: RawVkImageTiling,
    pub usage: RawVkImageUsageFlags,
    pub flags: RawVkImageCreateFlags,
}

#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceImageFormatInfo2 {
    pub format: VkFormat,
    pub type_: VkImageType,
    pub tiling: VkImageTiling,
    pub usage: VkImageUsageFlags,
    pub flags: VkImageCreateFlags,
}

impl VkRawType<VkPhysicalDeviceImageFormatInfo2> for RawVkPhysicalDeviceImageFormatInfo2 {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceImageFormatInfo2) -> VkPhysicalDeviceImageFormatInfo2 {
        VkPhysicalDeviceImageFormatInfo2 {
            format: RawVkFormat::vk_to_wrapped(&src.format),
            type_: RawVkImageType::vk_to_wrapped(&src.type_),
            tiling: RawVkImageTiling::vk_to_wrapped(&src.tiling),
            usage: RawVkImageUsageFlags::vk_to_wrapped(&src.usage),
            flags: RawVkImageCreateFlags::vk_to_wrapped(&src.flags),
        }
    }
}

impl VkWrappedType<RawVkPhysicalDeviceImageFormatInfo2> for VkPhysicalDeviceImageFormatInfo2 {
    fn vk_to_raw(src: &VkPhysicalDeviceImageFormatInfo2, dst: &mut RawVkPhysicalDeviceImageFormatInfo2) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceImageFormatInfo2);
        dst.next = ptr::null();
        dst.format = vk_to_raw_value(&src.format);
        dst.type_ = vk_to_raw_value(&src.type_);
        dst.tiling = vk_to_raw_value(&src.tiling);
        dst.usage = vk_to_raw_value(&src.usage);
        dst.flags = vk_to_raw_value(&src.flags);
    }
}

impl Default for VkPhysicalDeviceImageFormatInfo2 {
    fn default() -> VkPhysicalDeviceImageFormatInfo2 {
        VkPhysicalDeviceImageFormatInfo2 {
            format: VkFormat::default(),
            type_: VkImageType::default(),
            tiling: VkImageTiling::default(),
            usage: VkImageUsageFlags::default(),
            flags: VkImageCreateFlags::default(),
        }
    }
}

impl VkSetup for VkPhysicalDeviceImageFormatInfo2 {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceImageFormatInfo2 {
    fn vk_free(&mut self) {
        
    }
}