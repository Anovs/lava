// Generated by `scripts/generate_type.js`

use std::convert::From;
use std::vec::Vec;
use libc::vec_from_c_ptr;
use vk::*;

#[repr(C)]
#[derive(Clone, Copy, Default)]
pub struct RawVkPhysicalDeviceMemoryProperties {
    memory_type_count: u32,
    memory_types: [RawVkMemoryType; 32],
    memory_heap_count: u32,
    memory_heaps: [RawVkMemoryHeap; 16]
}

#[derive(Debug)]
pub struct VkPhysicalDeviceMemoryProperties {
    pub memory_types: Vec<VkMemoryType>,
    pub memory_heaps: Vec<VkMemoryHeap>
}

impl<'a> From<&'a RawVkPhysicalDeviceMemoryProperties> for VkPhysicalDeviceMemoryProperties {
    fn from(value: &'a RawVkPhysicalDeviceMemoryProperties) -> Self {
        VkPhysicalDeviceMemoryProperties {
            memory_types: unsafe { vec_from_c_ptr(value.memory_type_count as usize, &value.memory_types[0] as *const RawVkMemoryType).iter().map(|r| VkMemoryType::from(r)).collect() },
            memory_heaps: unsafe { vec_from_c_ptr(value.memory_heap_count as usize, &value.memory_heaps[0] as *const RawVkMemoryHeap).iter().map(|r| VkMemoryHeap::from(r)).collect() }
        }
    }
}

impl<'a> From<&'a VkPhysicalDeviceMemoryProperties> for RawVkPhysicalDeviceMemoryProperties {
    fn from(value: &'a VkPhysicalDeviceMemoryProperties) -> Self {
        RawVkPhysicalDeviceMemoryProperties {
            memory_type_count: value.memory_types.len() as u32,
            memory_types: [Default::default(); 32],
            memory_heap_count: value.memory_heaps.len() as u32,
            memory_heaps: [Default::default(); 16]
        }
    }
}

