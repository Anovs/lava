// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;

#[repr(C)]
pub struct RawVkPhysicalDeviceMultiviewFeatures {
    s_type: RawVkStructureType,
    next: *const c_void,
    multiview: u32,
    multiview_geometry_shader: u32,
    multiview_tessellation_shader: u32,
}

#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceMultiviewFeatures {
    pub multiview: bool,
    pub multiview_geometry_shader: bool,
    pub multiview_tessellation_shader: bool,
}

impl VkRawType<VkPhysicalDeviceMultiviewFeatures> for RawVkPhysicalDeviceMultiviewFeatures {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceMultiviewFeatures) -> VkPhysicalDeviceMultiviewFeatures {
        VkPhysicalDeviceMultiviewFeatures {
            multiview: u32::vk_to_wrapped(&src.multiview),
            multiview_geometry_shader: u32::vk_to_wrapped(&src.multiview_geometry_shader),
            multiview_tessellation_shader: u32::vk_to_wrapped(&src.multiview_tessellation_shader),
        }
    }
}

impl VkWrappedType<RawVkPhysicalDeviceMultiviewFeatures> for VkPhysicalDeviceMultiviewFeatures {
    fn vk_to_raw(src: &VkPhysicalDeviceMultiviewFeatures, dst: &mut RawVkPhysicalDeviceMultiviewFeatures) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceMultiviewFeatures);
        dst.next = ptr::null();
        dst.multiview = vk_to_raw_value(&src.multiview);
        dst.multiview_geometry_shader = vk_to_raw_value(&src.multiview_geometry_shader);
        dst.multiview_tessellation_shader = vk_to_raw_value(&src.multiview_tessellation_shader);
    }
}

impl Default for VkPhysicalDeviceMultiviewFeatures {
    fn default() -> VkPhysicalDeviceMultiviewFeatures {
        VkPhysicalDeviceMultiviewFeatures {
            multiview: false,
            multiview_geometry_shader: false,
            multiview_tessellation_shader: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceMultiviewFeatures {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceMultiviewFeatures {
    fn vk_free(&mut self) {
        
    }
}