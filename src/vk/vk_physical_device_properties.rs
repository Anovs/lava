// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ptr::null;
use libc::*;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RawVkPhysicalDeviceProperties {
    api_version: u32,
    driver_version: u32,
    vendor_id: u32,
    device_id: u32,
    device_type: RawVkPhysicalDeviceType,
    device_name: [c_char; 256],
    pipeline_cache_uuid: [u8; 16],
    limits: RawVkPhysicalDeviceLimits,
    sparse_properties: RawVkPhysicalDeviceSparseProperties,
}

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties {
    pub api_version: [u32; 3],
    pub driver_version: [u32; 3],
    pub vendor_id: u32,
    pub device_id: u32,
    pub device_type: VkPhysicalDeviceType,
    pub device_name: String,
    pub pipeline_cache_uuid: [u8; 16],
    pub limits: VkPhysicalDeviceLimits,
    pub sparse_properties: VkPhysicalDeviceSparseProperties,
}

impl VkFrom<VkPhysicalDeviceProperties> for RawVkPhysicalDeviceProperties {
    
    fn vk_from(value: &VkPhysicalDeviceProperties) -> Self {
        Self {
            api_version: vk_make_version(&value.api_version),
            driver_version: vk_make_version(&value.driver_version),
            vendor_id: value.vendor_id,
            device_id: value.device_id,
            device_type: VkFrom::vk_from(&value.device_type),
            device_name: [0; 256],
            pipeline_cache_uuid: value.pipeline_cache_uuid,
            limits: VkFrom::vk_from(&value.limits),
            sparse_properties: VkFrom::vk_from(&value.sparse_properties),
        }
    }
}

impl VkFrom<RawVkPhysicalDeviceProperties> for VkPhysicalDeviceProperties {
    
    fn vk_from(value: &RawVkPhysicalDeviceProperties) -> Self {
        unsafe {
            Self {
                api_version: vk_from_version(value.api_version),
                driver_version: vk_from_version(value.driver_version),
                vendor_id: value.vendor_id,
                device_id: value.device_id,
                device_type: VkFrom::vk_from(&value.device_type),
                device_name: copy_as_string(&value.device_name as *const c_char),
                pipeline_cache_uuid: value.pipeline_cache_uuid,
                limits: VkFrom::vk_from(&value.limits),
                sparse_properties: VkFrom::vk_from(&value.sparse_properties),
            }
        }
    }
}