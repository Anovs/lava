// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_physical_device_properties::*;

#[repr(C)]
pub struct RawVkPhysicalDeviceProperties2 {
    s_type: RawVkStructureType,
    next: *const c_void,
    properties: RawVkPhysicalDeviceProperties,
}

#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceProperties2 {
    pub properties: VkPhysicalDeviceProperties,
}

impl VkRawType<VkPhysicalDeviceProperties2> for RawVkPhysicalDeviceProperties2 {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceProperties2) -> VkPhysicalDeviceProperties2 {
        VkPhysicalDeviceProperties2 {
            properties: RawVkPhysicalDeviceProperties::vk_to_wrapped(&src.properties),
        }
    }
}

impl VkSetup for VkPhysicalDeviceProperties2 {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        VkSetup::vk_setup(&mut self.properties, fn_table, instance, device);
    }
}

impl VkFree for RawVkPhysicalDeviceProperties2 {
    fn vk_free(&mut self) {
        RawVkPhysicalDeviceProperties::vk_free(&mut self.properties);
    }
}