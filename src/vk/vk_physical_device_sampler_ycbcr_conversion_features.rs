// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;

#[repr(C)]
pub struct RawVkPhysicalDeviceSamplerYcbcrConversionFeatures {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub sampler_ycbcr_conversion: u32,
}

#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    pub sampler_ycbcr_conversion: bool,
}

impl VkRawType<VkPhysicalDeviceSamplerYcbcrConversionFeatures> for RawVkPhysicalDeviceSamplerYcbcrConversionFeatures {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceSamplerYcbcrConversionFeatures) -> VkPhysicalDeviceSamplerYcbcrConversionFeatures {
        VkPhysicalDeviceSamplerYcbcrConversionFeatures {
            sampler_ycbcr_conversion: u32::vk_to_wrapped(&src.sampler_ycbcr_conversion),
        }
    }
}

impl VkWrappedType<RawVkPhysicalDeviceSamplerYcbcrConversionFeatures> for VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    fn vk_to_raw(src: &VkPhysicalDeviceSamplerYcbcrConversionFeatures, dst: &mut RawVkPhysicalDeviceSamplerYcbcrConversionFeatures) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceSamplerYcbcrConversionFeatures);
        dst.next = ptr::null();
        dst.sampler_ycbcr_conversion = vk_to_raw_value(&src.sampler_ycbcr_conversion);
    }
}

impl Default for VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    fn default() -> VkPhysicalDeviceSamplerYcbcrConversionFeatures {
        VkPhysicalDeviceSamplerYcbcrConversionFeatures {
            sampler_ycbcr_conversion: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceSamplerYcbcrConversionFeatures {
    fn vk_free(&mut self) {
        
    }
}