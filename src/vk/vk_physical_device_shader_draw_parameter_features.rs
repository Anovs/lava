// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;

#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceShaderDrawParameterFeatures {
    pub shader_draw_parameters: bool,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceShaderDrawParameterFeatures {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub shader_draw_parameters: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceShaderDrawParameterFeatures> for VkPhysicalDeviceShaderDrawParameterFeatures {
    fn vk_to_raw(src: &VkPhysicalDeviceShaderDrawParameterFeatures, dst: &mut RawVkPhysicalDeviceShaderDrawParameterFeatures) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceShaderDrawParameterFeatures);
        dst.next = ptr::null();
        dst.shader_draw_parameters = vk_to_raw_value(&src.shader_draw_parameters);
    }
}

impl VkRawType<VkPhysicalDeviceShaderDrawParameterFeatures> for RawVkPhysicalDeviceShaderDrawParameterFeatures {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceShaderDrawParameterFeatures) -> VkPhysicalDeviceShaderDrawParameterFeatures {
        VkPhysicalDeviceShaderDrawParameterFeatures {
            shader_draw_parameters: u32::vk_to_wrapped(&src.shader_draw_parameters),
        }
    }
}

impl Default for VkPhysicalDeviceShaderDrawParameterFeatures {
    fn default() -> VkPhysicalDeviceShaderDrawParameterFeatures {
        VkPhysicalDeviceShaderDrawParameterFeatures {
            shader_draw_parameters: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceShaderDrawParameterFeatures {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceShaderDrawParameterFeatures {
    fn vk_free(&mut self) {
        
    }
}