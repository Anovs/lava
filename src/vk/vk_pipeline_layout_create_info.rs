// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::ptr::null;
use libc::*;

#[repr(C)]
pub struct RawVkPipelineLayoutCreateInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    flags: RawVkPipelineLayoutCreateFlags,
    set_layout_count: u32,
    set_layouts: *mut RawVkDescriptorSetLayout,
    push_constant_range_count: u32,
    push_constant_ranges: *mut RawVkPushConstantRange,
}

#[derive(Debug)]
pub struct VkPipelineLayoutCreateInfo {
    pub flags: VkPipelineLayoutCreateFlags,
    pub set_layouts: Vec<VkDescriptorSetLayout>,
    pub push_constant_ranges: Vec<VkPushConstantRange>,
}

impl VkFrom<VkPipelineLayoutCreateInfo> for RawVkPipelineLayoutCreateInfo {
    
    fn vk_from(value: &VkPipelineLayoutCreateInfo) -> Self {
        unsafe {
            Self {
                s_type: VkFrom::vk_from(&VkStructureType::PipelineLayoutCreateInfo),
                next: null(),
                flags: VkFrom::vk_from(&value.flags),
                set_layout_count: value.set_layouts.len() as u32,
                set_layouts: copy_as_c_array(&value.set_layouts.iter().map(|x| VkFrom::vk_from(x)).collect()),
                push_constant_range_count: value.push_constant_ranges.len() as u32,
                push_constant_ranges: copy_as_c_array(&value.push_constant_ranges.iter().map(|x| VkFrom::vk_from(x)).collect()),
            }
        }
    }
}

impl Drop for RawVkPipelineLayoutCreateInfo {
    
    fn drop(&mut self) {
        unsafe {
            free_c_array(self.set_layouts);
            free_c_array(self.push_constant_ranges);
        }
    }
}