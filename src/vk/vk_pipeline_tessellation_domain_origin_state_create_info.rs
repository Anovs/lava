// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_tessellation_domain_origin::*;

#[derive(Debug, Clone)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo {
    pub domain_origin: VkTessellationDomainOrigin,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPipelineTessellationDomainOriginStateCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub domain_origin: RawVkTessellationDomainOrigin,
}

impl VkWrappedType<RawVkPipelineTessellationDomainOriginStateCreateInfo> for VkPipelineTessellationDomainOriginStateCreateInfo {
    fn vk_to_raw(src: &VkPipelineTessellationDomainOriginStateCreateInfo, dst: &mut RawVkPipelineTessellationDomainOriginStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineTessellationDomainOriginStateCreateInfo);
        dst.next = ptr::null();
        dst.domain_origin = vk_to_raw_value(&src.domain_origin);
    }
}

impl VkRawType<VkPipelineTessellationDomainOriginStateCreateInfo> for RawVkPipelineTessellationDomainOriginStateCreateInfo {
    fn vk_to_wrapped(src: &RawVkPipelineTessellationDomainOriginStateCreateInfo) -> VkPipelineTessellationDomainOriginStateCreateInfo {
        VkPipelineTessellationDomainOriginStateCreateInfo {
            domain_origin: RawVkTessellationDomainOrigin::vk_to_wrapped(&src.domain_origin),
        }
    }
}

impl Default for VkPipelineTessellationDomainOriginStateCreateInfo {
    fn default() -> VkPipelineTessellationDomainOriginStateCreateInfo {
        VkPipelineTessellationDomainOriginStateCreateInfo {
            domain_origin: VkTessellationDomainOrigin::default(),
        }
    }
}

impl VkSetup for VkPipelineTessellationDomainOriginStateCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPipelineTessellationDomainOriginStateCreateInfo {
    fn vk_free(&mut self) {
        
    }
}