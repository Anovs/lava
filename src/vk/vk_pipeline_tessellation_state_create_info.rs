// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_pipeline_tessellation_state_create_flags::*;

#[repr(C)]
#[derive(Debug)]
pub struct RawVkPipelineTessellationStateCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkPipelineTessellationStateCreateFlags,
    pub patch_control_points: u32,
}

#[derive(Debug, Clone)]
pub struct VkPipelineTessellationStateCreateInfo {
    pub flags: VkPipelineTessellationStateCreateFlags,
    pub patch_control_points: usize,
}

impl VkRawType<VkPipelineTessellationStateCreateInfo> for RawVkPipelineTessellationStateCreateInfo {
    fn vk_to_wrapped(src: &RawVkPipelineTessellationStateCreateInfo) -> VkPipelineTessellationStateCreateInfo {
        VkPipelineTessellationStateCreateInfo {
            flags: RawVkPipelineTessellationStateCreateFlags::vk_to_wrapped(&src.flags),
            patch_control_points: u32::vk_to_wrapped(&src.patch_control_points),
        }
    }
}

impl VkWrappedType<RawVkPipelineTessellationStateCreateInfo> for VkPipelineTessellationStateCreateInfo {
    fn vk_to_raw(src: &VkPipelineTessellationStateCreateInfo, dst: &mut RawVkPipelineTessellationStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineTessellationStateCreateInfo);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.patch_control_points = vk_to_raw_value(&src.patch_control_points);
    }
}

impl Default for VkPipelineTessellationStateCreateInfo {
    fn default() -> VkPipelineTessellationStateCreateInfo {
        VkPipelineTessellationStateCreateInfo {
            flags: VkPipelineTessellationStateCreateFlags::default(),
            patch_control_points: 0,
        }
    }
}

impl VkSetup for VkPipelineTessellationStateCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPipelineTessellationStateCreateInfo {
    fn vk_free(&mut self) {
        
    }
}