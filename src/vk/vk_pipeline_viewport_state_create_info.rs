// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_pipeline_viewport_state_create_flags::*;
use vk::vk_viewport::*;
use vk::vk_rect_2d::*;

#[derive(Debug, Clone)]
pub struct VkPipelineViewportStateCreateInfo<'a, 'b> {
    pub flags: VkPipelineViewportStateCreateFlags,
    pub viewports: Option<&'a [VkViewport]>,
    pub scissors: Option<&'b [VkRect2D]>,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPipelineViewportStateCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkPipelineViewportStateCreateFlags,
    pub viewport_count: u32,
    pub viewports: *mut RawVkViewport,
    pub scissor_count: u32,
    pub scissors: *mut RawVkRect2D,
}

impl<'a, 'b> VkWrappedType<RawVkPipelineViewportStateCreateInfo> for VkPipelineViewportStateCreateInfo<'a, 'b> {
    fn vk_to_raw(src: &VkPipelineViewportStateCreateInfo, dst: &mut RawVkPipelineViewportStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineViewportStateCreateInfo);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.viewport_count = get_array_option_len(src.viewports) as u32;
        dst.viewports = new_ptr_vk_array_checked(src.viewports);
        dst.scissor_count = get_array_option_len(src.scissors) as u32;
        dst.scissors = new_ptr_vk_array_checked(src.scissors);
    }
}

impl Default for VkPipelineViewportStateCreateInfo<'static, 'static> {
    fn default() -> VkPipelineViewportStateCreateInfo<'static, 'static> {
        VkPipelineViewportStateCreateInfo {
            flags: VkPipelineViewportStateCreateFlags::default(),
            viewports: None,
            scissors: None,
        }
    }
}

impl<'a, 'b> VkSetup for VkPipelineViewportStateCreateInfo<'a, 'b> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkPipelineViewportStateCreateInfo {
    fn vk_free(&mut self) {
        free_vk_ptr_array(self.viewport_count as usize, self.viewports);
        free_vk_ptr_array(self.scissor_count as usize, self.scissors);
    }
}