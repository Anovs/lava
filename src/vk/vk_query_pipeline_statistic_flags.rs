// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkQueryPipelineStatisticFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkQueryPipelineStatisticFlags {
    input_assembly_vertices: bool,
    input_assembly_primitives: bool,
    vertex_shader_invocations: bool,
    geometry_shader_invocations: bool,
    geometry_shader_primitives: bool,
    clipping_invocations: bool,
    clipping_primitives: bool,
    fragment_shader_invocations: bool,
    tessellation_control_shader_patches: bool,
    tessellation_evaluation_shader_invocations: bool,
    compute_shader_invocations: bool,
}

impl VkRawType<VkQueryPipelineStatisticFlags> for RawVkQueryPipelineStatisticFlags {
    fn vk_to_wrapped(src: &RawVkQueryPipelineStatisticFlags) -> VkQueryPipelineStatisticFlags {
        VkQueryPipelineStatisticFlags {
            input_assembly_vertices: (src & 0x00000001) != 0,
            input_assembly_primitives: (src & 0x00000002) != 0,
            vertex_shader_invocations: (src & 0x00000004) != 0,
            geometry_shader_invocations: (src & 0x00000008) != 0,
            geometry_shader_primitives: (src & 0x00000010) != 0,
            clipping_invocations: (src & 0x00000020) != 0,
            clipping_primitives: (src & 0x00000040) != 0,
            fragment_shader_invocations: (src & 0x00000080) != 0,
            tessellation_control_shader_patches: (src & 0x00000100) != 0,
            tessellation_evaluation_shader_invocations: (src & 0x00000200) != 0,
            compute_shader_invocations: (src & 0x00000400) != 0,
        }
    }
}

impl VkWrappedType<RawVkQueryPipelineStatisticFlags> for VkQueryPipelineStatisticFlags {
    fn vk_to_raw(src: &VkQueryPipelineStatisticFlags, dst: &mut RawVkQueryPipelineStatisticFlags) {
        *dst = 0;
        if src.input_assembly_vertices { *dst |= 0x00000001; }
        if src.input_assembly_primitives { *dst |= 0x00000002; }
        if src.vertex_shader_invocations { *dst |= 0x00000004; }
        if src.geometry_shader_invocations { *dst |= 0x00000008; }
        if src.geometry_shader_primitives { *dst |= 0x00000010; }
        if src.clipping_invocations { *dst |= 0x00000020; }
        if src.clipping_primitives { *dst |= 0x00000040; }
        if src.fragment_shader_invocations { *dst |= 0x00000080; }
        if src.tessellation_control_shader_patches { *dst |= 0x00000100; }
        if src.tessellation_evaluation_shader_invocations { *dst |= 0x00000200; }
        if src.compute_shader_invocations { *dst |= 0x00000400; }
    }
}

pub static STATIC_VK_QUERY_PIPELINE_STATISTIC_FLAGS : VkQueryPipelineStatisticFlags = VkQueryPipelineStatisticFlags {
    input_assembly_vertices: false,
    input_assembly_primitives: false,
    vertex_shader_invocations: false,
    geometry_shader_invocations: false,
    geometry_shader_primitives: false,
    clipping_invocations: false,
    clipping_primitives: false,
    fragment_shader_invocations: false,
    tessellation_control_shader_patches: false,
    tessellation_evaluation_shader_invocations: false,
    compute_shader_invocations: false,
};

impl VkDefault for VkQueryPipelineStatisticFlags {
    fn vk_default() -> VkQueryPipelineStatisticFlags {
        STATIC_VK_QUERY_PIPELINE_STATISTIC_FLAGS
    }
}