// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkQueryResultFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkQueryResultFlags {
    _64: bool,
    wait: bool,
    with_availability: bool,
    partial: bool,
}

impl VkRawType<VkQueryResultFlags> for RawVkQueryResultFlags {
    
    fn vk_to_wrapped(src: &RawVkQueryResultFlags) -> VkQueryResultFlags {
        VkQueryResultFlags {
            _64: (src & 0x00000001) != 0,
            wait: (src & 0x00000002) != 0,
            with_availability: (src & 0x00000004) != 0,
            partial: (src & 0x00000008) != 0,
        }
    }
}

impl VkWrappedType<RawVkQueryResultFlags> for VkQueryResultFlags {
    
    fn vk_to_raw(src: &VkQueryResultFlags, dst: &mut RawVkQueryResultFlags) {
        *dst = 0;
        if src._64 { *dst |= 0x00000001; }
        if src.wait { *dst |= 0x00000002; }
        if src.with_availability { *dst |= 0x00000004; }
        if src.partial { *dst |= 0x00000008; }
    }
}

impl VkDefault for VkQueryResultFlags {
    
    fn vk_default() -> VkQueryResultFlags {
        VkQueryResultFlags {
            _64: false,
            wait: false,
            with_availability: false,
            partial: false,
        }
    }
}