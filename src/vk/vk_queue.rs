// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::vec::Vec;
use std::ptr::null;
use libc::c_void;
use glfw::*;

pub type RawVkQueue = RawVkHandle;

#[derive(Debug)]
pub struct VkQueue {
    _handle: RawVkQueue,
}

impl VkQueue {
    
    pub fn handle(&self) -> RawVkQueue {
        self._handle
    }
    
    pub fn get(device: &VkDevice, queue_family_index: usize, queue_index: usize) -> VkQueue {
        unsafe {
            let device_handle = device.handle();
            vk_call_retrieve_single_unchecked(
                |ptr| vkGetDeviceQueue(device_handle, queue_family_index as u32, queue_index as u32, ptr),
                |queue : &mut VkQueue| {  }
            )
        }
    }
}

impl VkFrom<VkQueue> for RawVkQueue {
    
    fn vk_from(value: &VkQueue) -> Self {
        value._handle
    }
}

impl VkFrom<RawVkQueue> for VkQueue {
    
    fn vk_from(value: &RawVkQueue) -> Self {
        Self {
            _handle: *value,
        }
    }
}

extern {
    fn vkGetDeviceQueue(device: RawVkDevice, queue_family_index: u32, queue_index: u32, p_queue: *mut RawVkQueue);
}