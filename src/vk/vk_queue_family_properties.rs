// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ptr::null;
use libc::*;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RawVkQueueFamilyProperties {
    queue_flags: RawVkQueueFlags,
    queue_count: u32,
    timestamp_valid_bits: u32,
    min_image_transfer_granularity: RawVkExtent3D,
}

#[derive(Debug)]
pub struct VkQueueFamilyProperties {
    pub queue_flags: VkQueueFlags,
    pub queue_count: u32,
    pub timestamp_valid_bits: u32,
    pub min_image_transfer_granularity: VkExtent3D,
}

impl VkFrom<VkQueueFamilyProperties> for RawVkQueueFamilyProperties {
    
    fn vk_from(value: &VkQueueFamilyProperties) -> Self {
        Self {
            queue_flags: VkFrom::vk_from(&value.queue_flags),
            queue_count: value.queue_count,
            timestamp_valid_bits: value.timestamp_valid_bits,
            min_image_transfer_granularity: VkFrom::vk_from(&value.min_image_transfer_granularity),
        }
    }
}

impl VkFrom<RawVkQueueFamilyProperties> for VkQueueFamilyProperties {
    
    fn vk_from(value: &RawVkQueueFamilyProperties) -> Self {
        Self {
            queue_flags: VkFrom::vk_from(&value.queue_flags),
            queue_count: value.queue_count,
            timestamp_valid_bits: value.timestamp_valid_bits,
            min_image_transfer_granularity: VkFrom::vk_from(&value.min_image_transfer_granularity),
        }
    }
}