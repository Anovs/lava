// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_queue_family_properties::*;

#[repr(C)]
pub struct RawVkQueueFamilyProperties2 {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub queue_family_properties: RawVkQueueFamilyProperties,
}

#[derive(Debug, Clone)]
pub struct VkQueueFamilyProperties2 {
    pub queue_family_properties: VkQueueFamilyProperties,
}

impl VkRawType<VkQueueFamilyProperties2> for RawVkQueueFamilyProperties2 {
    fn vk_to_wrapped(src: &RawVkQueueFamilyProperties2) -> VkQueueFamilyProperties2 {
        VkQueueFamilyProperties2 {
            queue_family_properties: RawVkQueueFamilyProperties::vk_to_wrapped(&src.queue_family_properties),
        }
    }
}

impl VkWrappedType<RawVkQueueFamilyProperties2> for VkQueueFamilyProperties2 {
    fn vk_to_raw(src: &VkQueueFamilyProperties2, dst: &mut RawVkQueueFamilyProperties2) {
        dst.s_type = vk_to_raw_value(&VkStructureType::QueueFamilyProperties2);
        dst.next = ptr::null();
        dst.queue_family_properties = vk_to_raw_value(&src.queue_family_properties);
    }
}

impl Default for VkQueueFamilyProperties2 {
    fn default() -> VkQueueFamilyProperties2 {
        VkQueueFamilyProperties2 {
            queue_family_properties: VkQueueFamilyProperties::default(),
        }
    }
}

impl VkSetup for VkQueueFamilyProperties2 {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        VkSetup::vk_setup(&mut self.queue_family_properties, fn_table, instance, device);
    }
}

impl VkFree for RawVkQueueFamilyProperties2 {
    fn vk_free(&mut self) {
        RawVkQueueFamilyProperties::vk_free(&mut self.queue_family_properties);
    }
}