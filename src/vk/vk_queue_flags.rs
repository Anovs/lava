// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkQueueFlags = u32;

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkQueueFlags {
    pub graphics: bool,
    pub compute: bool,
    pub transfer: bool,
    pub sparse_binding: bool,
    pub protected: bool,
}

impl VkFrom<VkQueueFlags> for RawVkQueueFlags {
    
    fn vk_from(value: &VkQueueFlags) -> Self { {
            0
             + (if value.graphics { 0x00000001 } else { 0 })
             + (if value.compute { 0x00000002 } else { 0 })
             + (if value.transfer { 0x00000004 } else { 0 })
             + (if value.sparse_binding { 0x00000008 } else { 0 })
             + (if value.protected { 0x00000010 } else { 0 })
        }
    }
}

impl VkFrom<RawVkQueueFlags> for VkQueueFlags {
    
    fn vk_from(value: &RawVkQueueFlags) -> Self {
        Self {
            graphics: (value & 0x00000001) > 0,
            compute: (value & 0x00000002) > 0,
            transfer: (value & 0x00000004) > 0,
            sparse_binding: (value & 0x00000008) > 0,
            protected: (value & 0x00000010) > 0,
        }
    }
}