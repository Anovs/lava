// Generated by `scripts/generate_type.js`

use std::convert::From;

pub type RawVkQueueFlags = u32;

#[derive(Debug)]
pub struct VkQueueFlags {
    pub graphics: bool,
    pub compute: bool,
    pub transfer: bool,
    pub sparse_binding: bool,
    pub protected: bool
}

impl<'a> From<&'a u32> for VkQueueFlags {
    fn from(value: &'a u32) -> Self {
        VkQueueFlags {
            graphics: (value & 0x00000001) > 0,
            compute: (value & 0x00000002) > 0,
            transfer: (value & 0x00000004) > 0,
            sparse_binding: (value & 0x00000008) > 0,
            protected: (value & 0x00000010) > 0
        }
    }
}

impl<'a> From<&'a VkQueueFlags> for u32 {
    fn from(value: &'a VkQueueFlags) -> Self {
        if value.graphics { 0x00000001 } else { 0 } +
        if value.compute { 0x00000002 } else { 0 } +
        if value.transfer { 0x00000004 } else { 0 } +
        if value.sparse_binding { 0x00000008 } else { 0 } +
        if value.protected { 0x00000010 } else { 0 }
    }
}