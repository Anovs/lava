// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkQueueFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkQueueFlags {
    graphics: bool,
    compute: bool,
    transfer: bool,
    sparse_binding: bool,
    protected: bool,
}

impl VkRawType<VkQueueFlags> for RawVkQueueFlags {
    
    fn vk_to_wrapped(src: &RawVkQueueFlags) -> VkQueueFlags {
        VkQueueFlags {
            graphics: (src & 0x00000001) != 0,
            compute: (src & 0x00000002) != 0,
            transfer: (src & 0x00000004) != 0,
            sparse_binding: (src & 0x00000008) != 0,
            protected: (src & 0x00000010) != 0,
        }
    }
}

impl VkWrappedType<RawVkQueueFlags> for VkQueueFlags {
    
    fn vk_to_raw(src: &VkQueueFlags, dst: &mut RawVkQueueFlags) {
        *dst = 0;
        if src.graphics { *dst |= 0x00000001; }
        if src.compute { *dst |= 0x00000002; }
        if src.transfer { *dst |= 0x00000004; }
        if src.sparse_binding { *dst |= 0x00000008; }
        if src.protected { *dst |= 0x00000010; }
    }
    
    fn vk_default() -> VkQueueFlags {
        VkQueueFlags {
            graphics: false,
            compute: false,
            transfer: false,
            sparse_binding: false,
            protected: false,
        }
    }
}