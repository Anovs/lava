// Generated by `scripts/generate_vk.js`

use utils::c_bindings::*;
use utils::vk_traits::*;
use utils::vk_ptr::*;
use utils::vk_convert::*;
use std::os::raw::c_char;
use std::ptr;
use std::mem;
use std::cmp;
use vk::*;

pub type RawVkRenderPass = u64;

#[derive(Debug, Copy, Clone)]
pub struct VkRenderPass {
    _handle: RawVkRenderPass,
    _parent_instance: RawVkInstance,
    _parent_device: RawVkDevice,
    _fn_table: *mut VkInstanceFunctionTable
}

impl VkRawType<VkRenderPass> for RawVkRenderPass {
    fn vk_to_wrapped(src: &RawVkRenderPass) -> VkRenderPass {
        VkRenderPass {
            _handle: *src,
            _parent_instance: 0,
            _parent_device: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl VkWrappedType<RawVkRenderPass> for VkRenderPass {
    fn vk_to_raw(src: &VkRenderPass, dst: &mut RawVkRenderPass) {
        *dst = src._handle
    }
}

impl Default for VkRenderPass {
    fn default() -> VkRenderPass {
        VkRenderPass {
            _handle: 0,
            _parent_instance: 0,
            _parent_device: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl PartialEq for VkRenderPass {
    fn eq(&self, other: &VkRenderPass) -> bool {
        self._handle == other._handle
    }
}

impl VkSetup for VkRenderPass {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        self._parent_instance = instance;
        self._parent_device = device;
        self._fn_table = fn_table;
    }
}

impl VkRenderPass {
    
    pub fn handle(&self) -> u64 {
        self._handle
    }
    
    pub fn destroy(&self) {
        unsafe {
            ((&*self._fn_table).vkDestroyRenderPass)(self._parent_device, self._handle, ptr::null());
        }
    }
    
    pub fn get_render_area_granularity(&self) -> VkExtent2D {
        unsafe {
            let raw_granularity = &mut mem::zeroed() as *mut RawVkExtent2D;
            
            ((&*self._fn_table).vkGetRenderAreaGranularity)(self._parent_device, self._handle, raw_granularity);
            
            let mut granularity = new_vk_value(raw_granularity);
            let fn_table = self._fn_table;
            let parent_instance = self._parent_instance;
            let parent_device = self._parent_device;
            VkSetup::vk_setup(&mut granularity, fn_table, parent_instance, parent_device);
            RawVkExtent2D::vk_free(raw_granularity.as_mut().unwrap());
            granularity
        }
    }
}