// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkResult = i32;

#[repr(i32)]
#[derive(Debug, PartialEq, Copy, Clone)]
pub enum VkResult {
    Success = 0,
    NotReady = 1,
    Timeout = 2,
    EventSet = 3,
    EventReset = 4,
    Incomplete = 5,
    ErrorOutOfHostMemory = -1,
    ErrorOutOfDeviceMemory = -2,
    ErrorInitializationFailed = -3,
    ErrorDeviceLost = -4,
    ErrorMemoryMapFailed = -5,
    ErrorLayerNotPresent = -6,
    ErrorExtensionNotPresent = -7,
    ErrorFeatureNotPresent = -8,
    ErrorIncompatibleDriver = -9,
    ErrorTooManyObjects = -10,
    ErrorFormatNotSupported = -11,
    ErrorFragmentedPool = -12,
    ErrorOutOfPoolMemory = -1000069000,
    ErrorInvalidExternalHandle = -1000072003,
    ErrorSurfaceLost = -1000000000,
    ErrorNativeWindowInUse = -1000000001,
    Suboptimal = 1000001003,
    ErrorOutOfDate = -1000001004,
    ErrorIncompatibleDisplay = -1000003001,
    ErrorValidationFailed = -1000011001,
    ErrorInvalidShaderNv = -1000012000,
    ErrorFragmentation = -1000161000,
    ErrorNotPermitted = -1000174001,
}

impl VkFrom<VkResult> for RawVkResult {
    
    fn vk_from(value: &VkResult) -> Self {
        *value as i32
    }
}

impl VkFrom<RawVkResult> for VkResult {
    
    fn vk_from(value: &RawVkResult) -> Self {
        unsafe {
            *((value as *const i32) as *const VkResult)
        }
    }
}