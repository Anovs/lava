// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkSampleCountFlags = u32;

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkSampleCountFlags {
    pub bit1: bool,
    pub bit2: bool,
    pub bit4: bool,
    pub bit8: bool,
    pub bit16: bool,
    pub bit32: bool,
    pub bit64: bool,
}

impl VkFlags for VkSampleCountFlags {
    
    fn none() -> Self {
        Self {
            bit1: false,
            bit2: false,
            bit4: false,
            bit8: false,
            bit16: false,
            bit32: false,
            bit64: false,
        }
    }
    
    fn all() -> Self {
        Self {
            bit1: true,
            bit2: true,
            bit4: true,
            bit8: true,
            bit16: true,
            bit32: true,
            bit64: true,
        }
    }
}

impl VkFrom<VkSampleCountFlags> for RawVkSampleCountFlags {
    
    fn vk_from(value: &VkSampleCountFlags) -> Self { {
            0
            + (if value.bit1 { 0x00000001 } else { 0 })
            + (if value.bit2 { 0x00000002 } else { 0 })
            + (if value.bit4 { 0x00000004 } else { 0 })
            + (if value.bit8 { 0x00000008 } else { 0 })
            + (if value.bit16 { 0x00000010 } else { 0 })
            + (if value.bit32 { 0x00000020 } else { 0 })
            + (if value.bit64 { 0x00000040 } else { 0 })
        }
    }
}

impl VkFrom<RawVkSampleCountFlags> for VkSampleCountFlags {
    
    fn vk_from(value: &RawVkSampleCountFlags) -> Self {
        Self {
            bit1: (value & 0x00000001) != 0,
            bit2: (value & 0x00000002) != 0,
            bit4: (value & 0x00000004) != 0,
            bit8: (value & 0x00000008) != 0,
            bit16: (value & 0x00000010) != 0,
            bit32: (value & 0x00000020) != 0,
            bit64: (value & 0x00000040) != 0,
        }
    }
}