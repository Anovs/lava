// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::vec::Vec;
use std::ptr::null;
use libc::c_void;
use glfw::*;

pub type RawVkShaderModule = RawVkHandle;

#[derive(Debug)]
pub struct VkShaderModule {
    _handle: RawVkShaderModule,
    _device: RawVkDevice,
}

impl VkShaderModule {
    
    pub fn handle(&self) -> RawVkShaderModule {
        self._handle
    }
    
    pub fn new(device: &VkDevice, create_info: &VkShaderModuleCreateInfo) -> Result<VkShaderModule, VkResult> {
        unsafe {
            let device_handle = device.handle();
            let mut raw_create_info = RawVkShaderModuleCreateInfo::vk_from(create_info);
            let raw_create_info_ptr = &mut raw_create_info as *mut RawVkShaderModuleCreateInfo;
            vk_call_retrieve_single(
                |ptr| vkCreateShaderModule(device_handle, raw_create_info_ptr, null(), ptr),
                |shader_module : &mut VkShaderModule| { shader_module._device = device_handle; }
            )
        }
    }
}

impl VkFrom<VkShaderModule> for RawVkShaderModule {
    
    fn vk_from(value: &VkShaderModule) -> Self {
        value._handle
    }
}

impl VkFrom<RawVkShaderModule> for VkShaderModule {
    
    fn vk_from(value: &RawVkShaderModule) -> Self {
        Self {
            _handle: *value,
            _device: VK_NULL_HANDLE,
        }
    }
}

impl Drop for VkShaderModule {
    
    fn drop(&mut self) {
        unsafe {
            vkDestroyShaderModule(self._device, self._handle, null());
        }
    }
}

extern {
    fn vkDestroyShaderModule(device: RawVkDevice, shader_module: RawVkShaderModule, p_allocator: *const c_void);
    fn vkCreateShaderModule(device: RawVkDevice, p_create_info: *const RawVkShaderModuleCreateInfo, p_allocator: *const c_void, p_shader_module: *mut RawVkShaderModule)-> RawVkResult;
}