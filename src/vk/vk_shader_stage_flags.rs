// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkShaderStageFlags = u32;

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkShaderStageFlags {
    pub vertex: bool,
    pub tessellation_control: bool,
    pub tessellation_evaluation: bool,
    pub geometry: bool,
    pub fragment: bool,
    pub compute: bool,
    pub all_graphics: bool,
}

impl VkFlags for VkShaderStageFlags {
    
    fn none() -> Self {
        Self {
            vertex: false,
            tessellation_control: false,
            tessellation_evaluation: false,
            geometry: false,
            fragment: false,
            compute: false,
            all_graphics: false,
        }
    }
    
    fn all() -> Self {
        Self {
            vertex: true,
            tessellation_control: true,
            tessellation_evaluation: true,
            geometry: true,
            fragment: true,
            compute: true,
            all_graphics: true,
        }
    }
}

impl VkFrom<VkShaderStageFlags> for RawVkShaderStageFlags {
    
    fn vk_from(value: &VkShaderStageFlags) -> Self { {
            0
            + (if value.vertex { 0x00000001 } else { 0 })
            + (if value.tessellation_control { 0x00000002 } else { 0 })
            + (if value.tessellation_evaluation { 0x00000004 } else { 0 })
            + (if value.geometry { 0x00000008 } else { 0 })
            + (if value.fragment { 0x00000010 } else { 0 })
            + (if value.compute { 0x00000020 } else { 0 })
            + (if value.all_graphics { 0x0000001F } else { 0 })
        }
    }
}

impl VkFrom<RawVkShaderStageFlags> for VkShaderStageFlags {
    
    fn vk_from(value: &RawVkShaderStageFlags) -> Self {
        Self {
            vertex: (value & 0x00000001) != 0,
            tessellation_control: (value & 0x00000002) != 0,
            tessellation_evaluation: (value & 0x00000004) != 0,
            geometry: (value & 0x00000008) != 0,
            fragment: (value & 0x00000010) != 0,
            compute: (value & 0x00000020) != 0,
            all_graphics: (value & 0x0000001F) != 0,
        }
    }
}