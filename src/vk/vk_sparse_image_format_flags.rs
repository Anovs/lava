// Generated by `scripts/generate_vk.js`

use utils::vk_type::*;

pub type RawVkSparseImageFormatFlags = u32;

#[derive(Debug, Copy, Clone)]
pub struct VkSparseImageFormatFlags {
    single_miptail: bool,
    aligned_mip_size: bool,
    nonstandard_block_size: bool,
}

impl VkRawType<VkSparseImageFormatFlags> for RawVkSparseImageFormatFlags {
    fn vk_to_wrapped(src: &RawVkSparseImageFormatFlags) -> VkSparseImageFormatFlags {
        VkSparseImageFormatFlags {
            single_miptail: (src & 0x00000001) != 0,
            aligned_mip_size: (src & 0x00000002) != 0,
            nonstandard_block_size: (src & 0x00000004) != 0,
        }
    }
}

impl VkWrappedType<RawVkSparseImageFormatFlags> for VkSparseImageFormatFlags {
    fn vk_to_raw(src: &VkSparseImageFormatFlags, dst: &mut RawVkSparseImageFormatFlags) {
        *dst = 0;
        if src.single_miptail { *dst |= 0x00000001; }
        if src.aligned_mip_size { *dst |= 0x00000002; }
        if src.nonstandard_block_size { *dst |= 0x00000004; }
    }
}

pub static STATIC_VK_SPARSE_IMAGE_FORMAT_FLAGS : VkSparseImageFormatFlags = VkSparseImageFormatFlags {
    single_miptail: false,
    aligned_mip_size: false,
    nonstandard_block_size: false,
};

impl VkDefault for VkSparseImageFormatFlags {
    fn vk_default() -> VkSparseImageFormatFlags {
        STATIC_VK_SPARSE_IMAGE_FORMAT_FLAGS
    }
}