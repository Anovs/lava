// Generated by `scripts/generate_vk.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vk::vk_instance_function_table::*;
use vk::vk_instance::*;
use vk::vk_device::*;
use vk::vk_structure_type::*;
use vk::vk_semaphore::*;
use vk::vk_pipeline_stage_flags::*;
use vk::vk_command_buffer::*;

#[repr(C)]
pub struct RawVkSubmitInfo {
    s_type: RawVkStructureType,
    next: *const c_void,
    wait_semaphore_count: u32,
    wait_semaphores: *mut RawVkSemaphore,
    wait_dst_stage_mask: *mut RawVkPipelineStageFlags,
    command_buffer_count: u32,
    command_buffers: *mut RawVkCommandBuffer,
    signal_semaphore_count: u32,
    signal_semaphores: *mut RawVkSemaphore,
}

#[derive(Debug, Clone)]
pub struct VkSubmitInfo<'a, 'b, 'c, 'd> {
    pub wait_semaphores: &'a [VkSemaphore],
    pub wait_dst_stage_mask: &'b [VkPipelineStageFlags],
    pub command_buffers: &'c [VkCommandBuffer],
    pub signal_semaphores: &'d [VkSemaphore],
}

impl<'a, 'b, 'c, 'd> VkWrappedType<RawVkSubmitInfo> for VkSubmitInfo<'a, 'b, 'c, 'd> {
    fn vk_to_raw(src: &VkSubmitInfo, dst: &mut RawVkSubmitInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::SubmitInfo);
        dst.next = ptr::null();
        dst.wait_semaphore_count = cmp::max(src.wait_semaphores.len(), src.wait_dst_stage_mask.len()) as u32;
        dst.wait_semaphores = new_ptr_vk_array(src.wait_semaphores);
        dst.wait_dst_stage_mask = new_ptr_vk_array(src.wait_dst_stage_mask);
        dst.command_buffer_count = src.command_buffers.len() as u32;
        dst.command_buffers = new_ptr_vk_array(src.command_buffers);
        dst.signal_semaphore_count = src.signal_semaphores.len() as u32;
        dst.signal_semaphores = new_ptr_vk_array(src.signal_semaphores);
    }
}

impl Default for VkSubmitInfo<'static, 'static, 'static, 'static> {
    fn default() -> VkSubmitInfo<'static, 'static, 'static, 'static> {
        VkSubmitInfo {
            wait_semaphores: &[],
            wait_dst_stage_mask: &[],
            command_buffers: &[],
            signal_semaphores: &[],
        }
    }
}

impl<'a, 'b, 'c, 'd> VkSetup for VkSubmitInfo<'a, 'b, 'c, 'd> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkSubmitInfo {
    fn vk_free(&mut self) {
        free_ptr(self.wait_semaphores);
        free_ptr(self.wait_dst_stage_mask);
        free_ptr(self.command_buffers);
        free_ptr(self.signal_semaphores);
    }
}