// Generated by `scripts/generate_type.js`

use std::convert::From;
use vk::*;

#[repr(C)]
#[derive(Clone, Copy, Default)]
pub struct RawVkSurfaceCapabilities {
    min_image_count: u32,
    max_image_count: u32,
    current_extent: RawVkExtent2D,
    min_image_extent: RawVkExtent2D,
    max_image_extent: RawVkExtent2D,
    max_image_array_layers: u32,
    supported_transforms: RawVkSurfaceTransformFlags,
    current_transform: RawVkSurfaceTransformFlags,
    supported_composite_alpha: RawVkCompositeAlphaFlags,
    supported_usage_flags: RawVkImageUsageFlags
}

#[derive(Debug)]
pub struct VkSurfaceCapabilities {
    pub min_image_count: u32,
    pub max_image_count: u32,
    pub current_extent: VkExtent2D,
    pub min_image_extent: VkExtent2D,
    pub max_image_extent: VkExtent2D,
    pub max_image_array_layers: u32,
    pub supported_transforms: VkSurfaceTransformFlags,
    pub current_transform: VkSurfaceTransformFlags,
    pub supported_composite_alpha: VkCompositeAlphaFlags,
    pub supported_usage_flags: VkImageUsageFlags
}

impl<'a> From<&'a RawVkSurfaceCapabilities> for VkSurfaceCapabilities {
    fn from(value: &'a RawVkSurfaceCapabilities) -> Self {
        VkSurfaceCapabilities {
            min_image_count: value.min_image_count,
            max_image_count: value.max_image_count,
            current_extent: VkExtent2D::from(&value.current_extent),
            min_image_extent: VkExtent2D::from(&value.min_image_extent),
            max_image_extent: VkExtent2D::from(&value.max_image_extent),
            max_image_array_layers: value.max_image_array_layers,
            supported_transforms: VkSurfaceTransformFlags::from(&value.supported_transforms),
            current_transform: VkSurfaceTransformFlags::from(&value.current_transform),
            supported_composite_alpha: VkCompositeAlphaFlags::from(&value.supported_composite_alpha),
            supported_usage_flags: VkImageUsageFlags::from(&value.supported_usage_flags)
        }
    }
}

impl<'a> From<&'a VkSurfaceCapabilities> for RawVkSurfaceCapabilities {
    fn from(value: &'a VkSurfaceCapabilities) -> Self {
        RawVkSurfaceCapabilities {
            min_image_count: value.min_image_count,
            max_image_count: value.max_image_count,
            current_extent: RawVkExtent2D::from(&value.current_extent),
            min_image_extent: RawVkExtent2D::from(&value.min_image_extent),
            max_image_extent: RawVkExtent2D::from(&value.max_image_extent),
            max_image_array_layers: value.max_image_array_layers,
            supported_transforms: RawVkSurfaceTransformFlags::from(&value.supported_transforms),
            current_transform: RawVkSurfaceTransformFlags::from(&value.current_transform),
            supported_composite_alpha: RawVkCompositeAlphaFlags::from(&value.supported_composite_alpha),
            supported_usage_flags: RawVkImageUsageFlags::from(&value.supported_usage_flags)
        }
    }
}

