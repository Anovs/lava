// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ptr::null;
use libc::*;

#[repr(C)]
pub struct RawVkSurfaceCapabilities {
    min_image_count: u32,
    max_image_count: u32,
    current_extent: RawVkExtent2D,
    min_image_extent: RawVkExtent2D,
    max_image_extent: RawVkExtent2D,
    max_image_array_layers: u32,
    supported_transforms: RawVkSurfaceTransformFlags,
    current_transform: RawVkSurfaceTransformFlags,
    supported_composite_alpha: RawVkCompositeAlphaFlags,
    supported_usage_flags: RawVkImageUsageFlags,
}

#[derive(Debug)]
pub struct VkSurfaceCapabilities {
    pub min_image_count: u32,
    pub max_image_count: u32,
    pub current_extent: VkExtent2D,
    pub min_image_extent: VkExtent2D,
    pub max_image_extent: VkExtent2D,
    pub max_image_array_layers: u32,
    pub supported_transforms: VkSurfaceTransformFlags,
    pub current_transform: VkSurfaceTransformFlags,
    pub supported_composite_alpha: VkCompositeAlphaFlags,
    pub supported_usage_flags: VkImageUsageFlags,
}

impl VkFrom<VkSurfaceCapabilities> for RawVkSurfaceCapabilities {
    
    fn vk_from(value: &VkSurfaceCapabilities) -> Self {
        Self {
            min_image_count: value.min_image_count,
            max_image_count: value.max_image_count,
            current_extent: VkFrom::vk_from(&value.current_extent),
            min_image_extent: VkFrom::vk_from(&value.min_image_extent),
            max_image_extent: VkFrom::vk_from(&value.max_image_extent),
            max_image_array_layers: value.max_image_array_layers,
            supported_transforms: VkFrom::vk_from(&value.supported_transforms),
            current_transform: VkFrom::vk_from(&value.current_transform),
            supported_composite_alpha: VkFrom::vk_from(&value.supported_composite_alpha),
            supported_usage_flags: VkFrom::vk_from(&value.supported_usage_flags),
        }
    }
}

impl VkFrom<RawVkSurfaceCapabilities> for VkSurfaceCapabilities {
    
    fn vk_from(value: &RawVkSurfaceCapabilities) -> Self {
        Self {
            min_image_count: value.min_image_count,
            max_image_count: value.max_image_count,
            current_extent: VkFrom::vk_from(&value.current_extent),
            min_image_extent: VkFrom::vk_from(&value.min_image_extent),
            max_image_extent: VkFrom::vk_from(&value.max_image_extent),
            max_image_array_layers: value.max_image_array_layers,
            supported_transforms: VkFrom::vk_from(&value.supported_transforms),
            current_transform: VkFrom::vk_from(&value.current_transform),
            supported_composite_alpha: VkFrom::vk_from(&value.supported_composite_alpha),
            supported_usage_flags: VkFrom::vk_from(&value.supported_usage_flags),
        }
    }
}