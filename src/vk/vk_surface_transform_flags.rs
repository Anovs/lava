// Generated by `scripts/generate_type.js`

use std::convert::From;

pub type RawVkSurfaceTransformFlags = u32;

#[derive(Debug, Default, Copy, Clone)]
pub struct VkSurfaceTransformFlags {
    pub identity: bool,
    pub rotate_90: bool,
    pub rotate_180: bool,
    pub rotate_270: bool,
    pub horizontal_mirror: bool,
    pub horizontal_mirror_rotate_90: bool,
    pub horizontal_mirror_rotate_180: bool,
    pub horizontal_mirror_rotate_270: bool,
    pub inherit: bool
}

impl<'a> From<&'a u32> for VkSurfaceTransformFlags {
    fn from(value: &'a u32) -> Self {
        VkSurfaceTransformFlags {
            identity: (value & 0x00000001) > 0,
            rotate_90: (value & 0x00000002) > 0,
            rotate_180: (value & 0x00000004) > 0,
            rotate_270: (value & 0x00000008) > 0,
            horizontal_mirror: (value & 0x00000010) > 0,
            horizontal_mirror_rotate_90: (value & 0x00000020) > 0,
            horizontal_mirror_rotate_180: (value & 0x00000040) > 0,
            horizontal_mirror_rotate_270: (value & 0x00000080) > 0,
            inherit: (value & 0x00000100) > 0
        }
    }
}

impl<'a> From<&'a VkSurfaceTransformFlags> for u32 {
    fn from(value: &'a VkSurfaceTransformFlags) -> Self {
        (if value.identity { 0x00000001 } else { 0 }) +
        (if value.rotate_90 { 0x00000002 } else { 0 }) +
        (if value.rotate_180 { 0x00000004 } else { 0 }) +
        (if value.rotate_270 { 0x00000008 } else { 0 }) +
        (if value.horizontal_mirror { 0x00000010 } else { 0 }) +
        (if value.horizontal_mirror_rotate_90 { 0x00000020 } else { 0 }) +
        (if value.horizontal_mirror_rotate_180 { 0x00000040 } else { 0 }) +
        (if value.horizontal_mirror_rotate_270 { 0x00000080 } else { 0 }) +
        (if value.inherit { 0x00000100 } else { 0 })
    }
}

impl VkSurfaceTransformFlags {
    pub fn none() -> Self {
        VkSurfaceTransformFlags::default()
    }

    pub fn all() -> Self {
        VkSurfaceTransformFlags {
            identity: true,
            rotate_90: true,
            rotate_180: true,
            rotate_270: true,
            horizontal_mirror: true,
            horizontal_mirror_rotate_90: true,
            horizontal_mirror_rotate_180: true,
            horizontal_mirror_rotate_270: true,
            inherit: true
        }
    }
}