// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkSurfaceTransformFlags = u32;

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkSurfaceTransformFlags {
    pub identity: bool,
    pub rotate_90: bool,
    pub rotate_180: bool,
    pub rotate_270: bool,
    pub horizontal_mirror: bool,
    pub horizontal_mirror_rotate_90: bool,
    pub horizontal_mirror_rotate_180: bool,
    pub horizontal_mirror_rotate_270: bool,
    pub inherit: bool,
}

impl VkFlags for VkSurfaceTransformFlags {
    
    fn none() -> Self {
        Self {
            identity: false,
            rotate_90: false,
            rotate_180: false,
            rotate_270: false,
            horizontal_mirror: false,
            horizontal_mirror_rotate_90: false,
            horizontal_mirror_rotate_180: false,
            horizontal_mirror_rotate_270: false,
            inherit: false,
        }
    }
    
    fn all() -> Self {
        Self {
            identity: true,
            rotate_90: true,
            rotate_180: true,
            rotate_270: true,
            horizontal_mirror: true,
            horizontal_mirror_rotate_90: true,
            horizontal_mirror_rotate_180: true,
            horizontal_mirror_rotate_270: true,
            inherit: true,
        }
    }
}

impl VkFrom<VkSurfaceTransformFlags> for RawVkSurfaceTransformFlags {
    
    fn vk_from(value: &VkSurfaceTransformFlags) -> Self { {
            0
            + (if value.identity { 0x00000001 } else { 0 })
            + (if value.rotate_90 { 0x00000002 } else { 0 })
            + (if value.rotate_180 { 0x00000004 } else { 0 })
            + (if value.rotate_270 { 0x00000008 } else { 0 })
            + (if value.horizontal_mirror { 0x00000010 } else { 0 })
            + (if value.horizontal_mirror_rotate_90 { 0x00000020 } else { 0 })
            + (if value.horizontal_mirror_rotate_180 { 0x00000040 } else { 0 })
            + (if value.horizontal_mirror_rotate_270 { 0x00000080 } else { 0 })
            + (if value.inherit { 0x00000100 } else { 0 })
        }
    }
}

impl VkFrom<RawVkSurfaceTransformFlags> for VkSurfaceTransformFlags {
    
    fn vk_from(value: &RawVkSurfaceTransformFlags) -> Self {
        Self {
            identity: (value & 0x00000001) != 0,
            rotate_90: (value & 0x00000002) != 0,
            rotate_180: (value & 0x00000004) != 0,
            rotate_270: (value & 0x00000008) != 0,
            horizontal_mirror: (value & 0x00000010) != 0,
            horizontal_mirror_rotate_90: (value & 0x00000020) != 0,
            horizontal_mirror_rotate_180: (value & 0x00000040) != 0,
            horizontal_mirror_rotate_270: (value & 0x00000080) != 0,
            inherit: (value & 0x00000100) != 0,
        }
    }
}