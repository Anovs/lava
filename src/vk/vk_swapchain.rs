// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::vec::Vec;
use std::ptr::null;
use libc::c_void;
use glfw::*;

pub type RawVkSwapchain = RawVkHandle;

#[derive(Debug)]
pub struct VkSwapchain {
    _handle: RawVkSwapchain,
    _device: RawVkDevice,
}

impl VkSwapchain {
    
    pub fn handle(&self) -> RawVkSwapchain {
        self._handle
    }
    
    pub fn new(device: &VkDevice, create_info: &VkSwapchainCreateInfo) -> Result<VkSwapchain, VkResult> {
        unsafe {
            let device_handle = device.handle();
            let mut raw_create_info = RawVkSwapchainCreateInfo::vk_from(create_info);
            let raw_create_info_ptr = &mut raw_create_info as *mut RawVkSwapchainCreateInfo;
            vk_call_retrieve_single(
                |ptr| vkCreateSwapchainKHR(device_handle, raw_create_info_ptr, null(), ptr),
                |swapchain : &mut VkSwapchain| { swapchain._device = device_handle; }
            )
        }
    }
    
    pub fn get_images(&self) -> Result<Vec<VkImage>, VkResult> {
        unsafe {
            vk_call_retrieve_list(
                |count, ptr| vkGetSwapchainImagesKHR(self._device, self._handle, count, ptr),
                |image : &mut VkImage| {  }
            )
        }
    }
}

impl VkFrom<VkSwapchain> for RawVkSwapchain {
    
    fn vk_from(value: &VkSwapchain) -> Self {
        value._handle
    }
}

impl VkFrom<RawVkSwapchain> for VkSwapchain {
    
    fn vk_from(value: &RawVkSwapchain) -> Self {
        Self {
            _handle: *value,
            _device: VK_NULL_HANDLE,
        }
    }
}

impl Drop for VkSwapchain {
    
    fn drop(&mut self) {
        unsafe {
            vkDestroySwapchainKHR(self._device, self._handle, null());
        }
    }
}

extern {
    fn vkDestroySwapchainKHR(device: RawVkDevice, swapchain: RawVkSwapchain, p_allocator: *const c_void);
    fn vkCreateSwapchainKHR(device: RawVkDevice, p_create_info: *const RawVkSwapchainCreateInfo, p_allocator: *const c_void, p_swapchain: *mut RawVkSwapchain)-> RawVkResult;
    fn vkGetSwapchainImagesKHR(device: RawVkDevice, swapchain: RawVkSwapchain, p_swapchain_image_count: *mut u32, p_swapchain_images: *mut RawVkImage)-> RawVkResult;
}