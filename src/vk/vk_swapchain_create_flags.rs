// Generated by `scripts/generate_vk.js`

use vk::*;
use std::os::raw::c_char;

pub type RawVkSwapchainCreateFlags = u32;

#[derive(Debug)]
#[derive(Copy, Clone)]
pub struct VkSwapchainCreateFlags {
    pub split_instance_bind_regions: bool,
    pub protected: bool,
}

impl VkFlags for VkSwapchainCreateFlags {
    
    fn none() -> Self {
        Self {
            split_instance_bind_regions: false,
            protected: false,
        }
    }
    
    fn all() -> Self {
        Self {
            split_instance_bind_regions: true,
            protected: true,
        }
    }
}

impl VkFrom<VkSwapchainCreateFlags> for RawVkSwapchainCreateFlags {
    
    fn vk_from(value: &VkSwapchainCreateFlags) -> Self { {
            0
            + (if value.split_instance_bind_regions { 0x00000001 } else { 0 })
            + (if value.protected { 0x00000002 } else { 0 })
        }
    }
}

impl VkFrom<RawVkSwapchainCreateFlags> for VkSwapchainCreateFlags {
    
    fn vk_from(value: &RawVkSwapchainCreateFlags) -> Self {
        Self {
            split_instance_bind_regions: (value & 0x00000001) != 0,
            protected: (value & 0x00000002) != 0,
        }
    }
}