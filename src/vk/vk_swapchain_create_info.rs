// Template generated by `scripts/partial_generate_type.js`

use std::default::Default;
use std::convert::From;
use std::ops::Drop;
use std::vec::Vec;
use std::ptr;
use std::option::Option;
use libc::*;
use vk::*;

#[repr(C)]
pub struct RawVkSwapchainCreateInfo {
    s_type: VkStructureType,
    p_next: *const void,
    flags: RawVkSwapchainCreateFlags,
    surface: RawVkSurface,
    min_image_count: u32,
    image_format: RawVkFormat,
    image_color_space: RawVkColorSpace,
    image_extent: RawVkExtent2D,
    image_array_layers: u32,
    image_usage: RawVkImageUsageFlags,
    image_sharing_mode: RawVkSharingMode,
    queue_family_index_count: u32,
    p_queue_family_indices: *mut u32,
    pre_transform: RawVkSurfaceTransformFlags,
    composite_alpha: RawVkCompositeAlphaFlags,
    present_mode: RawVkPresentMode,
    clipped: u32,
    old_swapchain: RawVkSwapchain,
}

pub struct VkSwapchainCreateInfo<'a, 'b> {
    pub surface: &'a VkSurface,
    pub min_image_count: u32,
    pub image_format: VkFormat,
    pub image_color_space: VkColorSpace,
    pub image_extent: VkExtent2D,
    pub image_array_layers: u32,
    pub image_usage: VkImageUsageFlags,
    pub image_sharing_mode: VkSharingMode,
    pub queue_family_indices: Vec<usize>,
    pub pre_transform: VkSurfaceTransformFlags,
    pub composite_alpha: VkCompositeAlphaFlags,
    pub present_mode: VkPresentMode,
    pub clipped: bool,
    pub old_swapchain: Option<&'b VkSwapchain>
}

impl<'a, 'b, 'c> From<&'a VkSwapchainCreateInfo<'b, 'c>> for RawVkSwapchainCreateInfo {
    fn from(v: &'a VkSwapchainCreateInfo) -> Self {
        unsafe {
            RawVkSwapchainCreateInfo {
                s_type: VkStructureType::SwapchainCreateInfoKhr,
                p_next: ptr::null(),
                flags: 0,
                surface: v.surface.handle(),
                min_image_count: v.min_image_count,
                image_format: From::from(&v.image_format),
                image_color_space: From::from(&v.image_color_space),
                image_extent: From::from(&v.image_extent),
                image_array_layers: v.image_array_layers,
                image_usage: From::from(&v.image_usage),
                image_sharing_mode: From::from(&v.image_sharing_mode),
                queue_family_index_count: v.queue_family_indices.len() as u32,
                p_queue_family_indices: copy_as_c_array(&v.queue_family_indices.iter().map(|x| *x as u32).collect()),
                pre_transform: From::from(&v.pre_transform),
                composite_alpha: From::from(&v.composite_alpha),
                present_mode: From::from(&v.present_mode),
                clipped: to_vk_bool(v.clipped),
                old_swapchain: match v.old_swapchain {
                    Some(swapchain) => swapchain.handle(),
                    None => VK_NULL_HANDLE
                }
            }
        }
    }
}

impl Drop for RawVkSwapchainCreateInfo {
    fn drop(&mut self) {
        unsafe {
            free_c_array(self.p_queue_family_indices);
        }
    }
}