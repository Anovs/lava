// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkBuffer,RawVkBuffer};
use vulkan::ext::{VkConditionalRenderingFlags,RawVkConditionalRenderingFlags};

/// Wrapper for [VkConditionalRenderingBeginInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkConditionalRenderingBeginInfoEXT.html)
#[derive(Debug, Clone)]
pub struct VkConditionalRenderingBeginInfo<'a> {
    pub buffer: &'a VkBuffer,
    pub offset: usize,
    pub flags: VkConditionalRenderingFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkConditionalRenderingBeginInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub buffer: RawVkBuffer,
    pub offset: u64,
    pub flags: RawVkConditionalRenderingFlags,
}

impl<'a> VkWrappedType<RawVkConditionalRenderingBeginInfo> for VkConditionalRenderingBeginInfo<'a> {
    fn vk_to_raw(src: &VkConditionalRenderingBeginInfo, dst: &mut RawVkConditionalRenderingBeginInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::ConditionalRenderingBeginInfoExt);
        dst.next = ptr::null();
        dst.buffer = vk_to_raw_value(src.buffer);
        dst.offset = vk_to_raw_value(&src.offset);
        dst.flags = vk_to_raw_value(&src.flags);
    }
}

impl Default for VkConditionalRenderingBeginInfo<'static> {
    fn default() -> VkConditionalRenderingBeginInfo<'static> {
        VkConditionalRenderingBeginInfo {
            buffer: vk_null_ref(),
            offset: 0,
            flags: VkConditionalRenderingFlags::default(),
        }
    }
}

impl<'a> VkSetup for VkConditionalRenderingBeginInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkConditionalRenderingBeginInfo {
    fn vk_free(&mut self) {
        
    }
}