// Generated by `scripts/generate.js`

use utils::vk_traits::*;

/// Wrapper for [VkDebugUtilsMessageSeverityFlagBitsEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDebugUtilsMessageSeverityFlagBitsEXT.html)
///
/// Use the macro `VkDebugUtilsMessageSeverityFlags!` as an alternative method to create a structure. For example, these two snippets return the same value:
/// ```
/// VkDebugUtilsMessageSeverityFlags!(verbose, info)
/// ```
/// ```
/// VkDebugUtilsMessageSeverityFlags {
///     verbose: true,
///     info: true,
///     ..VkDebugUtilsMessageSeverityFlags::none()
/// }
/// ```
#[derive(Debug, Clone, Copy)]
pub struct VkDebugUtilsMessageSeverityFlags {
    pub verbose: bool,
    pub info: bool,
    pub warning: bool,
    pub error: bool,
}

#[doc(hidden)]
pub type RawVkDebugUtilsMessageSeverityFlags = u32;

impl VkWrappedType<RawVkDebugUtilsMessageSeverityFlags> for VkDebugUtilsMessageSeverityFlags {
    fn vk_to_raw(src: &VkDebugUtilsMessageSeverityFlags, dst: &mut RawVkDebugUtilsMessageSeverityFlags) {
        *dst = 0;
        if src.verbose { *dst |= 0x00000001; }
        if src.info { *dst |= 0x00000010; }
        if src.warning { *dst |= 0x00000100; }
        if src.error { *dst |= 0x00001000; }
    }
}

impl VkRawType<VkDebugUtilsMessageSeverityFlags> for RawVkDebugUtilsMessageSeverityFlags {
    fn vk_to_wrapped(src: &RawVkDebugUtilsMessageSeverityFlags) -> VkDebugUtilsMessageSeverityFlags {
        VkDebugUtilsMessageSeverityFlags {
            verbose: (src & 0x00000001) != 0,
            info: (src & 0x00000010) != 0,
            warning: (src & 0x00000100) != 0,
            error: (src & 0x00001000) != 0,
        }
    }
}

impl Default for VkDebugUtilsMessageSeverityFlags {
    fn default() -> VkDebugUtilsMessageSeverityFlags {
        VkDebugUtilsMessageSeverityFlags {
            verbose: false,
            info: false,
            warning: false,
            error: false,
        }
    }
}

impl VkDebugUtilsMessageSeverityFlags {
    
    /// Return a structure with all flags to `false`.
    pub fn none() -> Self {
        VkDebugUtilsMessageSeverityFlags {
            verbose: false,
            info: false,
            warning: false,
            error: false,
        }
    }
    
    /// Return a structure with all flags to `true`.
    pub fn all() -> Self {
        VkDebugUtilsMessageSeverityFlags {
            verbose: true,
            info: true,
            warning: true,
            error: true,
        }
    }
    
    /// Return the numerical bit flags corresponding to the structure (as described in the Vulkan specs).
    pub fn to_u32(&self) -> u32 {
        0
        + if self.verbose { 0x00000001 } else { 0 }
        + if self.info { 0x00000010 } else { 0 }
        + if self.warning { 0x00000100 } else { 0 }
        + if self.error { 0x00001000 } else { 0 }
    }
    
    /// Create a structure corresponding to the specified numerical bit flags.
    pub fn from_u32(value: u32) -> Self {
        VkDebugUtilsMessageSeverityFlags {
            verbose: value & 0x00000001 > 0,
            info: value & 0x00000010 > 0,
            warning: value & 0x00000100 > 0,
            error: value & 0x00001000 > 0,
        }
    }
}

#[doc(hidden)]
#[macro_export]
macro_rules! VkDebugUtilsMessageSeverityFlags {
    ( $( $x:ident ),* ) => {
        VkDebugUtilsMessageSeverityFlags {
            $($x: true,)*
            ..VkDebugUtilsMessageSeverityFlags::none()
        }
    }
}