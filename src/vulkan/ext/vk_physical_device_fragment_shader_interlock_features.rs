// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceFragmentShaderInterlockFeatures {
    pub fragment_shader_sample_interlock: bool,
    pub fragment_shader_pixel_interlock: bool,
    pub fragment_shader_shading_rate_interlock: bool,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceFragmentShaderInterlockFeatures {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub fragment_shader_sample_interlock: u32,
    pub fragment_shader_pixel_interlock: u32,
    pub fragment_shader_shading_rate_interlock: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceFragmentShaderInterlockFeatures> for VkPhysicalDeviceFragmentShaderInterlockFeatures {
    fn vk_to_raw(src: &VkPhysicalDeviceFragmentShaderInterlockFeatures, dst: &mut RawVkPhysicalDeviceFragmentShaderInterlockFeatures) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceFragmentShaderInterlockFeaturesExt);
        dst.next = ptr::null_mut();
        dst.fragment_shader_sample_interlock = vk_to_raw_value(&src.fragment_shader_sample_interlock);
        dst.fragment_shader_pixel_interlock = vk_to_raw_value(&src.fragment_shader_pixel_interlock);
        dst.fragment_shader_shading_rate_interlock = vk_to_raw_value(&src.fragment_shader_shading_rate_interlock);
    }
}

impl VkRawType<VkPhysicalDeviceFragmentShaderInterlockFeatures> for RawVkPhysicalDeviceFragmentShaderInterlockFeatures {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceFragmentShaderInterlockFeatures) -> VkPhysicalDeviceFragmentShaderInterlockFeatures {
        VkPhysicalDeviceFragmentShaderInterlockFeatures {
            fragment_shader_sample_interlock: u32::vk_to_wrapped(&src.fragment_shader_sample_interlock),
            fragment_shader_pixel_interlock: u32::vk_to_wrapped(&src.fragment_shader_pixel_interlock),
            fragment_shader_shading_rate_interlock: u32::vk_to_wrapped(&src.fragment_shader_shading_rate_interlock),
        }
    }
}

impl Default for VkPhysicalDeviceFragmentShaderInterlockFeatures {
    fn default() -> VkPhysicalDeviceFragmentShaderInterlockFeatures {
        VkPhysicalDeviceFragmentShaderInterlockFeatures {
            fragment_shader_sample_interlock: false,
            fragment_shader_pixel_interlock: false,
            fragment_shader_shading_rate_interlock: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceFragmentShaderInterlockFeatures {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceFragmentShaderInterlockFeatures {
    fn vk_free(&self) {
        
    }
}