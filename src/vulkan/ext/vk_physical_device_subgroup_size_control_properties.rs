// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkShaderStageFlags,RawVkShaderStageFlags};

/// Wrapper for [VkPhysicalDeviceSubgroupSizeControlPropertiesEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlProperties {
    pub min_subgroup_size: usize,
    pub max_subgroup_size: usize,
    pub max_compute_workgroup_subgroups: usize,
    pub required_subgroup_size_stages: VkShaderStageFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceSubgroupSizeControlProperties {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub min_subgroup_size: u32,
    pub max_subgroup_size: u32,
    pub max_compute_workgroup_subgroups: u32,
    pub required_subgroup_size_stages: RawVkShaderStageFlags,
}

impl VkWrappedType<RawVkPhysicalDeviceSubgroupSizeControlProperties> for VkPhysicalDeviceSubgroupSizeControlProperties {
    fn vk_to_raw(src: &VkPhysicalDeviceSubgroupSizeControlProperties, dst: &mut RawVkPhysicalDeviceSubgroupSizeControlProperties) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceSubgroupSizeControlPropertiesExt);
        dst.next = ptr::null_mut();
        dst.min_subgroup_size = vk_to_raw_value(&src.min_subgroup_size);
        dst.max_subgroup_size = vk_to_raw_value(&src.max_subgroup_size);
        dst.max_compute_workgroup_subgroups = vk_to_raw_value(&src.max_compute_workgroup_subgroups);
        dst.required_subgroup_size_stages = vk_to_raw_value(&src.required_subgroup_size_stages);
    }
}

impl VkRawType<VkPhysicalDeviceSubgroupSizeControlProperties> for RawVkPhysicalDeviceSubgroupSizeControlProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceSubgroupSizeControlProperties) -> VkPhysicalDeviceSubgroupSizeControlProperties {
        VkPhysicalDeviceSubgroupSizeControlProperties {
            min_subgroup_size: u32::vk_to_wrapped(&src.min_subgroup_size),
            max_subgroup_size: u32::vk_to_wrapped(&src.max_subgroup_size),
            max_compute_workgroup_subgroups: u32::vk_to_wrapped(&src.max_compute_workgroup_subgroups),
            required_subgroup_size_stages: RawVkShaderStageFlags::vk_to_wrapped(&src.required_subgroup_size_stages),
        }
    }
}

impl Default for VkPhysicalDeviceSubgroupSizeControlProperties {
    fn default() -> VkPhysicalDeviceSubgroupSizeControlProperties {
        VkPhysicalDeviceSubgroupSizeControlProperties {
            min_subgroup_size: 0,
            max_subgroup_size: 0,
            max_compute_workgroup_subgroups: 0,
            required_subgroup_size_stages: Default::default(),
        }
    }
}

impl VkSetup for VkPhysicalDeviceSubgroupSizeControlProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceSubgroupSizeControlProperties {
    fn vk_free(&self) {
        
    }
}