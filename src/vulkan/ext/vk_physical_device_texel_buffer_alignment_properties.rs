// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentProperties {
    pub storage_texel_buffer_offset_alignment_bytes: usize,
    pub storage_texel_buffer_offset_single_texel_alignment: bool,
    pub uniform_texel_buffer_offset_alignment_bytes: usize,
    pub uniform_texel_buffer_offset_single_texel_alignment: bool,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceTexelBufferAlignmentProperties {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub storage_texel_buffer_offset_alignment_bytes: u64,
    pub storage_texel_buffer_offset_single_texel_alignment: u32,
    pub uniform_texel_buffer_offset_alignment_bytes: u64,
    pub uniform_texel_buffer_offset_single_texel_alignment: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceTexelBufferAlignmentProperties> for VkPhysicalDeviceTexelBufferAlignmentProperties {
    fn vk_to_raw(src: &VkPhysicalDeviceTexelBufferAlignmentProperties, dst: &mut RawVkPhysicalDeviceTexelBufferAlignmentProperties) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceTexelBufferAlignmentPropertiesExt);
        dst.next = ptr::null_mut();
        dst.storage_texel_buffer_offset_alignment_bytes = vk_to_raw_value(&src.storage_texel_buffer_offset_alignment_bytes);
        dst.storage_texel_buffer_offset_single_texel_alignment = vk_to_raw_value(&src.storage_texel_buffer_offset_single_texel_alignment);
        dst.uniform_texel_buffer_offset_alignment_bytes = vk_to_raw_value(&src.uniform_texel_buffer_offset_alignment_bytes);
        dst.uniform_texel_buffer_offset_single_texel_alignment = vk_to_raw_value(&src.uniform_texel_buffer_offset_single_texel_alignment);
    }
}

impl VkRawType<VkPhysicalDeviceTexelBufferAlignmentProperties> for RawVkPhysicalDeviceTexelBufferAlignmentProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceTexelBufferAlignmentProperties) -> VkPhysicalDeviceTexelBufferAlignmentProperties {
        VkPhysicalDeviceTexelBufferAlignmentProperties {
            storage_texel_buffer_offset_alignment_bytes: u64::vk_to_wrapped(&src.storage_texel_buffer_offset_alignment_bytes),
            storage_texel_buffer_offset_single_texel_alignment: u32::vk_to_wrapped(&src.storage_texel_buffer_offset_single_texel_alignment),
            uniform_texel_buffer_offset_alignment_bytes: u64::vk_to_wrapped(&src.uniform_texel_buffer_offset_alignment_bytes),
            uniform_texel_buffer_offset_single_texel_alignment: u32::vk_to_wrapped(&src.uniform_texel_buffer_offset_single_texel_alignment),
        }
    }
}

impl Default for VkPhysicalDeviceTexelBufferAlignmentProperties {
    fn default() -> VkPhysicalDeviceTexelBufferAlignmentProperties {
        VkPhysicalDeviceTexelBufferAlignmentProperties {
            storage_texel_buffer_offset_alignment_bytes: 0,
            storage_texel_buffer_offset_single_texel_alignment: false,
            uniform_texel_buffer_offset_alignment_bytes: 0,
            uniform_texel_buffer_offset_single_texel_alignment: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceTexelBufferAlignmentProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceTexelBufferAlignmentProperties {
    fn vk_free(&self) {
        
    }
}