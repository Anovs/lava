// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::ext::{VkToolPurposeFlags,RawVkToolPurposeFlags};

/// Wrapper for [VkPhysicalDeviceToolPropertiesEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceToolPropertiesEXT.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceToolProperties {
    pub name: String,
    pub version: String,
    pub purposes: VkToolPurposeFlags,
    pub description: String,
    pub layer: String,
}

#[doc(hidden)]
#[repr(C)]
pub struct RawVkPhysicalDeviceToolProperties {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub name: [c_char; 256],
    pub version: [c_char; 256],
    pub purposes: RawVkToolPurposeFlags,
    pub description: [c_char; 256],
    pub layer: [c_char; 256],
}

impl VkRawType<VkPhysicalDeviceToolProperties> for RawVkPhysicalDeviceToolProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceToolProperties) -> VkPhysicalDeviceToolProperties {
        VkPhysicalDeviceToolProperties {
            name: new_string(&src.name[0] as *const c_char),
            version: new_string(&src.version[0] as *const c_char),
            purposes: RawVkToolPurposeFlags::vk_to_wrapped(&src.purposes),
            description: new_string(&src.description[0] as *const c_char),
            layer: new_string(&src.layer[0] as *const c_char),
        }
    }
}

impl VkSetup for VkPhysicalDeviceToolProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceToolProperties {
    fn vk_free(&self) {
        
    }
}