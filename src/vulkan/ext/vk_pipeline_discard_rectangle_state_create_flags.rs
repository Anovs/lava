// Generated by `scripts/generate.js`

use utils::vk_traits::*;

#[derive(Debug, Clone, Copy)]
pub struct VkPipelineDiscardRectangleStateCreateFlags {
    
}

pub type RawVkPipelineDiscardRectangleStateCreateFlags = u32;

impl VkWrappedType<RawVkPipelineDiscardRectangleStateCreateFlags> for VkPipelineDiscardRectangleStateCreateFlags {
    fn vk_to_raw(src: &VkPipelineDiscardRectangleStateCreateFlags, dst: &mut RawVkPipelineDiscardRectangleStateCreateFlags) {
        *dst = 0;
    }
}

impl VkRawType<VkPipelineDiscardRectangleStateCreateFlags> for RawVkPipelineDiscardRectangleStateCreateFlags {
    fn vk_to_wrapped(src: &RawVkPipelineDiscardRectangleStateCreateFlags) -> VkPipelineDiscardRectangleStateCreateFlags {
        VkPipelineDiscardRectangleStateCreateFlags {
            
        }
    }
}

impl Default for VkPipelineDiscardRectangleStateCreateFlags {
    fn default() -> VkPipelineDiscardRectangleStateCreateFlags {
        VkPipelineDiscardRectangleStateCreateFlags {
            
        }
    }
}

impl VkPipelineDiscardRectangleStateCreateFlags {
    
    pub fn none() -> VkPipelineDiscardRectangleStateCreateFlags {
        VkPipelineDiscardRectangleStateCreateFlags {
            
        }
    }
    
    pub fn all() -> VkPipelineDiscardRectangleStateCreateFlags {
        VkPipelineDiscardRectangleStateCreateFlags {
            
        }
    }
}

#[macro_export]
macro_rules! VkPipelineDiscardRectangleStateCreateFlags {
    ( $( $x:ident ),* ) => {
        VkPipelineDiscardRectangleStateCreateFlags {
            $($x: true,)*
            ..VkPipelineDiscardRectangleStateCreateFlags::none()
        }
    }
}

impl VkPipelineDiscardRectangleStateCreateFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
    }
}