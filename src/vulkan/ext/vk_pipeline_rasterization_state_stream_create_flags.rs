// Generated by `scripts/generate.js`

use utils::vk_traits::*;

#[derive(Debug, Clone, Copy)]
pub struct VkPipelineRasterizationStateStreamCreateFlags {
    
}

pub type RawVkPipelineRasterizationStateStreamCreateFlags = u32;

impl VkWrappedType<RawVkPipelineRasterizationStateStreamCreateFlags> for VkPipelineRasterizationStateStreamCreateFlags {
    fn vk_to_raw(src: &VkPipelineRasterizationStateStreamCreateFlags, dst: &mut RawVkPipelineRasterizationStateStreamCreateFlags) {
        *dst = 0;
    }
}

impl VkRawType<VkPipelineRasterizationStateStreamCreateFlags> for RawVkPipelineRasterizationStateStreamCreateFlags {
    fn vk_to_wrapped(src: &RawVkPipelineRasterizationStateStreamCreateFlags) -> VkPipelineRasterizationStateStreamCreateFlags {
        VkPipelineRasterizationStateStreamCreateFlags {
            
        }
    }
}

impl Default for VkPipelineRasterizationStateStreamCreateFlags {
    fn default() -> VkPipelineRasterizationStateStreamCreateFlags {
        VkPipelineRasterizationStateStreamCreateFlags {
            
        }
    }
}

impl VkPipelineRasterizationStateStreamCreateFlags {
    
    pub fn none() -> VkPipelineRasterizationStateStreamCreateFlags {
        VkPipelineRasterizationStateStreamCreateFlags {
            
        }
    }
    
    pub fn all() -> VkPipelineRasterizationStateStreamCreateFlags {
        VkPipelineRasterizationStateStreamCreateFlags {
            
        }
    }
}

#[macro_export]
macro_rules! VkPipelineRasterizationStateStreamCreateFlags {
    ( $( $x:ident ),* ) => {
        VkPipelineRasterizationStateStreamCreateFlags {
            $($x: true,)*
            ..VkPipelineRasterizationStateStreamCreateFlags::none()
        }
    }
}

impl VkPipelineRasterizationStateStreamCreateFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
    }
}