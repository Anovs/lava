// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkSampleCountFlags,RawVkSampleCountFlags};
use vulkan::vk::{VkExtent2D,RawVkExtent2D};
use vulkan::ext::{VkSampleLocation,RawVkSampleLocation};

/// Wrapper for [VkSampleLocationsInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSampleLocationsInfoEXT.html)
#[derive(Debug, Clone)]
pub struct VkSampleLocationsInfo<'a> {
    pub sample_locations_per_pixel: VkSampleCountFlags,
    pub sample_location_grid_size: VkExtent2D,
    pub sample_locations: &'a [VkSampleLocation],
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSampleLocationsInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub sample_locations_per_pixel: RawVkSampleCountFlags,
    pub sample_location_grid_size: RawVkExtent2D,
    pub sample_locations_count: u32,
    pub sample_locations: *mut RawVkSampleLocation,
}

impl<'a> VkWrappedType<RawVkSampleLocationsInfo> for VkSampleLocationsInfo<'a> {
    fn vk_to_raw(src: &VkSampleLocationsInfo, dst: &mut RawVkSampleLocationsInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::SampleLocationsInfoExt);
        dst.next = ptr::null();
        dst.sample_locations_per_pixel = vk_to_raw_value(&src.sample_locations_per_pixel);
        dst.sample_location_grid_size = vk_to_raw_value(&src.sample_location_grid_size);
        dst.sample_locations_count = src.sample_locations.len() as u32;
        dst.sample_locations = new_ptr_vk_array(src.sample_locations);
    }
}

impl Default for VkSampleLocationsInfo<'static> {
    fn default() -> VkSampleLocationsInfo<'static> {
        VkSampleLocationsInfo {
            sample_locations_per_pixel: VkSampleCountFlags::default(),
            sample_location_grid_size: VkExtent2D::default(),
            sample_locations: &[],
        }
    }
}

impl<'a> VkSetup for VkSampleLocationsInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        VkSetup::vk_setup(&mut self.sample_location_grid_size, fn_table, instance, device);
    }
}

impl VkFree for RawVkSampleLocationsInfo {
    fn vk_free(&mut self) {
        RawVkExtent2D::vk_free(&mut self.sample_location_grid_size);
        free_vk_ptr_array(self.sample_locations_count as usize, self.sample_locations);
    }
}