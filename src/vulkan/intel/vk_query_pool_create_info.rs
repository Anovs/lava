// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::intel::{VkQueryPoolSamplingMode,RawVkQueryPoolSamplingMode};

/// Wrapper for [VkQueryPoolCreateInfoINTEL](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkQueryPoolCreateInfoINTEL.html).
#[derive(Debug, Clone)]
pub struct VkQueryPoolCreateInfo {
    pub performance_counters_sampling: VkQueryPoolSamplingMode,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkQueryPoolCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub performance_counters_sampling: RawVkQueryPoolSamplingMode,
}

impl VkWrappedType<RawVkQueryPoolCreateInfo> for VkQueryPoolCreateInfo {
    fn vk_to_raw(src: &VkQueryPoolCreateInfo, dst: &mut RawVkQueryPoolCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::QueryPoolCreateInfoIntel);
        dst.next = ptr::null_mut();
        dst.performance_counters_sampling = vk_to_raw_value(&src.performance_counters_sampling);
    }
}

impl VkRawType<VkQueryPoolCreateInfo> for RawVkQueryPoolCreateInfo {
    fn vk_to_wrapped(src: &RawVkQueryPoolCreateInfo) -> VkQueryPoolCreateInfo {
        VkQueryPoolCreateInfo {
            performance_counters_sampling: RawVkQueryPoolSamplingMode::vk_to_wrapped(&src.performance_counters_sampling),
        }
    }
}

impl Default for VkQueryPoolCreateInfo {
    fn default() -> VkQueryPoolCreateInfo {
        VkQueryPoolCreateInfo {
            performance_counters_sampling: Default::default(),
        }
    }
}

impl VkSetup for VkQueryPoolCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkQueryPoolCreateInfo {
    fn vk_free(&self) {
        
    }
}