// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::khr::{VkTransformMatrix,RawVkTransformMatrix};
use vulkan::khr::{VkGeometryInstanceFlags,RawVkGeometryInstanceFlags};

/// Wrapper for [VkAccelerationStructureInstanceKHR](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureInstanceKHR.html).
#[derive(Debug, Clone)]
pub struct VkAccelerationStructureInstance {
    pub transform: VkTransformMatrix,
    pub instance_custom_index: usize,
    pub mask: u32,
    pub instance_shader_binding_table_record_offset: usize,
    pub flags: VkGeometryInstanceFlags,
    pub acceleration_structure_reference: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkAccelerationStructureInstance {
    pub transform: RawVkTransformMatrix,
    pub instance_custom_index: u32,
    pub mask: u32,
    pub instance_shader_binding_table_record_offset: u32,
    pub flags: RawVkGeometryInstanceFlags,
    pub acceleration_structure_reference: u64,
}

impl VkWrappedType<RawVkAccelerationStructureInstance> for VkAccelerationStructureInstance {
    fn vk_to_raw(src: &VkAccelerationStructureInstance, dst: &mut RawVkAccelerationStructureInstance) {
        dst.transform = vk_to_raw_value(&src.transform);
        dst.instance_custom_index = vk_to_raw_value(&src.instance_custom_index);
        dst.mask = src.mask;
        dst.instance_shader_binding_table_record_offset = vk_to_raw_value(&src.instance_shader_binding_table_record_offset);
        dst.flags = vk_to_raw_value(&src.flags);
        dst.acceleration_structure_reference = vk_to_raw_value(&src.acceleration_structure_reference);
    }
}

impl VkRawType<VkAccelerationStructureInstance> for RawVkAccelerationStructureInstance {
    fn vk_to_wrapped(src: &RawVkAccelerationStructureInstance) -> VkAccelerationStructureInstance {
        VkAccelerationStructureInstance {
            transform: RawVkTransformMatrix::vk_to_wrapped(&src.transform),
            instance_custom_index: u32::vk_to_wrapped(&src.instance_custom_index),
            mask: src.mask,
            instance_shader_binding_table_record_offset: u32::vk_to_wrapped(&src.instance_shader_binding_table_record_offset),
            flags: RawVkGeometryInstanceFlags::vk_to_wrapped(&src.flags),
            acceleration_structure_reference: u64::vk_to_wrapped(&src.acceleration_structure_reference),
        }
    }
}

impl Default for VkAccelerationStructureInstance {
    fn default() -> VkAccelerationStructureInstance {
        VkAccelerationStructureInstance {
            transform: Default::default(),
            instance_custom_index: 0,
            mask: 0,
            instance_shader_binding_table_record_offset: 0,
            flags: Default::default(),
            acceleration_structure_reference: 0,
        }
    }
}

impl VkSetup for VkAccelerationStructureInstance {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.transform, fn_table);
    }
}

impl VkFree for RawVkAccelerationStructureInstance {
    fn vk_free(&self) {
        
    }
}