// Generated by `scripts/generate.js`

use utils::vk_traits::*;

#[derive(Debug, Clone, Copy)]
pub struct VkDisplayPlaneAlphaFlags {
    pub opaque: bool,
    pub global: bool,
    pub per_pixel: bool,
    pub per_pixel_premultiplied: bool,
}

pub type RawVkDisplayPlaneAlphaFlags = u32;

impl VkWrappedType<RawVkDisplayPlaneAlphaFlags> for VkDisplayPlaneAlphaFlags {
    fn vk_to_raw(src: &VkDisplayPlaneAlphaFlags, dst: &mut RawVkDisplayPlaneAlphaFlags) {
        *dst = 0;
        if src.opaque { *dst |= 0x00000001; }
        if src.global { *dst |= 0x00000002; }
        if src.per_pixel { *dst |= 0x00000004; }
        if src.per_pixel_premultiplied { *dst |= 0x00000008; }
    }
}

impl VkRawType<VkDisplayPlaneAlphaFlags> for RawVkDisplayPlaneAlphaFlags {
    fn vk_to_wrapped(src: &RawVkDisplayPlaneAlphaFlags) -> VkDisplayPlaneAlphaFlags {
        VkDisplayPlaneAlphaFlags {
            opaque: (src & 0x00000001) != 0,
            global: (src & 0x00000002) != 0,
            per_pixel: (src & 0x00000004) != 0,
            per_pixel_premultiplied: (src & 0x00000008) != 0,
        }
    }
}

impl Default for VkDisplayPlaneAlphaFlags {
    fn default() -> VkDisplayPlaneAlphaFlags {
        VkDisplayPlaneAlphaFlags {
            opaque: false,
            global: false,
            per_pixel: false,
            per_pixel_premultiplied: false,
        }
    }
}

impl VkDisplayPlaneAlphaFlags {
    
    pub fn none() -> VkDisplayPlaneAlphaFlags {
        VkDisplayPlaneAlphaFlags {
            opaque: false,
            global: false,
            per_pixel: false,
            per_pixel_premultiplied: false,
        }
    }
    
    pub fn all() -> VkDisplayPlaneAlphaFlags {
        VkDisplayPlaneAlphaFlags {
            opaque: true,
            global: true,
            per_pixel: true,
            per_pixel_premultiplied: true,
        }
    }
}

#[macro_export]
macro_rules! VkDisplayPlaneAlphaFlags {
    ( $( $x:ident ),* ) => {
        VkDisplayPlaneAlphaFlags {
            $($x: true,)*
            ..VkDisplayPlaneAlphaFlags::none()
        }
    }
}

impl VkDisplayPlaneAlphaFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.opaque { 0x00000001 } else { 0 }
        + if self.global { 0x00000002 } else { 0 }
        + if self.per_pixel { 0x00000004 } else { 0 }
        + if self.per_pixel_premultiplied { 0x00000008 } else { 0 }
    }
}