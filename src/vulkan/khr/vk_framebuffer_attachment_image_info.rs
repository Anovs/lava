// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkImageCreateFlags,RawVkImageCreateFlags};
use vulkan::vk::{VkImageUsageFlags,RawVkImageUsageFlags};
use vulkan::vk::{VkFormat,RawVkFormat};

/// Wrapper for [VkFramebufferAttachmentImageInfoKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkFramebufferAttachmentImageInfoKHR.html).
#[derive(Debug, Clone)]
pub struct VkFramebufferAttachmentImageInfo {
    pub flags: VkImageCreateFlags,
    pub usage: VkImageUsageFlags,
    pub width: usize,
    pub height: usize,
    pub layer_count: usize,
    pub view_formats: Vec<VkFormat>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkFramebufferAttachmentImageInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkImageCreateFlags,
    pub usage: RawVkImageUsageFlags,
    pub width: u32,
    pub height: u32,
    pub layer_count: u32,
    pub view_format_count: u32,
    pub view_formats: *mut RawVkFormat,
}

impl VkWrappedType<RawVkFramebufferAttachmentImageInfo> for VkFramebufferAttachmentImageInfo {
    fn vk_to_raw(src: &VkFramebufferAttachmentImageInfo, dst: &mut RawVkFramebufferAttachmentImageInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::FramebufferAttachmentImageInfoKhr);
        dst.next = ptr::null_mut();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.usage = vk_to_raw_value(&src.usage);
        dst.width = vk_to_raw_value(&src.width);
        dst.height = vk_to_raw_value(&src.height);
        dst.layer_count = vk_to_raw_value(&src.layer_count);
        dst.view_format_count = src.view_formats.len() as u32;
        dst.view_formats = new_ptr_vk_array(&src.view_formats);
    }
}

impl VkRawType<VkFramebufferAttachmentImageInfo> for RawVkFramebufferAttachmentImageInfo {
    fn vk_to_wrapped(src: &RawVkFramebufferAttachmentImageInfo) -> VkFramebufferAttachmentImageInfo {
        VkFramebufferAttachmentImageInfo {
            flags: RawVkImageCreateFlags::vk_to_wrapped(&src.flags),
            usage: RawVkImageUsageFlags::vk_to_wrapped(&src.usage),
            width: u32::vk_to_wrapped(&src.width),
            height: u32::vk_to_wrapped(&src.height),
            layer_count: u32::vk_to_wrapped(&src.layer_count),
            view_formats: new_vk_array(src.view_format_count, src.view_formats),
        }
    }
}

impl Default for VkFramebufferAttachmentImageInfo {
    fn default() -> VkFramebufferAttachmentImageInfo {
        VkFramebufferAttachmentImageInfo {
            flags: Default::default(),
            usage: Default::default(),
            width: 0,
            height: 0,
            layer_count: 0,
            view_formats: Vec::new(),
        }
    }
}

impl VkSetup for VkFramebufferAttachmentImageInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkFramebufferAttachmentImageInfo {
    fn vk_free(&self) {
        free_ptr(self.view_formats);
    }
}