// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::khr::{VkPerformanceCounterDescriptionFlags,RawVkPerformanceCounterDescriptionFlags};

/// Wrapper for [VkPerformanceCounterDescriptionKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPerformanceCounterDescriptionKHR.html).
#[derive(Debug, Clone)]
pub struct VkPerformanceCounterDescription {
    pub flags: VkPerformanceCounterDescriptionFlags,
    pub name: String,
    pub category: String,
    pub description: String,
}

#[doc(hidden)]
#[repr(C)]
pub struct RawVkPerformanceCounterDescription {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkPerformanceCounterDescriptionFlags,
    pub name: [c_char; 256],
    pub category: [c_char; 256],
    pub description: [c_char; 256],
}

impl VkRawType<VkPerformanceCounterDescription> for RawVkPerformanceCounterDescription {
    fn vk_to_wrapped(src: &RawVkPerformanceCounterDescription) -> VkPerformanceCounterDescription {
        VkPerformanceCounterDescription {
            flags: RawVkPerformanceCounterDescriptionFlags::vk_to_wrapped(&src.flags),
            name: new_string(&src.name[0] as *const c_char),
            category: new_string(&src.category[0] as *const c_char),
            description: new_string(&src.description[0] as *const c_char),
        }
    }
}

impl VkSetup for VkPerformanceCounterDescription {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPerformanceCounterDescription {
    fn vk_free(&self) {
        
    }
}