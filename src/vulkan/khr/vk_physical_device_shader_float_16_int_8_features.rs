// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkPhysicalDeviceShaderFloat16Int8FeaturesKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceShaderFloat16Int8Features {
    pub shader_float_16: bool,
    pub shader_int_8: bool,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceShaderFloat16Int8Features {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub shader_float_16: u32,
    pub shader_int_8: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceShaderFloat16Int8Features> for VkPhysicalDeviceShaderFloat16Int8Features {
    fn vk_to_raw(src: &VkPhysicalDeviceShaderFloat16Int8Features, dst: &mut RawVkPhysicalDeviceShaderFloat16Int8Features) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceShaderFloat16Int8FeaturesKhr);
        dst.next = ptr::null_mut();
        dst.shader_float_16 = vk_to_raw_value(&src.shader_float_16);
        dst.shader_int_8 = vk_to_raw_value(&src.shader_int_8);
    }
}

impl VkRawType<VkPhysicalDeviceShaderFloat16Int8Features> for RawVkPhysicalDeviceShaderFloat16Int8Features {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceShaderFloat16Int8Features) -> VkPhysicalDeviceShaderFloat16Int8Features {
        VkPhysicalDeviceShaderFloat16Int8Features {
            shader_float_16: u32::vk_to_wrapped(&src.shader_float_16),
            shader_int_8: u32::vk_to_wrapped(&src.shader_int_8),
        }
    }
}

impl Default for VkPhysicalDeviceShaderFloat16Int8Features {
    fn default() -> VkPhysicalDeviceShaderFloat16Int8Features {
        VkPhysicalDeviceShaderFloat16Int8Features {
            shader_float_16: false,
            shader_int_8: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceShaderFloat16Int8Features {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceShaderFloat16Int8Features {
    fn vk_free(&self) {
        
    }
}