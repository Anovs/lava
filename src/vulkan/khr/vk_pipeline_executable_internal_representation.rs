// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkPipelineExecutableInternalRepresentationKHR](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineExecutableInternalRepresentationKHR.html).
#[derive(Debug, Clone)]
pub struct VkPipelineExecutableInternalRepresentation<'a> {
    pub name: String,
    pub description: String,
    pub is_text: bool,
    pub data: &'a [c_void],
}

#[doc(hidden)]
#[repr(C)]
pub struct RawVkPipelineExecutableInternalRepresentation {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub name: [c_char; 256],
    pub description: [c_char; 256],
    pub is_text: u32,
    pub data_size: usize,
    pub data: *mut c_void,
}

impl<'a> VkRawType<VkPipelineExecutableInternalRepresentation<'a>> for RawVkPipelineExecutableInternalRepresentation {
    fn vk_to_wrapped(src: &RawVkPipelineExecutableInternalRepresentation) -> VkPipelineExecutableInternalRepresentation<'a> {
        VkPipelineExecutableInternalRepresentation {
            name: new_string(&src.name[0] as *const c_char),
            description: new_string(&src.description[0] as *const c_char),
            is_text: u32::vk_to_wrapped(&src.is_text),
            data: slice_from_ptr(src.data_size as usize, src.data),
        }
    }
}

impl<'a> VkSetup for VkPipelineExecutableInternalRepresentation<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPipelineExecutableInternalRepresentation {
    fn vk_free(&self) {
        
    }
}