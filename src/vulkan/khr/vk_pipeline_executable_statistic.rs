// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::khr::{VkPipelineExecutableStatisticFormat,RawVkPipelineExecutableStatisticFormat};
use vulkan::khr::{VkPipelineExecutableStatisticValue,RawVkPipelineExecutableStatisticValue};

/// Wrapper for [VkPipelineExecutableStatisticKHR](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineExecutableStatisticKHR.html).
#[derive(Debug, Clone)]
pub struct VkPipelineExecutableStatistic {
    pub name: String,
    pub description: String,
    pub format: VkPipelineExecutableStatisticFormat,
    pub value: VkPipelineExecutableStatisticValue,
}

#[doc(hidden)]
#[repr(C)]
pub struct RawVkPipelineExecutableStatistic {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub name: [c_char; 256],
    pub description: [c_char; 256],
    pub format: RawVkPipelineExecutableStatisticFormat,
    pub value: RawVkPipelineExecutableStatisticValue,
}

impl VkRawType<VkPipelineExecutableStatistic> for RawVkPipelineExecutableStatistic {
    fn vk_to_wrapped(src: &RawVkPipelineExecutableStatistic) -> VkPipelineExecutableStatistic {
        VkPipelineExecutableStatistic {
            name: new_string(&src.name[0] as *const c_char),
            description: new_string(&src.description[0] as *const c_char),
            format: RawVkPipelineExecutableStatisticFormat::vk_to_wrapped(&src.format),
            value: RawVkPipelineExecutableStatisticValue::vk_to_wrapped(&src.value),
        }
    }
}

impl VkSetup for VkPipelineExecutableStatistic {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPipelineExecutableStatistic {
    fn vk_free(&self) {
        
    }
}