// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkPipeline,RawVkPipeline};

/// Wrapper for [VkPipelineInfoKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPipelineInfoKHR.html).
#[derive(Debug, Clone)]
pub struct VkPipelineInfo {
    pub pipeline: VkPipeline,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPipelineInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub pipeline: RawVkPipeline,
}

impl VkWrappedType<RawVkPipelineInfo> for VkPipelineInfo {
    fn vk_to_raw(src: &VkPipelineInfo, dst: &mut RawVkPipelineInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineInfoKhr);
        dst.next = ptr::null_mut();
        dst.pipeline = vk_to_raw_value(&src.pipeline);
    }
}

impl VkRawType<VkPipelineInfo> for RawVkPipelineInfo {
    fn vk_to_wrapped(src: &RawVkPipelineInfo) -> VkPipelineInfo {
        VkPipelineInfo {
            pipeline: RawVkPipeline::vk_to_wrapped(&src.pipeline),
        }
    }
}

impl Default for VkPipelineInfo {
    fn default() -> VkPipelineInfo {
        VkPipelineInfo {
            pipeline: Default::default(),
        }
    }
}

impl VkSetup for VkPipelineInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.pipeline, fn_table);
    }
}

impl VkFree for RawVkPipelineInfo {
    fn vk_free(&self) {
        
    }
}