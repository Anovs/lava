// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::khr::{VkSemaphoreType,RawVkSemaphoreType};

/// Wrapper for [VkSemaphoreTypeCreateInfoKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSemaphoreTypeCreateInfoKHR.html).
#[derive(Debug, Clone)]
pub struct VkSemaphoreTypeCreateInfo {
    pub semaphore_type: VkSemaphoreType,
    pub initial_value: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSemaphoreTypeCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub semaphore_type: RawVkSemaphoreType,
    pub initial_value: u64,
}

impl VkWrappedType<RawVkSemaphoreTypeCreateInfo> for VkSemaphoreTypeCreateInfo {
    fn vk_to_raw(src: &VkSemaphoreTypeCreateInfo, dst: &mut RawVkSemaphoreTypeCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::SemaphoreTypeCreateInfoKhr);
        dst.next = ptr::null_mut();
        dst.semaphore_type = vk_to_raw_value(&src.semaphore_type);
        dst.initial_value = vk_to_raw_value(&src.initial_value);
    }
}

impl VkRawType<VkSemaphoreTypeCreateInfo> for RawVkSemaphoreTypeCreateInfo {
    fn vk_to_wrapped(src: &RawVkSemaphoreTypeCreateInfo) -> VkSemaphoreTypeCreateInfo {
        VkSemaphoreTypeCreateInfo {
            semaphore_type: RawVkSemaphoreType::vk_to_wrapped(&src.semaphore_type),
            initial_value: u64::vk_to_wrapped(&src.initial_value),
        }
    }
}

impl Default for VkSemaphoreTypeCreateInfo {
    fn default() -> VkSemaphoreTypeCreateInfo {
        VkSemaphoreTypeCreateInfo {
            semaphore_type: Default::default(),
            initial_value: 0,
        }
    }
}

impl VkSetup for VkSemaphoreTypeCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkSemaphoreTypeCreateInfo {
    fn vk_free(&self) {
        
    }
}