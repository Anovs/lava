// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::khr::{VkSemaphoreWaitFlags,RawVkSemaphoreWaitFlags};
use vulkan::vk::{VkSemaphore,RawVkSemaphore};

/// Wrapper for [VkSemaphoreWaitInfoKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSemaphoreWaitInfoKHR.html).
#[derive(Debug, Clone)]
pub struct VkSemaphoreWaitInfo {
    pub flags: VkSemaphoreWaitFlags,
    pub semaphores: Vec<VkSemaphore>,
    pub values: Vec<usize>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSemaphoreWaitInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkSemaphoreWaitFlags,
    pub semaphore_count: u32,
    pub semaphores: *mut RawVkSemaphore,
    pub values: *mut u64,
}

impl VkWrappedType<RawVkSemaphoreWaitInfo> for VkSemaphoreWaitInfo {
    fn vk_to_raw(src: &VkSemaphoreWaitInfo, dst: &mut RawVkSemaphoreWaitInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::SemaphoreWaitInfoKhr);
        dst.next = ptr::null_mut();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.semaphore_count = cmp::max(src.semaphores.len(), src.values.len()) as u32;
        dst.semaphores = new_ptr_vk_array(&src.semaphores);
        dst.values = new_ptr_vk_array(&src.values);
    }
}

impl VkRawType<VkSemaphoreWaitInfo> for RawVkSemaphoreWaitInfo {
    fn vk_to_wrapped(src: &RawVkSemaphoreWaitInfo) -> VkSemaphoreWaitInfo {
        VkSemaphoreWaitInfo {
            flags: RawVkSemaphoreWaitFlags::vk_to_wrapped(&src.flags),
            semaphores: new_vk_array(src.semaphore_count, src.semaphores),
            values: new_vk_array(src.semaphore_count, src.values),
        }
    }
}

impl Default for VkSemaphoreWaitInfo {
    fn default() -> VkSemaphoreWaitInfo {
        VkSemaphoreWaitInfo {
            flags: Default::default(),
            semaphores: Vec::new(),
            values: Vec::new(),
        }
    }
}

impl VkSetup for VkSemaphoreWaitInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkSemaphoreWaitInfo {
    fn vk_free(&self) {
        free_ptr(self.semaphores);
        free_ptr(self.values);
    }
}