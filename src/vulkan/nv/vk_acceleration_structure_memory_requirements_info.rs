// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::nv::{VkAccelerationStructureMemoryRequirementsType,RawVkAccelerationStructureMemoryRequirementsType};
use vulkan::nv::{VkAccelerationStructure,RawVkAccelerationStructure};

/// Wrapper for [VkAccelerationStructureMemoryRequirementsInfoNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkAccelerationStructureMemoryRequirementsInfoNV.html).
#[derive(Debug, Clone)]
pub struct VkAccelerationStructureMemoryRequirementsInfo<'a> {
    pub type_: VkAccelerationStructureMemoryRequirementsType,
    pub acceleration_structure: &'a VkAccelerationStructure,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkAccelerationStructureMemoryRequirementsInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub type_: RawVkAccelerationStructureMemoryRequirementsType,
    pub acceleration_structure: RawVkAccelerationStructure,
}

impl<'a> VkWrappedType<RawVkAccelerationStructureMemoryRequirementsInfo> for VkAccelerationStructureMemoryRequirementsInfo<'a> {
    fn vk_to_raw(src: &VkAccelerationStructureMemoryRequirementsInfo, dst: &mut RawVkAccelerationStructureMemoryRequirementsInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::AccelerationStructureMemoryRequirementsInfoNv);
        dst.next = ptr::null();
        dst.type_ = vk_to_raw_value(&src.type_);
        dst.acceleration_structure = vk_to_raw_value(src.acceleration_structure);
    }
}

impl Default for VkAccelerationStructureMemoryRequirementsInfo<'static> {
    fn default() -> VkAccelerationStructureMemoryRequirementsInfo<'static> {
        VkAccelerationStructureMemoryRequirementsInfo {
            type_: VkAccelerationStructureMemoryRequirementsType::default(),
            acceleration_structure: vk_null_ref(),
        }
    }
}

impl<'a> VkSetup for VkAccelerationStructureMemoryRequirementsInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkAccelerationStructureMemoryRequirementsInfo {
    fn vk_free(&mut self) {
        
    }
}