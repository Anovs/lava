// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkIndexType,RawVkIndexType};

/// Wrapper for [VkBindIndexBufferIndirectCommandNV](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindIndexBufferIndirectCommandNV.html).
#[derive(Debug, Clone)]
pub struct VkBindIndexBufferIndirectCommand {
    pub buffer_address: u64,
    pub size: usize,
    pub index_type: VkIndexType,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkBindIndexBufferIndirectCommand {
    pub buffer_address: u64,
    pub size: u32,
    pub index_type: RawVkIndexType,
}

impl VkWrappedType<RawVkBindIndexBufferIndirectCommand> for VkBindIndexBufferIndirectCommand {
    fn vk_to_raw(src: &VkBindIndexBufferIndirectCommand, dst: &mut RawVkBindIndexBufferIndirectCommand) {
        dst.buffer_address = src.buffer_address;
        dst.size = vk_to_raw_value(&src.size);
        dst.index_type = vk_to_raw_value(&src.index_type);
    }
}

impl VkRawType<VkBindIndexBufferIndirectCommand> for RawVkBindIndexBufferIndirectCommand {
    fn vk_to_wrapped(src: &RawVkBindIndexBufferIndirectCommand) -> VkBindIndexBufferIndirectCommand {
        VkBindIndexBufferIndirectCommand {
            buffer_address: src.buffer_address,
            size: u32::vk_to_wrapped(&src.size),
            index_type: RawVkIndexType::vk_to_wrapped(&src.index_type),
        }
    }
}

impl Default for VkBindIndexBufferIndirectCommand {
    fn default() -> VkBindIndexBufferIndirectCommand {
        VkBindIndexBufferIndirectCommand {
            buffer_address: 0,
            size: 0,
            index_type: Default::default(),
        }
    }
}

impl VkSetup for VkBindIndexBufferIndirectCommand {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkBindIndexBufferIndirectCommand {
    fn vk_free(&self) {
        
    }
}