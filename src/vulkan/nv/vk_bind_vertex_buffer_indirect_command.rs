// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;

/// Wrapper for [VkBindVertexBufferIndirectCommandNV](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindVertexBufferIndirectCommandNV.html).
#[derive(Debug, Clone)]
pub struct VkBindVertexBufferIndirectCommand {
    pub buffer_address: u64,
    pub size: usize,
    pub stride: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkBindVertexBufferIndirectCommand {
    pub buffer_address: u64,
    pub size: u32,
    pub stride: u32,
}

impl VkWrappedType<RawVkBindVertexBufferIndirectCommand> for VkBindVertexBufferIndirectCommand {
    fn vk_to_raw(src: &VkBindVertexBufferIndirectCommand, dst: &mut RawVkBindVertexBufferIndirectCommand) {
        dst.buffer_address = src.buffer_address;
        dst.size = vk_to_raw_value(&src.size);
        dst.stride = vk_to_raw_value(&src.stride);
    }
}

impl VkRawType<VkBindVertexBufferIndirectCommand> for RawVkBindVertexBufferIndirectCommand {
    fn vk_to_wrapped(src: &RawVkBindVertexBufferIndirectCommand) -> VkBindVertexBufferIndirectCommand {
        VkBindVertexBufferIndirectCommand {
            buffer_address: src.buffer_address,
            size: u32::vk_to_wrapped(&src.size),
            stride: u32::vk_to_wrapped(&src.stride),
        }
    }
}

impl Default for VkBindVertexBufferIndirectCommand {
    fn default() -> VkBindVertexBufferIndirectCommand {
        VkBindVertexBufferIndirectCommand {
            buffer_address: 0,
            size: 0,
            stride: 0,
        }
    }
}

impl VkSetup for VkBindVertexBufferIndirectCommand {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkBindVertexBufferIndirectCommand {
    fn vk_free(&self) {
        
    }
}