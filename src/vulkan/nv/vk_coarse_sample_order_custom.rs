// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::nv::{VkShadingRatePaletteEntry,RawVkShadingRatePaletteEntry};
use vulkan::nv::{VkCoarseSampleLocation,RawVkCoarseSampleLocation};

/// Wrapper for [VkCoarseSampleOrderCustomNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkCoarseSampleOrderCustomNV.html)
#[derive(Debug, Clone)]
pub struct VkCoarseSampleOrderCustom<'a> {
    pub shading_rate: VkShadingRatePaletteEntry,
    pub sample_count: usize,
    pub sample_locations: &'a [VkCoarseSampleLocation],
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkCoarseSampleOrderCustom {
    pub shading_rate: RawVkShadingRatePaletteEntry,
    pub sample_count: u32,
    pub sample_location_count: u32,
    pub sample_locations: *mut RawVkCoarseSampleLocation,
}

impl<'a> VkWrappedType<RawVkCoarseSampleOrderCustom> for VkCoarseSampleOrderCustom<'a> {
    fn vk_to_raw(src: &VkCoarseSampleOrderCustom, dst: &mut RawVkCoarseSampleOrderCustom) {
        dst.shading_rate = vk_to_raw_value(&src.shading_rate);
        dst.sample_count = vk_to_raw_value(&src.sample_count);
        dst.sample_location_count = src.sample_locations.len() as u32;
        dst.sample_locations = new_ptr_vk_array(src.sample_locations);
    }
}

impl Default for VkCoarseSampleOrderCustom<'static> {
    fn default() -> VkCoarseSampleOrderCustom<'static> {
        VkCoarseSampleOrderCustom {
            shading_rate: VkShadingRatePaletteEntry::default(),
            sample_count: 0,
            sample_locations: &[],
        }
    }
}

impl<'a> VkSetup for VkCoarseSampleOrderCustom<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkCoarseSampleOrderCustom {
    fn vk_free(&mut self) {
        free_vk_ptr_array(self.sample_location_count as usize, self.sample_locations);
    }
}