// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::nv::{VkComponentType,RawVkComponentType};
use vulkan::nv::{VkScope,RawVkScope};

/// Wrapper for [VkCooperativeMatrixPropertiesNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkCooperativeMatrixPropertiesNV.html).
#[derive(Debug, Clone)]
pub struct VkCooperativeMatrixProperties {
    pub msize: usize,
    pub nsize: usize,
    pub ksize: usize,
    pub atype: VkComponentType,
    pub btype: VkComponentType,
    pub ctype: VkComponentType,
    pub dtype: VkComponentType,
    pub scope: VkScope,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkCooperativeMatrixProperties {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub msize: u32,
    pub nsize: u32,
    pub ksize: u32,
    pub atype: RawVkComponentType,
    pub btype: RawVkComponentType,
    pub ctype: RawVkComponentType,
    pub dtype: RawVkComponentType,
    pub scope: RawVkScope,
}

impl VkWrappedType<RawVkCooperativeMatrixProperties> for VkCooperativeMatrixProperties {
    fn vk_to_raw(src: &VkCooperativeMatrixProperties, dst: &mut RawVkCooperativeMatrixProperties) {
        dst.s_type = vk_to_raw_value(&VkStructureType::CooperativeMatrixPropertiesNv);
        dst.next = ptr::null_mut();
        dst.msize = vk_to_raw_value(&src.msize);
        dst.nsize = vk_to_raw_value(&src.nsize);
        dst.ksize = vk_to_raw_value(&src.ksize);
        dst.atype = vk_to_raw_value(&src.atype);
        dst.btype = vk_to_raw_value(&src.btype);
        dst.ctype = vk_to_raw_value(&src.ctype);
        dst.dtype = vk_to_raw_value(&src.dtype);
        dst.scope = vk_to_raw_value(&src.scope);
    }
}

impl VkRawType<VkCooperativeMatrixProperties> for RawVkCooperativeMatrixProperties {
    fn vk_to_wrapped(src: &RawVkCooperativeMatrixProperties) -> VkCooperativeMatrixProperties {
        VkCooperativeMatrixProperties {
            msize: u32::vk_to_wrapped(&src.msize),
            nsize: u32::vk_to_wrapped(&src.nsize),
            ksize: u32::vk_to_wrapped(&src.ksize),
            atype: RawVkComponentType::vk_to_wrapped(&src.atype),
            btype: RawVkComponentType::vk_to_wrapped(&src.btype),
            ctype: RawVkComponentType::vk_to_wrapped(&src.ctype),
            dtype: RawVkComponentType::vk_to_wrapped(&src.dtype),
            scope: RawVkScope::vk_to_wrapped(&src.scope),
        }
    }
}

impl Default for VkCooperativeMatrixProperties {
    fn default() -> VkCooperativeMatrixProperties {
        VkCooperativeMatrixProperties {
            msize: 0,
            nsize: 0,
            ksize: 0,
            atype: Default::default(),
            btype: Default::default(),
            ctype: Default::default(),
            dtype: Default::default(),
            scope: Default::default(),
        }
    }
}

impl VkSetup for VkCooperativeMatrixProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkCooperativeMatrixProperties {
    fn vk_free(&self) {
        
    }
}