// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::nv::{VkCoverageReductionMode,RawVkCoverageReductionMode};
use vulkan::vk::{VkSampleCountFlags,RawVkSampleCountFlags};

/// Wrapper for [VkFramebufferMixedSamplesCombinationNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkFramebufferMixedSamplesCombinationNV.html).
#[derive(Debug, Clone)]
pub struct VkFramebufferMixedSamplesCombination {
    pub coverage_reduction_mode: VkCoverageReductionMode,
    pub rasterization_samples: VkSampleCountFlags,
    pub depth_stencil_samples: VkSampleCountFlags,
    pub color_samples: VkSampleCountFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkFramebufferMixedSamplesCombination {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub coverage_reduction_mode: RawVkCoverageReductionMode,
    pub rasterization_samples: RawVkSampleCountFlags,
    pub depth_stencil_samples: RawVkSampleCountFlags,
    pub color_samples: RawVkSampleCountFlags,
}

impl VkWrappedType<RawVkFramebufferMixedSamplesCombination> for VkFramebufferMixedSamplesCombination {
    fn vk_to_raw(src: &VkFramebufferMixedSamplesCombination, dst: &mut RawVkFramebufferMixedSamplesCombination) {
        dst.s_type = vk_to_raw_value(&VkStructureType::FramebufferMixedSamplesCombinationNv);
        dst.next = ptr::null_mut();
        dst.coverage_reduction_mode = vk_to_raw_value(&src.coverage_reduction_mode);
        dst.rasterization_samples = vk_to_raw_value(&src.rasterization_samples);
        dst.depth_stencil_samples = vk_to_raw_value(&src.depth_stencil_samples);
        dst.color_samples = vk_to_raw_value(&src.color_samples);
    }
}

impl VkRawType<VkFramebufferMixedSamplesCombination> for RawVkFramebufferMixedSamplesCombination {
    fn vk_to_wrapped(src: &RawVkFramebufferMixedSamplesCombination) -> VkFramebufferMixedSamplesCombination {
        VkFramebufferMixedSamplesCombination {
            coverage_reduction_mode: RawVkCoverageReductionMode::vk_to_wrapped(&src.coverage_reduction_mode),
            rasterization_samples: RawVkSampleCountFlags::vk_to_wrapped(&src.rasterization_samples),
            depth_stencil_samples: RawVkSampleCountFlags::vk_to_wrapped(&src.depth_stencil_samples),
            color_samples: RawVkSampleCountFlags::vk_to_wrapped(&src.color_samples),
        }
    }
}

impl Default for VkFramebufferMixedSamplesCombination {
    fn default() -> VkFramebufferMixedSamplesCombination {
        VkFramebufferMixedSamplesCombination {
            coverage_reduction_mode: Default::default(),
            rasterization_samples: Default::default(),
            depth_stencil_samples: Default::default(),
            color_samples: Default::default(),
        }
    }
}

impl VkSetup for VkFramebufferMixedSamplesCombination {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkFramebufferMixedSamplesCombination {
    fn vk_free(&self) {
        
    }
}