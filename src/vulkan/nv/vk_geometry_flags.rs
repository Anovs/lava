// Generated by `scripts/generate.js`

use utils::vk_traits::*;

/// Wrapper for [VkGeometryFlagBitsNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkGeometryFlagBitsNV.html)
#[derive(Debug, Clone, Copy)]
pub struct VkGeometryFlags {
    pub opaque: bool,
    pub no_duplicate_any_hit_invocation: bool,
}

#[doc(hidden)]
pub type RawVkGeometryFlags = u32;

impl VkWrappedType<RawVkGeometryFlags> for VkGeometryFlags {
    fn vk_to_raw(src: &VkGeometryFlags, dst: &mut RawVkGeometryFlags) {
        *dst = 0;
        if src.opaque { *dst |= 0x00000001; }
        if src.no_duplicate_any_hit_invocation { *dst |= 0x00000002; }
    }
}

impl VkRawType<VkGeometryFlags> for RawVkGeometryFlags {
    fn vk_to_wrapped(src: &RawVkGeometryFlags) -> VkGeometryFlags {
        VkGeometryFlags {
            opaque: (src & 0x00000001) != 0,
            no_duplicate_any_hit_invocation: (src & 0x00000002) != 0,
        }
    }
}

impl Default for VkGeometryFlags {
    fn default() -> VkGeometryFlags {
        VkGeometryFlags {
            opaque: false,
            no_duplicate_any_hit_invocation: false,
        }
    }
}

impl VkGeometryFlags {
    
    pub fn none() -> VkGeometryFlags {
        VkGeometryFlags {
            opaque: false,
            no_duplicate_any_hit_invocation: false,
        }
    }
    
    pub fn all() -> VkGeometryFlags {
        VkGeometryFlags {
            opaque: true,
            no_duplicate_any_hit_invocation: true,
        }
    }
}

#[macro_export]
macro_rules! VkGeometryFlags {
    ( $( $x:ident ),* ) => {
        VkGeometryFlags {
            $($x: true,)*
            ..VkGeometryFlags::none()
        }
    }
}

impl VkGeometryFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.opaque { 0x00000001 } else { 0 }
        + if self.no_duplicate_any_hit_invocation { 0x00000002 } else { 0 }
    }
}