// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkBuffer,RawVkBuffer};
use vulkan::vk::{VkFormat,RawVkFormat};
use vulkan::vk::{VkIndexType,RawVkIndexType};

/// Wrapper for [VkGeometryTrianglesNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkGeometryTrianglesNV.html)
#[derive(Debug, Clone)]
pub struct VkGeometryTriangles<'a, 'b, 'c> {
    pub vertex_data: Option<&'a VkBuffer>,
    pub vertex_offset: usize,
    pub vertex_count: usize,
    pub vertex_stride: usize,
    pub vertex_format: VkFormat,
    pub index_data: Option<&'b VkBuffer>,
    pub index_offset: usize,
    pub index_count: usize,
    pub index_type: VkIndexType,
    pub transform_data: Option<&'c VkBuffer>,
    pub transform_offset: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkGeometryTriangles {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub vertex_data: RawVkBuffer,
    pub vertex_offset: u64,
    pub vertex_count: u32,
    pub vertex_stride: u64,
    pub vertex_format: RawVkFormat,
    pub index_data: RawVkBuffer,
    pub index_offset: u64,
    pub index_count: u32,
    pub index_type: RawVkIndexType,
    pub transform_data: RawVkBuffer,
    pub transform_offset: u64,
}

impl<'a, 'b, 'c> VkWrappedType<RawVkGeometryTriangles> for VkGeometryTriangles<'a, 'b, 'c> {
    fn vk_to_raw(src: &VkGeometryTriangles, dst: &mut RawVkGeometryTriangles) {
        dst.s_type = vk_to_raw_value(&VkStructureType::GeometryTrianglesNv);
        dst.next = ptr::null();
        dst.vertex_data = if src.vertex_data.is_some() { vk_to_raw_value(src.vertex_data.unwrap()) } else { 0 };
        dst.vertex_offset = vk_to_raw_value(&src.vertex_offset);
        dst.vertex_count = vk_to_raw_value(&src.vertex_count);
        dst.vertex_stride = vk_to_raw_value(&src.vertex_stride);
        dst.vertex_format = vk_to_raw_value(&src.vertex_format);
        dst.index_data = if src.index_data.is_some() { vk_to_raw_value(src.index_data.unwrap()) } else { 0 };
        dst.index_offset = vk_to_raw_value(&src.index_offset);
        dst.index_count = vk_to_raw_value(&src.index_count);
        dst.index_type = vk_to_raw_value(&src.index_type);
        dst.transform_data = if src.transform_data.is_some() { vk_to_raw_value(src.transform_data.unwrap()) } else { 0 };
        dst.transform_offset = vk_to_raw_value(&src.transform_offset);
    }
}

impl Default for VkGeometryTriangles<'static, 'static, 'static> {
    fn default() -> VkGeometryTriangles<'static, 'static, 'static> {
        VkGeometryTriangles {
            vertex_data: None,
            vertex_offset: 0,
            vertex_count: 0,
            vertex_stride: 0,
            vertex_format: VkFormat::default(),
            index_data: None,
            index_offset: 0,
            index_count: 0,
            index_type: VkIndexType::default(),
            transform_data: None,
            transform_offset: 0,
        }
    }
}

impl<'a, 'b, 'c> VkSetup for VkGeometryTriangles<'a, 'b, 'c> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkGeometryTriangles {
    fn vk_free(&mut self) {
        
    }
}