// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::nv::{VkGraphicsShaderGroupCreateInfo,RawVkGraphicsShaderGroupCreateInfo};
use vulkan::vk::{VkPipeline,RawVkPipeline};

/// Wrapper for [VkGraphicsPipelineShaderGroupsCreateInfoNV](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGraphicsPipelineShaderGroupsCreateInfoNV.html).
#[derive(Debug, Clone)]
pub struct VkGraphicsPipelineShaderGroupsCreateInfo<'a, 'b> {
    pub groups: Vec<VkGraphicsShaderGroupCreateInfo<'a, 'b>>,
    pub pipelines: Vec<VkPipeline>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkGraphicsPipelineShaderGroupsCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub group_count: u32,
    pub groups: *mut RawVkGraphicsShaderGroupCreateInfo,
    pub pipeline_count: u32,
    pub pipelines: *mut RawVkPipeline,
}

impl<'a, 'b> VkWrappedType<RawVkGraphicsPipelineShaderGroupsCreateInfo> for VkGraphicsPipelineShaderGroupsCreateInfo<'a, 'b> {
    fn vk_to_raw(src: &VkGraphicsPipelineShaderGroupsCreateInfo, dst: &mut RawVkGraphicsPipelineShaderGroupsCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::GraphicsPipelineShaderGroupsCreateInfoNv);
        dst.next = ptr::null_mut();
        dst.group_count = src.groups.len() as u32;
        dst.groups = new_ptr_vk_array(&src.groups);
        dst.pipeline_count = src.pipelines.len() as u32;
        dst.pipelines = new_ptr_vk_array(&src.pipelines);
    }
}

impl<'a, 'b> VkRawType<VkGraphicsPipelineShaderGroupsCreateInfo<'a, 'b>> for RawVkGraphicsPipelineShaderGroupsCreateInfo {
    fn vk_to_wrapped(src: &RawVkGraphicsPipelineShaderGroupsCreateInfo) -> VkGraphicsPipelineShaderGroupsCreateInfo<'a, 'b> {
        VkGraphicsPipelineShaderGroupsCreateInfo {
            groups: new_vk_array(src.group_count, src.groups),
            pipelines: new_vk_array(src.pipeline_count, src.pipelines),
        }
    }
}

impl Default for VkGraphicsPipelineShaderGroupsCreateInfo<'static, 'static> {
    fn default() -> VkGraphicsPipelineShaderGroupsCreateInfo<'static, 'static> {
        VkGraphicsPipelineShaderGroupsCreateInfo {
            groups: Vec::new(),
            pipelines: Vec::new(),
        }
    }
}

impl<'a, 'b> VkSetup for VkGraphicsPipelineShaderGroupsCreateInfo<'a, 'b> {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkGraphicsPipelineShaderGroupsCreateInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.group_count as usize, self.groups);
        free_ptr(self.pipelines);
    }
}