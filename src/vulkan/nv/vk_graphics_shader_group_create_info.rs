// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkPipelineShaderStageCreateInfo,RawVkPipelineShaderStageCreateInfo};
use vulkan::vk::{VkPipelineVertexInputStateCreateInfo,RawVkPipelineVertexInputStateCreateInfo};
use vulkan::vk::{VkPipelineTessellationStateCreateInfo,RawVkPipelineTessellationStateCreateInfo};

/// Wrapper for [VkGraphicsShaderGroupCreateInfoNV](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGraphicsShaderGroupCreateInfoNV.html).
#[derive(Debug, Clone)]
pub struct VkGraphicsShaderGroupCreateInfo<'a, 'b> {
    pub stages: Vec<VkPipelineShaderStageCreateInfo<'a, 'b>>,
    pub vertex_input_state: Option<VkPipelineVertexInputStateCreateInfo>,
    pub tessellation_state: Option<VkPipelineTessellationStateCreateInfo>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkGraphicsShaderGroupCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub stage_count: u32,
    pub stages: *mut RawVkPipelineShaderStageCreateInfo,
    pub vertex_input_state: *mut RawVkPipelineVertexInputStateCreateInfo,
    pub tessellation_state: *mut RawVkPipelineTessellationStateCreateInfo,
}

impl<'a, 'b> VkWrappedType<RawVkGraphicsShaderGroupCreateInfo> for VkGraphicsShaderGroupCreateInfo<'a, 'b> {
    fn vk_to_raw(src: &VkGraphicsShaderGroupCreateInfo, dst: &mut RawVkGraphicsShaderGroupCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::GraphicsShaderGroupCreateInfoNv);
        dst.next = ptr::null_mut();
        dst.stage_count = src.stages.len() as u32;
        dst.stages = new_ptr_vk_array(&src.stages);
        dst.vertex_input_state = new_ptr_vk_value_checked(&src.vertex_input_state);
        dst.tessellation_state = new_ptr_vk_value_checked(&src.tessellation_state);
    }
}

impl<'a, 'b> VkRawType<VkGraphicsShaderGroupCreateInfo<'a, 'b>> for RawVkGraphicsShaderGroupCreateInfo {
    fn vk_to_wrapped(src: &RawVkGraphicsShaderGroupCreateInfo) -> VkGraphicsShaderGroupCreateInfo<'a, 'b> {
        VkGraphicsShaderGroupCreateInfo {
            stages: new_vk_array(src.stage_count, src.stages),
            vertex_input_state: new_vk_value_checked(src.vertex_input_state),
            tessellation_state: new_vk_value_checked(src.tessellation_state),
        }
    }
}

impl Default for VkGraphicsShaderGroupCreateInfo<'static, 'static> {
    fn default() -> VkGraphicsShaderGroupCreateInfo<'static, 'static> {
        VkGraphicsShaderGroupCreateInfo {
            stages: Vec::new(),
            vertex_input_state: None,
            tessellation_state: None,
        }
    }
}

impl<'a, 'b> VkSetup for VkGraphicsShaderGroupCreateInfo<'a, 'b> {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkGraphicsShaderGroupCreateInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.stage_count as usize, self.stages);
        free_vk_ptr(self.vertex_input_state);
        free_vk_ptr(self.tessellation_state);
    }
}