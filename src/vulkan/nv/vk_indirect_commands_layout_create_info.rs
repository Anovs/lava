// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::nv::{VkIndirectCommandsLayoutUsageFlags,RawVkIndirectCommandsLayoutUsageFlags};
use vulkan::vk::{VkPipelineBindPoint,RawVkPipelineBindPoint};
use vulkan::nv::{VkIndirectCommandsLayoutToken,RawVkIndirectCommandsLayoutToken};

/// Wrapper for [VkIndirectCommandsLayoutCreateInfoNV](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkIndirectCommandsLayoutCreateInfoNV.html).
#[derive(Debug, Clone)]
pub struct VkIndirectCommandsLayoutCreateInfo {
    pub flags: VkIndirectCommandsLayoutUsageFlags,
    pub pipeline_bind_point: VkPipelineBindPoint,
    pub tokens: Vec<VkIndirectCommandsLayoutToken>,
    pub stream_strides: Vec<usize>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkIndirectCommandsLayoutCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkIndirectCommandsLayoutUsageFlags,
    pub pipeline_bind_point: RawVkPipelineBindPoint,
    pub token_count: u32,
    pub tokens: *mut RawVkIndirectCommandsLayoutToken,
    pub stream_count: u32,
    pub stream_strides: *mut u32,
}

impl VkWrappedType<RawVkIndirectCommandsLayoutCreateInfo> for VkIndirectCommandsLayoutCreateInfo {
    fn vk_to_raw(src: &VkIndirectCommandsLayoutCreateInfo, dst: &mut RawVkIndirectCommandsLayoutCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::IndirectCommandsLayoutCreateInfoNv);
        dst.next = ptr::null_mut();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.pipeline_bind_point = vk_to_raw_value(&src.pipeline_bind_point);
        dst.token_count = src.tokens.len() as u32;
        dst.tokens = new_ptr_vk_array(&src.tokens);
        dst.stream_count = src.stream_strides.len() as u32;
        dst.stream_strides = new_ptr_vk_array(&src.stream_strides);
    }
}

impl VkRawType<VkIndirectCommandsLayoutCreateInfo> for RawVkIndirectCommandsLayoutCreateInfo {
    fn vk_to_wrapped(src: &RawVkIndirectCommandsLayoutCreateInfo) -> VkIndirectCommandsLayoutCreateInfo {
        VkIndirectCommandsLayoutCreateInfo {
            flags: RawVkIndirectCommandsLayoutUsageFlags::vk_to_wrapped(&src.flags),
            pipeline_bind_point: RawVkPipelineBindPoint::vk_to_wrapped(&src.pipeline_bind_point),
            tokens: new_vk_array(src.token_count, src.tokens),
            stream_strides: new_vk_array(src.stream_count, src.stream_strides),
        }
    }
}

impl Default for VkIndirectCommandsLayoutCreateInfo {
    fn default() -> VkIndirectCommandsLayoutCreateInfo {
        VkIndirectCommandsLayoutCreateInfo {
            flags: Default::default(),
            pipeline_bind_point: Default::default(),
            tokens: Vec::new(),
            stream_strides: Vec::new(),
        }
    }
}

impl VkSetup for VkIndirectCommandsLayoutCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkIndirectCommandsLayoutCreateInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.token_count as usize, self.tokens);
        free_ptr(self.stream_strides);
    }
}