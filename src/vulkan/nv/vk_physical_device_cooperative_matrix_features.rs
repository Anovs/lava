// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkPhysicalDeviceCooperativeMatrixFeaturesNV](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCooperativeMatrixFeaturesNV.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixFeatures {
    pub cooperative_matrix: bool,
    pub cooperative_matrix_robust_buffer_access: bool,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceCooperativeMatrixFeatures {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub cooperative_matrix: u32,
    pub cooperative_matrix_robust_buffer_access: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceCooperativeMatrixFeatures> for VkPhysicalDeviceCooperativeMatrixFeatures {
    fn vk_to_raw(src: &VkPhysicalDeviceCooperativeMatrixFeatures, dst: &mut RawVkPhysicalDeviceCooperativeMatrixFeatures) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceCooperativeMatrixFeaturesNv);
        dst.next = ptr::null_mut();
        dst.cooperative_matrix = vk_to_raw_value(&src.cooperative_matrix);
        dst.cooperative_matrix_robust_buffer_access = vk_to_raw_value(&src.cooperative_matrix_robust_buffer_access);
    }
}

impl VkRawType<VkPhysicalDeviceCooperativeMatrixFeatures> for RawVkPhysicalDeviceCooperativeMatrixFeatures {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceCooperativeMatrixFeatures) -> VkPhysicalDeviceCooperativeMatrixFeatures {
        VkPhysicalDeviceCooperativeMatrixFeatures {
            cooperative_matrix: u32::vk_to_wrapped(&src.cooperative_matrix),
            cooperative_matrix_robust_buffer_access: u32::vk_to_wrapped(&src.cooperative_matrix_robust_buffer_access),
        }
    }
}

impl Default for VkPhysicalDeviceCooperativeMatrixFeatures {
    fn default() -> VkPhysicalDeviceCooperativeMatrixFeatures {
        VkPhysicalDeviceCooperativeMatrixFeatures {
            cooperative_matrix: false,
            cooperative_matrix_robust_buffer_access: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceCooperativeMatrixFeatures {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceCooperativeMatrixFeatures {
    fn vk_free(&self) {
        
    }
}