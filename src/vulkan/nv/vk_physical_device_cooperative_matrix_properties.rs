// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkShaderStageFlags,RawVkShaderStageFlags};

/// Wrapper for [VkPhysicalDeviceCooperativeMatrixPropertiesNV](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCooperativeMatrixPropertiesNV.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixProperties {
    pub cooperative_matrix_supported_stages: VkShaderStageFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceCooperativeMatrixProperties {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub cooperative_matrix_supported_stages: RawVkShaderStageFlags,
}

impl VkWrappedType<RawVkPhysicalDeviceCooperativeMatrixProperties> for VkPhysicalDeviceCooperativeMatrixProperties {
    fn vk_to_raw(src: &VkPhysicalDeviceCooperativeMatrixProperties, dst: &mut RawVkPhysicalDeviceCooperativeMatrixProperties) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceCooperativeMatrixPropertiesNv);
        dst.next = ptr::null_mut();
        dst.cooperative_matrix_supported_stages = vk_to_raw_value(&src.cooperative_matrix_supported_stages);
    }
}

impl VkRawType<VkPhysicalDeviceCooperativeMatrixProperties> for RawVkPhysicalDeviceCooperativeMatrixProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceCooperativeMatrixProperties) -> VkPhysicalDeviceCooperativeMatrixProperties {
        VkPhysicalDeviceCooperativeMatrixProperties {
            cooperative_matrix_supported_stages: RawVkShaderStageFlags::vk_to_wrapped(&src.cooperative_matrix_supported_stages),
        }
    }
}

impl Default for VkPhysicalDeviceCooperativeMatrixProperties {
    fn default() -> VkPhysicalDeviceCooperativeMatrixProperties {
        VkPhysicalDeviceCooperativeMatrixProperties {
            cooperative_matrix_supported_stages: Default::default(),
        }
    }
}

impl VkSetup for VkPhysicalDeviceCooperativeMatrixProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceCooperativeMatrixProperties {
    fn vk_free(&self) {
        
    }
}