// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkPhysicalDeviceShaderSMBuiltinsPropertiesNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsProperties {
    pub shader_smcount: usize,
    pub shader_warps_per_sm: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceShaderSMBuiltinsProperties {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub shader_smcount: u32,
    pub shader_warps_per_sm: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceShaderSMBuiltinsProperties> for VkPhysicalDeviceShaderSMBuiltinsProperties {
    fn vk_to_raw(src: &VkPhysicalDeviceShaderSMBuiltinsProperties, dst: &mut RawVkPhysicalDeviceShaderSMBuiltinsProperties) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceShaderSmBuiltinsPropertiesNv);
        dst.next = ptr::null_mut();
        dst.shader_smcount = vk_to_raw_value(&src.shader_smcount);
        dst.shader_warps_per_sm = vk_to_raw_value(&src.shader_warps_per_sm);
    }
}

impl VkRawType<VkPhysicalDeviceShaderSMBuiltinsProperties> for RawVkPhysicalDeviceShaderSMBuiltinsProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceShaderSMBuiltinsProperties) -> VkPhysicalDeviceShaderSMBuiltinsProperties {
        VkPhysicalDeviceShaderSMBuiltinsProperties {
            shader_smcount: u32::vk_to_wrapped(&src.shader_smcount),
            shader_warps_per_sm: u32::vk_to_wrapped(&src.shader_warps_per_sm),
        }
    }
}

impl Default for VkPhysicalDeviceShaderSMBuiltinsProperties {
    fn default() -> VkPhysicalDeviceShaderSMBuiltinsProperties {
        VkPhysicalDeviceShaderSMBuiltinsProperties {
            shader_smcount: 0,
            shader_warps_per_sm: 0,
        }
    }
}

impl VkSetup for VkPhysicalDeviceShaderSMBuiltinsProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceShaderSMBuiltinsProperties {
    fn vk_free(&self) {
        
    }
}