// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::nv::{VkPipelineCoverageReductionStateCreateFlags,RawVkPipelineCoverageReductionStateCreateFlags};
use vulkan::nv::{VkCoverageReductionMode,RawVkCoverageReductionMode};

/// Wrapper for [VkPipelineCoverageReductionStateCreateInfoNV](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCoverageReductionStateCreateInfoNV.html).
#[derive(Debug, Clone)]
pub struct VkPipelineCoverageReductionStateCreateInfo {
    pub flags: VkPipelineCoverageReductionStateCreateFlags,
    pub coverage_reduction_mode: VkCoverageReductionMode,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPipelineCoverageReductionStateCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkPipelineCoverageReductionStateCreateFlags,
    pub coverage_reduction_mode: RawVkCoverageReductionMode,
}

impl VkWrappedType<RawVkPipelineCoverageReductionStateCreateInfo> for VkPipelineCoverageReductionStateCreateInfo {
    fn vk_to_raw(src: &VkPipelineCoverageReductionStateCreateInfo, dst: &mut RawVkPipelineCoverageReductionStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineCoverageReductionStateCreateInfoNv);
        dst.next = ptr::null_mut();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.coverage_reduction_mode = vk_to_raw_value(&src.coverage_reduction_mode);
    }
}

impl VkRawType<VkPipelineCoverageReductionStateCreateInfo> for RawVkPipelineCoverageReductionStateCreateInfo {
    fn vk_to_wrapped(src: &RawVkPipelineCoverageReductionStateCreateInfo) -> VkPipelineCoverageReductionStateCreateInfo {
        VkPipelineCoverageReductionStateCreateInfo {
            flags: RawVkPipelineCoverageReductionStateCreateFlags::vk_to_wrapped(&src.flags),
            coverage_reduction_mode: RawVkCoverageReductionMode::vk_to_wrapped(&src.coverage_reduction_mode),
        }
    }
}

impl Default for VkPipelineCoverageReductionStateCreateInfo {
    fn default() -> VkPipelineCoverageReductionStateCreateInfo {
        VkPipelineCoverageReductionStateCreateInfo {
            flags: Default::default(),
            coverage_reduction_mode: Default::default(),
        }
    }
}

impl VkSetup for VkPipelineCoverageReductionStateCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPipelineCoverageReductionStateCreateInfo {
    fn vk_free(&self) {
        
    }
}