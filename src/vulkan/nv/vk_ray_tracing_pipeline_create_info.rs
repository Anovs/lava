// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkPipelineCreateFlags,RawVkPipelineCreateFlags};
use vulkan::vk::{VkPipelineShaderStageCreateInfo,RawVkPipelineShaderStageCreateInfo};
use vulkan::nv::{VkRayTracingShaderGroupCreateInfo,RawVkRayTracingShaderGroupCreateInfo};
use vulkan::vk::{VkPipelineLayout,RawVkPipelineLayout};
use vulkan::vk::{VkPipeline,RawVkPipeline};

/// Wrapper for [VkRayTracingPipelineCreateInfoNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkRayTracingPipelineCreateInfoNV.html).
#[derive(Debug, Clone)]
pub struct VkRayTracingPipelineCreateInfo<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i>
    where
        'b: 'a,
        'c: 'a,
        'd: 'a,
        'e: 'd,
        'f: 'd,
{
    pub flags: VkPipelineCreateFlags,
    pub stages: &'a [VkPipelineShaderStageCreateInfo<'b, 'c, 'd, 'e, 'f>],
    pub groups: &'g [VkRayTracingShaderGroupCreateInfo],
    pub max_recursion_depth: usize,
    pub layout: &'h VkPipelineLayout,
    pub base_pipeline_handle: Option<&'i VkPipeline>,
    pub base_pipeline_index: isize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkRayTracingPipelineCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkPipelineCreateFlags,
    pub stage_count: u32,
    pub stages: *mut RawVkPipelineShaderStageCreateInfo,
    pub group_count: u32,
    pub groups: *mut RawVkRayTracingShaderGroupCreateInfo,
    pub max_recursion_depth: u32,
    pub layout: RawVkPipelineLayout,
    pub base_pipeline_handle: RawVkPipeline,
    pub base_pipeline_index: i32,
}

impl<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i> VkWrappedType<RawVkRayTracingPipelineCreateInfo> for VkRayTracingPipelineCreateInfo<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i>
    where
        'b: 'a,
        'c: 'a,
        'd: 'a,
        'e: 'd,
        'f: 'd,
{
    fn vk_to_raw(src: &VkRayTracingPipelineCreateInfo, dst: &mut RawVkRayTracingPipelineCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::RayTracingPipelineCreateInfoNv);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.stage_count = src.stages.len() as u32;
        dst.stages = new_ptr_vk_array(src.stages);
        dst.group_count = src.groups.len() as u32;
        dst.groups = new_ptr_vk_array(src.groups);
        dst.max_recursion_depth = vk_to_raw_value(&src.max_recursion_depth);
        dst.layout = vk_to_raw_value(src.layout);
        dst.base_pipeline_handle = if src.base_pipeline_handle.is_some() { vk_to_raw_value(src.base_pipeline_handle.unwrap()) } else { 0 };
        dst.base_pipeline_index = vk_to_raw_value(&src.base_pipeline_index);
    }
}

impl Default for VkRayTracingPipelineCreateInfo<'static, 'static, 'static, 'static, 'static, 'static, 'static, 'static, 'static> {
    fn default() -> VkRayTracingPipelineCreateInfo<'static, 'static, 'static, 'static, 'static, 'static, 'static, 'static, 'static> {
        VkRayTracingPipelineCreateInfo {
            flags: VkPipelineCreateFlags::default(),
            stages: &[],
            groups: &[],
            max_recursion_depth: 0,
            layout: vk_null_ref(),
            base_pipeline_handle: None,
            base_pipeline_index: 0,
        }
    }
}

impl<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i> VkSetup for VkRayTracingPipelineCreateInfo<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i>
    where
        'b: 'a,
        'c: 'a,
        'd: 'a,
        'e: 'd,
        'f: 'd,
{
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkRayTracingPipelineCreateInfo {
    fn vk_free(&mut self) {
        free_vk_ptr_array(self.stage_count as usize, self.stages);
        free_vk_ptr_array(self.group_count as usize, self.groups);
    }
}