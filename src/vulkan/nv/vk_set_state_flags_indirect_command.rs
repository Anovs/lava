// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;

/// Wrapper for [VkSetStateFlagsIndirectCommandNV](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSetStateFlagsIndirectCommandNV.html).
#[derive(Debug, Clone)]
pub struct VkSetStateFlagsIndirectCommand {
    pub data: u32,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSetStateFlagsIndirectCommand {
    pub data: u32,
}

impl VkWrappedType<RawVkSetStateFlagsIndirectCommand> for VkSetStateFlagsIndirectCommand {
    fn vk_to_raw(src: &VkSetStateFlagsIndirectCommand, dst: &mut RawVkSetStateFlagsIndirectCommand) {
        dst.data = src.data;
    }
}

impl VkRawType<VkSetStateFlagsIndirectCommand> for RawVkSetStateFlagsIndirectCommand {
    fn vk_to_wrapped(src: &RawVkSetStateFlagsIndirectCommand) -> VkSetStateFlagsIndirectCommand {
        VkSetStateFlagsIndirectCommand {
            data: src.data,
        }
    }
}

impl Default for VkSetStateFlagsIndirectCommand {
    fn default() -> VkSetStateFlagsIndirectCommand {
        VkSetStateFlagsIndirectCommand {
            data: 0,
        }
    }
}

impl VkSetup for VkSetStateFlagsIndirectCommand {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkSetStateFlagsIndirectCommand {
    fn vk_free(&self) {
        
    }
}