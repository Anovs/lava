// Generated by `scripts/generate.js`

use utils::vk_traits::*;

/// Wrapper for [VkIndirectCommandsLayoutUsageFlagBitsNVX](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkIndirectCommandsLayoutUsageFlagBitsNVX.html).
///
/// Use the macro `VkIndirectCommandsLayoutUsageFlags!` as an alternative method to create a structure. For example, these two snippets return the same value:
/// ```
/// VkIndirectCommandsLayoutUsageFlags!(unordered_sequences, sparse_sequences)
/// ```
/// ```
/// VkIndirectCommandsLayoutUsageFlags {
///     unordered_sequences: true,
///     sparse_sequences: true,
///     ..VkIndirectCommandsLayoutUsageFlags::none()
/// }
/// ```
#[derive(Debug, Clone, Copy)]
pub struct VkIndirectCommandsLayoutUsageFlags {
    pub unordered_sequences: bool,
    pub sparse_sequences: bool,
    pub empty_executions: bool,
    pub indexed_sequences: bool,
}

#[doc(hidden)]
pub type RawVkIndirectCommandsLayoutUsageFlags = u32;

impl VkWrappedType<RawVkIndirectCommandsLayoutUsageFlags> for VkIndirectCommandsLayoutUsageFlags {
    fn vk_to_raw(src: &VkIndirectCommandsLayoutUsageFlags, dst: &mut RawVkIndirectCommandsLayoutUsageFlags) {
        *dst = 0;
        if src.unordered_sequences { *dst |= 0x00000001; }
        if src.sparse_sequences { *dst |= 0x00000002; }
        if src.empty_executions { *dst |= 0x00000004; }
        if src.indexed_sequences { *dst |= 0x00000008; }
    }
}

impl VkRawType<VkIndirectCommandsLayoutUsageFlags> for RawVkIndirectCommandsLayoutUsageFlags {
    fn vk_to_wrapped(src: &RawVkIndirectCommandsLayoutUsageFlags) -> VkIndirectCommandsLayoutUsageFlags {
        VkIndirectCommandsLayoutUsageFlags {
            unordered_sequences: (src & 0x00000001) != 0,
            sparse_sequences: (src & 0x00000002) != 0,
            empty_executions: (src & 0x00000004) != 0,
            indexed_sequences: (src & 0x00000008) != 0,
        }
    }
}

impl Default for VkIndirectCommandsLayoutUsageFlags {
    fn default() -> VkIndirectCommandsLayoutUsageFlags {
        VkIndirectCommandsLayoutUsageFlags {
            unordered_sequences: false,
            sparse_sequences: false,
            empty_executions: false,
            indexed_sequences: false,
        }
    }
}

impl VkIndirectCommandsLayoutUsageFlags {
    
    /// Return a structure with all flags to `false`.
    pub fn none() -> Self {
        VkIndirectCommandsLayoutUsageFlags {
            unordered_sequences: false,
            sparse_sequences: false,
            empty_executions: false,
            indexed_sequences: false,
        }
    }
    
    /// Return a structure with all flags to `true`.
    pub fn all() -> Self {
        VkIndirectCommandsLayoutUsageFlags {
            unordered_sequences: true,
            sparse_sequences: true,
            empty_executions: true,
            indexed_sequences: true,
        }
    }
    
    /// Return the numerical bit flags corresponding to the structure (as described in the Vulkan specs).
    pub fn to_u32(&self) -> u32 {
        0
        + if self.unordered_sequences { 0x00000001 } else { 0 }
        + if self.sparse_sequences { 0x00000002 } else { 0 }
        + if self.empty_executions { 0x00000004 } else { 0 }
        + if self.indexed_sequences { 0x00000008 } else { 0 }
    }
    
    /// Create a structure corresponding to the specified numerical bit flags.
    pub fn from_u32(value: u32) -> Self {
        VkIndirectCommandsLayoutUsageFlags {
            unordered_sequences: value & 0x00000001 > 0,
            sparse_sequences: value & 0x00000002 > 0,
            empty_executions: value & 0x00000004 > 0,
            indexed_sequences: value & 0x00000008 > 0,
        }
    }
}

#[doc(hidden)]
#[macro_export]
macro_rules! VkIndirectCommandsLayoutUsageFlags {
    ( $( $x:ident ),* ) => {
        VkIndirectCommandsLayoutUsageFlags {
            $($x: true,)*
            ..VkIndirectCommandsLayoutUsageFlags::none()
        }
    }
}