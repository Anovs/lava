// Generated by `scripts/generate.js`

use utils::vk_traits::*;

/// Wrapper for [VkObjectEntryUsageFlagBitsNVX](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkObjectEntryUsageFlagBitsNVX.html)
#[derive(Debug, Clone, Copy)]
pub struct VkObjectEntryUsageFlags {
    pub graphics: bool,
    pub compute: bool,
}

#[doc(hidden)]
pub type RawVkObjectEntryUsageFlags = u32;

impl VkWrappedType<RawVkObjectEntryUsageFlags> for VkObjectEntryUsageFlags {
    fn vk_to_raw(src: &VkObjectEntryUsageFlags, dst: &mut RawVkObjectEntryUsageFlags) {
        *dst = 0;
        if src.graphics { *dst |= 0x00000001; }
        if src.compute { *dst |= 0x00000002; }
    }
}

impl VkRawType<VkObjectEntryUsageFlags> for RawVkObjectEntryUsageFlags {
    fn vk_to_wrapped(src: &RawVkObjectEntryUsageFlags) -> VkObjectEntryUsageFlags {
        VkObjectEntryUsageFlags {
            graphics: (src & 0x00000001) != 0,
            compute: (src & 0x00000002) != 0,
        }
    }
}

impl Default for VkObjectEntryUsageFlags {
    fn default() -> VkObjectEntryUsageFlags {
        VkObjectEntryUsageFlags {
            graphics: false,
            compute: false,
        }
    }
}

impl VkObjectEntryUsageFlags {
    
    pub fn none() -> VkObjectEntryUsageFlags {
        VkObjectEntryUsageFlags {
            graphics: false,
            compute: false,
        }
    }
    
    pub fn all() -> VkObjectEntryUsageFlags {
        VkObjectEntryUsageFlags {
            graphics: true,
            compute: true,
        }
    }
}

#[macro_export]
macro_rules! VkObjectEntryUsageFlags {
    ( $( $x:ident ),* ) => {
        VkObjectEntryUsageFlags {
            $($x: true,)*
            ..VkObjectEntryUsageFlags::none()
        }
    }
}

impl VkObjectEntryUsageFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.graphics { 0x00000001 } else { 0 }
        + if self.compute { 0x00000002 } else { 0 }
    }
    
    pub fn from_u32(value: u32) -> VkObjectEntryUsageFlags {
        VkObjectEntryUsageFlags {
            graphics: value & 0x00000001 > 0,
            compute: value & 0x00000002 > 0,
        }
    }
}