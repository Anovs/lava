// Generated by `scripts/generate.js`

use utils::vk_traits::*;

/// Wrapper for [VkBufferUsageFlagBits](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkBufferUsageFlagBits.html)
///
/// Use the macro `VkBufferUsageFlags!` as an alternative method to create a structure. For example, these two snippets return the same value:
/// ```
/// VkBufferUsageFlags!(transfer_src, transfer_dst)
/// ```
/// ```
/// VkBufferUsageFlags {
///     transfer_src: true,
///     transfer_dst: true,
///     ..VkBufferUsageFlags::none()
/// }
/// ```
#[derive(Debug, Clone, Copy)]
pub struct VkBufferUsageFlags {
    pub transfer_src: bool,
    pub transfer_dst: bool,
    pub uniform_texel_buffer: bool,
    pub storage_texel_buffer: bool,
    pub uniform_buffer: bool,
    pub storage_buffer: bool,
    pub index_buffer: bool,
    pub vertex_buffer: bool,
    pub indirect_buffer: bool,
    pub transform_feedback_buffer_ext: bool,
    pub transform_feedback_counter_buffer_ext: bool,
    pub conditional_rendering_ext: bool,
    pub ray_tracing_nv: bool,
    pub shader_device_address_ext: bool,
}

#[doc(hidden)]
pub type RawVkBufferUsageFlags = u32;

impl VkWrappedType<RawVkBufferUsageFlags> for VkBufferUsageFlags {
    fn vk_to_raw(src: &VkBufferUsageFlags, dst: &mut RawVkBufferUsageFlags) {
        *dst = 0;
        if src.transfer_src { *dst |= 0x00000001; }
        if src.transfer_dst { *dst |= 0x00000002; }
        if src.uniform_texel_buffer { *dst |= 0x00000004; }
        if src.storage_texel_buffer { *dst |= 0x00000008; }
        if src.uniform_buffer { *dst |= 0x00000010; }
        if src.storage_buffer { *dst |= 0x00000020; }
        if src.index_buffer { *dst |= 0x00000040; }
        if src.vertex_buffer { *dst |= 0x00000080; }
        if src.indirect_buffer { *dst |= 0x00000100; }
        if src.transform_feedback_buffer_ext { *dst |= 0x00000800; }
        if src.transform_feedback_counter_buffer_ext { *dst |= 0x00001000; }
        if src.conditional_rendering_ext { *dst |= 0x00000200; }
        if src.ray_tracing_nv { *dst |= 0x00000400; }
        if src.shader_device_address_ext { *dst |= 0x00020000; }
    }
}

impl VkRawType<VkBufferUsageFlags> for RawVkBufferUsageFlags {
    fn vk_to_wrapped(src: &RawVkBufferUsageFlags) -> VkBufferUsageFlags {
        VkBufferUsageFlags {
            transfer_src: (src & 0x00000001) != 0,
            transfer_dst: (src & 0x00000002) != 0,
            uniform_texel_buffer: (src & 0x00000004) != 0,
            storage_texel_buffer: (src & 0x00000008) != 0,
            uniform_buffer: (src & 0x00000010) != 0,
            storage_buffer: (src & 0x00000020) != 0,
            index_buffer: (src & 0x00000040) != 0,
            vertex_buffer: (src & 0x00000080) != 0,
            indirect_buffer: (src & 0x00000100) != 0,
            transform_feedback_buffer_ext: (src & 0x00000800) != 0,
            transform_feedback_counter_buffer_ext: (src & 0x00001000) != 0,
            conditional_rendering_ext: (src & 0x00000200) != 0,
            ray_tracing_nv: (src & 0x00000400) != 0,
            shader_device_address_ext: (src & 0x00020000) != 0,
        }
    }
}

impl Default for VkBufferUsageFlags {
    fn default() -> VkBufferUsageFlags {
        VkBufferUsageFlags {
            transfer_src: false,
            transfer_dst: false,
            uniform_texel_buffer: false,
            storage_texel_buffer: false,
            uniform_buffer: false,
            storage_buffer: false,
            index_buffer: false,
            vertex_buffer: false,
            indirect_buffer: false,
            transform_feedback_buffer_ext: false,
            transform_feedback_counter_buffer_ext: false,
            conditional_rendering_ext: false,
            ray_tracing_nv: false,
            shader_device_address_ext: false,
        }
    }
}

impl VkBufferUsageFlags {
    
    /// Return a structure with all flags to `false`.
    pub fn none() -> Self {
        VkBufferUsageFlags {
            transfer_src: false,
            transfer_dst: false,
            uniform_texel_buffer: false,
            storage_texel_buffer: false,
            uniform_buffer: false,
            storage_buffer: false,
            index_buffer: false,
            vertex_buffer: false,
            indirect_buffer: false,
            transform_feedback_buffer_ext: false,
            transform_feedback_counter_buffer_ext: false,
            conditional_rendering_ext: false,
            ray_tracing_nv: false,
            shader_device_address_ext: false,
        }
    }
    
    /// Return a structure with all flags to `true`.
    pub fn all() -> Self {
        VkBufferUsageFlags {
            transfer_src: true,
            transfer_dst: true,
            uniform_texel_buffer: true,
            storage_texel_buffer: true,
            uniform_buffer: true,
            storage_buffer: true,
            index_buffer: true,
            vertex_buffer: true,
            indirect_buffer: true,
            transform_feedback_buffer_ext: true,
            transform_feedback_counter_buffer_ext: true,
            conditional_rendering_ext: true,
            ray_tracing_nv: true,
            shader_device_address_ext: true,
        }
    }
    
    /// Return the numerical bit flags corresponding to the structure (as described in the Vulkan specs).
    pub fn to_u32(&self) -> u32 {
        0
        + if self.transfer_src { 0x00000001 } else { 0 }
        + if self.transfer_dst { 0x00000002 } else { 0 }
        + if self.uniform_texel_buffer { 0x00000004 } else { 0 }
        + if self.storage_texel_buffer { 0x00000008 } else { 0 }
        + if self.uniform_buffer { 0x00000010 } else { 0 }
        + if self.storage_buffer { 0x00000020 } else { 0 }
        + if self.index_buffer { 0x00000040 } else { 0 }
        + if self.vertex_buffer { 0x00000080 } else { 0 }
        + if self.indirect_buffer { 0x00000100 } else { 0 }
        + if self.transform_feedback_buffer_ext { 0x00000800 } else { 0 }
        + if self.transform_feedback_counter_buffer_ext { 0x00001000 } else { 0 }
        + if self.conditional_rendering_ext { 0x00000200 } else { 0 }
        + if self.ray_tracing_nv { 0x00000400 } else { 0 }
        + if self.shader_device_address_ext { 0x00020000 } else { 0 }
    }
    
    /// Create a structure corresponding to the specified numerical bit flags.
    pub fn from_u32(value: u32) -> Self {
        VkBufferUsageFlags {
            transfer_src: value & 0x00000001 > 0,
            transfer_dst: value & 0x00000002 > 0,
            uniform_texel_buffer: value & 0x00000004 > 0,
            storage_texel_buffer: value & 0x00000008 > 0,
            uniform_buffer: value & 0x00000010 > 0,
            storage_buffer: value & 0x00000020 > 0,
            index_buffer: value & 0x00000040 > 0,
            vertex_buffer: value & 0x00000080 > 0,
            indirect_buffer: value & 0x00000100 > 0,
            transform_feedback_buffer_ext: value & 0x00000800 > 0,
            transform_feedback_counter_buffer_ext: value & 0x00001000 > 0,
            conditional_rendering_ext: value & 0x00000200 > 0,
            ray_tracing_nv: value & 0x00000400 > 0,
            shader_device_address_ext: value & 0x00020000 > 0,
        }
    }
}

#[doc(hidden)]
#[macro_export]
macro_rules! VkBufferUsageFlags {
    ( $( $x:ident ),* ) => {
        VkBufferUsageFlags {
            $($x: true,)*
            ..VkBufferUsageFlags::none()
        }
    }
}