// Generated by `scripts/generate.js`

use utils::vk_traits::*;

/// Wrapper for [VkBufferViewCreateFlagBits](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkBufferViewCreateFlagBits.html)
#[derive(Debug, Clone, Copy)]
pub struct VkBufferViewCreateFlags {
    
}

#[doc(hidden)]
pub type RawVkBufferViewCreateFlags = u32;

impl VkWrappedType<RawVkBufferViewCreateFlags> for VkBufferViewCreateFlags {
    fn vk_to_raw(src: &VkBufferViewCreateFlags, dst: &mut RawVkBufferViewCreateFlags) {
        *dst = 0;
    }
}

impl VkRawType<VkBufferViewCreateFlags> for RawVkBufferViewCreateFlags {
    fn vk_to_wrapped(src: &RawVkBufferViewCreateFlags) -> VkBufferViewCreateFlags {
        VkBufferViewCreateFlags {
            
        }
    }
}

impl Default for VkBufferViewCreateFlags {
    fn default() -> VkBufferViewCreateFlags {
        VkBufferViewCreateFlags {
            
        }
    }
}

impl VkBufferViewCreateFlags {
    
    pub fn none() -> VkBufferViewCreateFlags {
        VkBufferViewCreateFlags {
            
        }
    }
    
    pub fn all() -> VkBufferViewCreateFlags {
        VkBufferViewCreateFlags {
            
        }
    }
}

#[macro_export]
macro_rules! VkBufferViewCreateFlags {
    ( $( $x:ident ),* ) => {
        VkBufferViewCreateFlags {
            $($x: true,)*
            ..VkBufferViewCreateFlags::none()
        }
    }
}

impl VkBufferViewCreateFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
    }
    
    pub fn from_u32(value: u32) -> VkBufferViewCreateFlags {
        VkBufferViewCreateFlags {
            
        }
    }
}