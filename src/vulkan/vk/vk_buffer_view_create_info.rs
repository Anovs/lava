// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkBufferViewCreateFlags,RawVkBufferViewCreateFlags};
use vulkan::vk::{VkBuffer,RawVkBuffer};
use vulkan::vk::{VkFormat,RawVkFormat};

#[derive(Debug, Clone)]
pub struct VkBufferViewCreateInfo<'a> {
    pub flags: VkBufferViewCreateFlags,
    pub buffer: &'a VkBuffer,
    pub format: VkFormat,
    pub offset: usize,
    pub range: usize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkBufferViewCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkBufferViewCreateFlags,
    pub buffer: RawVkBuffer,
    pub format: RawVkFormat,
    pub offset: u64,
    pub range: u64,
}

impl<'a> VkWrappedType<RawVkBufferViewCreateInfo> for VkBufferViewCreateInfo<'a> {
    fn vk_to_raw(src: &VkBufferViewCreateInfo, dst: &mut RawVkBufferViewCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::BufferViewCreateInfo);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.buffer = vk_to_raw_value(src.buffer);
        dst.format = vk_to_raw_value(&src.format);
        dst.offset = vk_to_raw_value(&src.offset);
        dst.range = vk_to_raw_value(&src.range);
    }
}

impl Default for VkBufferViewCreateInfo<'static> {
    fn default() -> VkBufferViewCreateInfo<'static> {
        VkBufferViewCreateInfo {
            flags: VkBufferViewCreateFlags::default(),
            buffer: vk_null_ref(),
            format: VkFormat::default(),
            offset: 0,
            range: 0,
        }
    }
}

impl<'a> VkSetup for VkBufferViewCreateInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkBufferViewCreateInfo {
    fn vk_free(&mut self) {
        
    }
}