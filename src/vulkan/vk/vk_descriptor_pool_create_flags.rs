// Generated by `scripts/generate.js`

use utils::vk_traits::*;

#[derive(Debug, Clone, Copy)]
pub struct VkDescriptorPoolCreateFlags {
    pub free_descriptor_set: bool,
    pub update_after_bind_ext: bool,
}

pub type RawVkDescriptorPoolCreateFlags = u32;

impl VkWrappedType<RawVkDescriptorPoolCreateFlags> for VkDescriptorPoolCreateFlags {
    fn vk_to_raw(src: &VkDescriptorPoolCreateFlags, dst: &mut RawVkDescriptorPoolCreateFlags) {
        *dst = 0;
        if src.free_descriptor_set { *dst |= 0x00000001; }
        if src.update_after_bind_ext { *dst |= 0x00000002; }
    }
}

impl VkRawType<VkDescriptorPoolCreateFlags> for RawVkDescriptorPoolCreateFlags {
    fn vk_to_wrapped(src: &RawVkDescriptorPoolCreateFlags) -> VkDescriptorPoolCreateFlags {
        VkDescriptorPoolCreateFlags {
            free_descriptor_set: (src & 0x00000001) != 0,
            update_after_bind_ext: (src & 0x00000002) != 0,
        }
    }
}

impl Default for VkDescriptorPoolCreateFlags {
    fn default() -> VkDescriptorPoolCreateFlags {
        VkDescriptorPoolCreateFlags {
            free_descriptor_set: false,
            update_after_bind_ext: false,
        }
    }
}

impl VkDescriptorPoolCreateFlags {
    
    pub fn none() -> VkDescriptorPoolCreateFlags {
        VkDescriptorPoolCreateFlags {
            free_descriptor_set: false,
            update_after_bind_ext: false,
        }
    }
    
    pub fn all() -> VkDescriptorPoolCreateFlags {
        VkDescriptorPoolCreateFlags {
            free_descriptor_set: true,
            update_after_bind_ext: true,
        }
    }
}

#[macro_export]
macro_rules! VkDescriptorPoolCreateFlags {
    ( $( $x:ident ),* ) => {
        VkDescriptorPoolCreateFlags {
            $($x: true,)*
            ..VkDescriptorPoolCreateFlags::none()
        }
    }
}

impl VkDescriptorPoolCreateFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.free_descriptor_set { 0x00000001 } else { 0 }
        + if self.update_after_bind_ext { 0x00000002 } else { 0 }
    }
}