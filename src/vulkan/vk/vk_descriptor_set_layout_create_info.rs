// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkDescriptorSetLayoutCreateFlags,RawVkDescriptorSetLayoutCreateFlags};
use vulkan::vk::{VkDescriptorSetLayoutBinding,RawVkDescriptorSetLayoutBinding};

#[derive(Debug, Clone)]
pub struct VkDescriptorSetLayoutCreateInfo<'a, 'b, 'c>
    where
        'b: 'a,
        'c: 'b,
{
    pub flags: VkDescriptorSetLayoutCreateFlags,
    pub bindings: &'a [VkDescriptorSetLayoutBinding<'b, 'c>],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDescriptorSetLayoutCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkDescriptorSetLayoutCreateFlags,
    pub binding_count: u32,
    pub bindings: *mut RawVkDescriptorSetLayoutBinding,
}

impl<'a, 'b, 'c> VkWrappedType<RawVkDescriptorSetLayoutCreateInfo> for VkDescriptorSetLayoutCreateInfo<'a, 'b, 'c>
    where
        'b: 'a,
        'c: 'b,
{
    fn vk_to_raw(src: &VkDescriptorSetLayoutCreateInfo, dst: &mut RawVkDescriptorSetLayoutCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DescriptorSetLayoutCreateInfo);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.binding_count = src.bindings.len() as u32;
        dst.bindings = new_ptr_vk_array(src.bindings);
    }
}

impl Default for VkDescriptorSetLayoutCreateInfo<'static, 'static, 'static> {
    fn default() -> VkDescriptorSetLayoutCreateInfo<'static, 'static, 'static> {
        VkDescriptorSetLayoutCreateInfo {
            flags: VkDescriptorSetLayoutCreateFlags::default(),
            bindings: &[],
        }
    }
}

impl<'a, 'b, 'c> VkSetup for VkDescriptorSetLayoutCreateInfo<'a, 'b, 'c>
    where
        'b: 'a,
        'c: 'b,
{
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkDescriptorSetLayoutCreateInfo {
    fn vk_free(&mut self) {
        free_vk_ptr_array(self.binding_count as usize, self.bindings);
    }
}