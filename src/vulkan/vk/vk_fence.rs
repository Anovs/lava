// Generated by `scripts/generate.js`

use utils::c_bindings::*;
use utils::vk_traits::*;
use utils::vk_ptr::*;
use utils::vk_convert::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::ptr;
use std::mem;
use std::cmp;
use std::slice;
use vulkan::*;
use vulkan::vk::*;

#[doc(hidden)]
pub type RawVkFence = u64;

/// Wrapper for [VkFence](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkFence.html).
#[derive(Debug, Clone)]
pub struct VkFence {
    _handle: RawVkFence,
    _parent_instance: RawVkInstance,
    _parent_device: RawVkDevice,
    _fn_table: *mut VkInstanceFunctionTable
}

impl VkRawType<VkFence> for RawVkFence {
    fn vk_to_wrapped(src: &RawVkFence) -> VkFence {
        VkFence {
            _handle: *src,
            _parent_instance: 0,
            _parent_device: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl VkWrappedType<RawVkFence> for VkFence {
    fn vk_to_raw(src: &VkFence, dst: &mut RawVkFence) {
        *dst = src._handle
    }
}

impl Default for VkFence {
    fn default() -> VkFence {
        VkFence {
            _handle: 0,
            _parent_instance: 0,
            _parent_device: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl PartialEq for VkFence {
    fn eq(&self, other: &VkFence) -> bool {
        self._handle == other._handle
    }
}

impl VkSetup for VkFence {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        self._parent_instance = instance;
        self._parent_device = device;
        self._fn_table = fn_table;
    }
}

impl VkFence {
    
    /// Returns the internal Vulkan handle for the object.
    pub fn vk_handle(&self) -> u64 {
        self._handle
    }
    
    /// Wrapper for [vkDestroyFence](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkDestroyFence.html).
    pub fn destroy(&self) {
        unsafe {
            ((&*self._fn_table).vkDestroyFence)(self._parent_device, self._handle, ptr::null());
        }
    }
    
    /// Wrapper for [vkGetFenceStatus](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkGetFenceStatus.html).
    pub fn get_status(&self) -> VkResult {
        unsafe {
            let vk_result = ((&*self._fn_table).vkGetFenceStatus)(self._parent_device, self._handle);
            RawVkResult::vk_to_wrapped(&vk_result)
        }
    }
}