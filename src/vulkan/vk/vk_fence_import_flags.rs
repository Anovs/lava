// Generated by `scripts/generate.js`

use utils::vk_traits::*;

#[derive(Debug, Clone, Copy)]
pub struct VkFenceImportFlags {
    pub temporary: bool,
}

pub type RawVkFenceImportFlags = u32;

impl VkWrappedType<RawVkFenceImportFlags> for VkFenceImportFlags {
    fn vk_to_raw(src: &VkFenceImportFlags, dst: &mut RawVkFenceImportFlags) {
        *dst = 0;
        if src.temporary { *dst |= 0x00000001; }
    }
}

impl VkRawType<VkFenceImportFlags> for RawVkFenceImportFlags {
    fn vk_to_wrapped(src: &RawVkFenceImportFlags) -> VkFenceImportFlags {
        VkFenceImportFlags {
            temporary: (src & 0x00000001) != 0,
        }
    }
}

impl Default for VkFenceImportFlags {
    fn default() -> VkFenceImportFlags {
        VkFenceImportFlags {
            temporary: false,
        }
    }
}

impl VkFenceImportFlags {
    
    pub fn none() -> VkFenceImportFlags {
        VkFenceImportFlags {
            temporary: false,
        }
    }
    
    pub fn all() -> VkFenceImportFlags {
        VkFenceImportFlags {
            temporary: true,
        }
    }
}

#[macro_export]
macro_rules! VkFenceImportFlags {
    ( $( $x:ident ),* ) => {
        VkFenceImportFlags {
            $($x: true,)*
            ..VkFenceImportFlags::none()
        }
    }
}

impl VkFenceImportFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.temporary { 0x00000001 } else { 0 }
    }
}