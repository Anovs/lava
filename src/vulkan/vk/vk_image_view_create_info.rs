// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkImageViewCreateFlags,RawVkImageViewCreateFlags};
use vulkan::vk::{VkImage,RawVkImage};
use vulkan::vk::{VkImageViewType,RawVkImageViewType};
use vulkan::vk::{VkFormat,RawVkFormat};
use vulkan::vk::{VkComponentMapping,RawVkComponentMapping};
use vulkan::vk::{VkImageSubresourceRange,RawVkImageSubresourceRange};

/// Wrapper for [VkImageViewCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkImageViewCreateInfo.html)
#[derive(Debug, Clone)]
pub struct VkImageViewCreateInfo<'a> {
    pub flags: VkImageViewCreateFlags,
    pub image: &'a VkImage,
    pub view_type: VkImageViewType,
    pub format: VkFormat,
    pub components: VkComponentMapping,
    pub subresource_range: VkImageSubresourceRange,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkImageViewCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkImageViewCreateFlags,
    pub image: RawVkImage,
    pub view_type: RawVkImageViewType,
    pub format: RawVkFormat,
    pub components: RawVkComponentMapping,
    pub subresource_range: RawVkImageSubresourceRange,
}

impl<'a> VkWrappedType<RawVkImageViewCreateInfo> for VkImageViewCreateInfo<'a> {
    fn vk_to_raw(src: &VkImageViewCreateInfo, dst: &mut RawVkImageViewCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::ImageViewCreateInfo);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.image = vk_to_raw_value(src.image);
        dst.view_type = vk_to_raw_value(&src.view_type);
        dst.format = vk_to_raw_value(&src.format);
        dst.components = vk_to_raw_value(&src.components);
        dst.subresource_range = vk_to_raw_value(&src.subresource_range);
    }
}

impl Default for VkImageViewCreateInfo<'static> {
    fn default() -> VkImageViewCreateInfo<'static> {
        VkImageViewCreateInfo {
            flags: VkImageViewCreateFlags::default(),
            image: vk_null_ref(),
            view_type: VkImageViewType::default(),
            format: VkFormat::default(),
            components: VkComponentMapping::default(),
            subresource_range: VkImageSubresourceRange::default(),
        }
    }
}

impl<'a> VkSetup for VkImageViewCreateInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        VkSetup::vk_setup(&mut self.components, fn_table, instance, device);
        VkSetup::vk_setup(&mut self.subresource_range, fn_table, instance, device);
    }
}

impl VkFree for RawVkImageViewCreateInfo {
    fn vk_free(&mut self) {
        RawVkComponentMapping::vk_free(&mut self.components);
        RawVkImageSubresourceRange::vk_free(&mut self.subresource_range);
    }
}