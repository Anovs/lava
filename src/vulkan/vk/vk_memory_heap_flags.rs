// Generated by `scripts/generate.js`

use utils::vk_traits::*;

/// Wrapper for [VkMemoryHeapFlagBits](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkMemoryHeapFlagBits.html)
///
/// Use the macro `VkMemoryHeapFlags!` as an alternative method to create a structure. For example, these two snippets return the same value:
/// ```
/// VkMemoryHeapFlags!(device_local, multi_instance)
/// ```
/// ```
/// VkMemoryHeapFlags {
///     device_local: true,
///     multi_instance: true,
/// }
/// ```
#[derive(Debug, Clone, Copy)]
pub struct VkMemoryHeapFlags {
    pub device_local: bool,
    pub multi_instance: bool,
}

#[doc(hidden)]
pub type RawVkMemoryHeapFlags = u32;

impl VkWrappedType<RawVkMemoryHeapFlags> for VkMemoryHeapFlags {
    fn vk_to_raw(src: &VkMemoryHeapFlags, dst: &mut RawVkMemoryHeapFlags) {
        *dst = 0;
        if src.device_local { *dst |= 0x00000001; }
        if src.multi_instance { *dst |= 0x00000002; }
    }
}

impl VkRawType<VkMemoryHeapFlags> for RawVkMemoryHeapFlags {
    fn vk_to_wrapped(src: &RawVkMemoryHeapFlags) -> VkMemoryHeapFlags {
        VkMemoryHeapFlags {
            device_local: (src & 0x00000001) != 0,
            multi_instance: (src & 0x00000002) != 0,
        }
    }
}

impl Default for VkMemoryHeapFlags {
    fn default() -> VkMemoryHeapFlags {
        VkMemoryHeapFlags {
            device_local: false,
            multi_instance: false,
        }
    }
}

impl VkMemoryHeapFlags {
    
    /// Return a structure with all flags to `false`.
    pub fn none() -> Self {
        VkMemoryHeapFlags {
            device_local: false,
            multi_instance: false,
        }
    }
    
    /// Return a structure with all flags to `true`.
    pub fn all() -> Self {
        VkMemoryHeapFlags {
            device_local: true,
            multi_instance: true,
        }
    }
    
    /// Return the numerical bit flags corresponding to the structure (as described in the Vulkan specs).
    pub fn to_u32(&self) -> u32 {
        0
        + if self.device_local { 0x00000001 } else { 0 }
        + if self.multi_instance { 0x00000002 } else { 0 }
    }
    
    /// Create a structure corresponding to the specified numerical bit flags.
    pub fn from_u32(value: u32) -> Self {
        VkMemoryHeapFlags {
            device_local: value & 0x00000001 > 0,
            multi_instance: value & 0x00000002 > 0,
        }
    }
}

#[doc(hidden)]
#[macro_export]
macro_rules! VkMemoryHeapFlags {
    ( $( $x:ident ),* ) => {
        VkMemoryHeapFlags {
            $($x: true,)*
            ..VkMemoryHeapFlags::none()
        }
    }
}