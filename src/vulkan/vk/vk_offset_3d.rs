// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;

/// Wrapper for [VkOffset3D](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkOffset3D.html).
#[derive(Debug, Clone)]
pub struct VkOffset3D {
    pub x: isize,
    pub y: isize,
    pub z: isize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkOffset3D {
    pub x: i32,
    pub y: i32,
    pub z: i32,
}

impl VkWrappedType<RawVkOffset3D> for VkOffset3D {
    fn vk_to_raw(src: &VkOffset3D, dst: &mut RawVkOffset3D) {
        dst.x = vk_to_raw_value(&src.x);
        dst.y = vk_to_raw_value(&src.y);
        dst.z = vk_to_raw_value(&src.z);
    }
}

impl VkRawType<VkOffset3D> for RawVkOffset3D {
    fn vk_to_wrapped(src: &RawVkOffset3D) -> VkOffset3D {
        VkOffset3D {
            x: i32::vk_to_wrapped(&src.x),
            y: i32::vk_to_wrapped(&src.y),
            z: i32::vk_to_wrapped(&src.z),
        }
    }
}

impl Default for VkOffset3D {
    fn default() -> VkOffset3D {
        VkOffset3D {
            x: 0,
            y: 0,
            z: 0,
        }
    }
}

impl VkSetup for VkOffset3D {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkOffset3D {
    fn vk_free(&self) {
        
    }
}