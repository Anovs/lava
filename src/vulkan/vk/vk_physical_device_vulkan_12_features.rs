// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkPhysicalDeviceVulkan12Features](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceVulkan12Features.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceVulkan12Features {
    pub sampler_mirror_clamp_to_edge: bool,
    pub draw_indirect_count: bool,
    pub storage_buffer_8_bit_access: bool,
    pub uniform_and_storage_buffer_8_bit_access: bool,
    pub storage_push_constant_8: bool,
    pub shader_buffer_int_64_atomics: bool,
    pub shader_shared_int_64_atomics: bool,
    pub shader_float_16: bool,
    pub shader_int_8: bool,
    pub descriptor_indexing: bool,
    pub shader_input_attachment_array_dynamic_indexing: bool,
    pub shader_uniform_texel_buffer_array_dynamic_indexing: bool,
    pub shader_storage_texel_buffer_array_dynamic_indexing: bool,
    pub shader_uniform_buffer_array_non_uniform_indexing: bool,
    pub shader_sampled_image_array_non_uniform_indexing: bool,
    pub shader_storage_buffer_array_non_uniform_indexing: bool,
    pub shader_storage_image_array_non_uniform_indexing: bool,
    pub shader_input_attachment_array_non_uniform_indexing: bool,
    pub shader_uniform_texel_buffer_array_non_uniform_indexing: bool,
    pub shader_storage_texel_buffer_array_non_uniform_indexing: bool,
    pub descriptor_binding_uniform_buffer_update_after_bind: bool,
    pub descriptor_binding_sampled_image_update_after_bind: bool,
    pub descriptor_binding_storage_image_update_after_bind: bool,
    pub descriptor_binding_storage_buffer_update_after_bind: bool,
    pub descriptor_binding_uniform_texel_buffer_update_after_bind: bool,
    pub descriptor_binding_storage_texel_buffer_update_after_bind: bool,
    pub descriptor_binding_update_unused_while_pending: bool,
    pub descriptor_binding_partially_bound: bool,
    pub descriptor_binding_variable_descriptor_count: bool,
    pub runtime_descriptor_array: bool,
    pub sampler_filter_minmax: bool,
    pub scalar_block_layout: bool,
    pub imageless_framebuffer: bool,
    pub uniform_buffer_standard_layout: bool,
    pub shader_subgroup_extended_types: bool,
    pub separate_depth_stencil_layouts: bool,
    pub host_query_reset: bool,
    pub timeline_semaphore: bool,
    pub buffer_device_address: bool,
    pub buffer_device_address_capture_replay: bool,
    pub buffer_device_address_multi_device: bool,
    pub vulkan_memory_model: bool,
    pub vulkan_memory_model_device_scope: bool,
    pub vulkan_memory_model_availability_visibility_chains: bool,
    pub shader_output_viewport_index: bool,
    pub shader_output_layer: bool,
    pub subgroup_broadcast_dynamic_id: bool,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceVulkan12Features {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub sampler_mirror_clamp_to_edge: u32,
    pub draw_indirect_count: u32,
    pub storage_buffer_8_bit_access: u32,
    pub uniform_and_storage_buffer_8_bit_access: u32,
    pub storage_push_constant_8: u32,
    pub shader_buffer_int_64_atomics: u32,
    pub shader_shared_int_64_atomics: u32,
    pub shader_float_16: u32,
    pub shader_int_8: u32,
    pub descriptor_indexing: u32,
    pub shader_input_attachment_array_dynamic_indexing: u32,
    pub shader_uniform_texel_buffer_array_dynamic_indexing: u32,
    pub shader_storage_texel_buffer_array_dynamic_indexing: u32,
    pub shader_uniform_buffer_array_non_uniform_indexing: u32,
    pub shader_sampled_image_array_non_uniform_indexing: u32,
    pub shader_storage_buffer_array_non_uniform_indexing: u32,
    pub shader_storage_image_array_non_uniform_indexing: u32,
    pub shader_input_attachment_array_non_uniform_indexing: u32,
    pub shader_uniform_texel_buffer_array_non_uniform_indexing: u32,
    pub shader_storage_texel_buffer_array_non_uniform_indexing: u32,
    pub descriptor_binding_uniform_buffer_update_after_bind: u32,
    pub descriptor_binding_sampled_image_update_after_bind: u32,
    pub descriptor_binding_storage_image_update_after_bind: u32,
    pub descriptor_binding_storage_buffer_update_after_bind: u32,
    pub descriptor_binding_uniform_texel_buffer_update_after_bind: u32,
    pub descriptor_binding_storage_texel_buffer_update_after_bind: u32,
    pub descriptor_binding_update_unused_while_pending: u32,
    pub descriptor_binding_partially_bound: u32,
    pub descriptor_binding_variable_descriptor_count: u32,
    pub runtime_descriptor_array: u32,
    pub sampler_filter_minmax: u32,
    pub scalar_block_layout: u32,
    pub imageless_framebuffer: u32,
    pub uniform_buffer_standard_layout: u32,
    pub shader_subgroup_extended_types: u32,
    pub separate_depth_stencil_layouts: u32,
    pub host_query_reset: u32,
    pub timeline_semaphore: u32,
    pub buffer_device_address: u32,
    pub buffer_device_address_capture_replay: u32,
    pub buffer_device_address_multi_device: u32,
    pub vulkan_memory_model: u32,
    pub vulkan_memory_model_device_scope: u32,
    pub vulkan_memory_model_availability_visibility_chains: u32,
    pub shader_output_viewport_index: u32,
    pub shader_output_layer: u32,
    pub subgroup_broadcast_dynamic_id: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceVulkan12Features> for VkPhysicalDeviceVulkan12Features {
    fn vk_to_raw(src: &VkPhysicalDeviceVulkan12Features, dst: &mut RawVkPhysicalDeviceVulkan12Features) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceVulkan12Features);
        dst.next = ptr::null_mut();
        dst.sampler_mirror_clamp_to_edge = vk_to_raw_value(&src.sampler_mirror_clamp_to_edge);
        dst.draw_indirect_count = vk_to_raw_value(&src.draw_indirect_count);
        dst.storage_buffer_8_bit_access = vk_to_raw_value(&src.storage_buffer_8_bit_access);
        dst.uniform_and_storage_buffer_8_bit_access = vk_to_raw_value(&src.uniform_and_storage_buffer_8_bit_access);
        dst.storage_push_constant_8 = vk_to_raw_value(&src.storage_push_constant_8);
        dst.shader_buffer_int_64_atomics = vk_to_raw_value(&src.shader_buffer_int_64_atomics);
        dst.shader_shared_int_64_atomics = vk_to_raw_value(&src.shader_shared_int_64_atomics);
        dst.shader_float_16 = vk_to_raw_value(&src.shader_float_16);
        dst.shader_int_8 = vk_to_raw_value(&src.shader_int_8);
        dst.descriptor_indexing = vk_to_raw_value(&src.descriptor_indexing);
        dst.shader_input_attachment_array_dynamic_indexing = vk_to_raw_value(&src.shader_input_attachment_array_dynamic_indexing);
        dst.shader_uniform_texel_buffer_array_dynamic_indexing = vk_to_raw_value(&src.shader_uniform_texel_buffer_array_dynamic_indexing);
        dst.shader_storage_texel_buffer_array_dynamic_indexing = vk_to_raw_value(&src.shader_storage_texel_buffer_array_dynamic_indexing);
        dst.shader_uniform_buffer_array_non_uniform_indexing = vk_to_raw_value(&src.shader_uniform_buffer_array_non_uniform_indexing);
        dst.shader_sampled_image_array_non_uniform_indexing = vk_to_raw_value(&src.shader_sampled_image_array_non_uniform_indexing);
        dst.shader_storage_buffer_array_non_uniform_indexing = vk_to_raw_value(&src.shader_storage_buffer_array_non_uniform_indexing);
        dst.shader_storage_image_array_non_uniform_indexing = vk_to_raw_value(&src.shader_storage_image_array_non_uniform_indexing);
        dst.shader_input_attachment_array_non_uniform_indexing = vk_to_raw_value(&src.shader_input_attachment_array_non_uniform_indexing);
        dst.shader_uniform_texel_buffer_array_non_uniform_indexing = vk_to_raw_value(&src.shader_uniform_texel_buffer_array_non_uniform_indexing);
        dst.shader_storage_texel_buffer_array_non_uniform_indexing = vk_to_raw_value(&src.shader_storage_texel_buffer_array_non_uniform_indexing);
        dst.descriptor_binding_uniform_buffer_update_after_bind = vk_to_raw_value(&src.descriptor_binding_uniform_buffer_update_after_bind);
        dst.descriptor_binding_sampled_image_update_after_bind = vk_to_raw_value(&src.descriptor_binding_sampled_image_update_after_bind);
        dst.descriptor_binding_storage_image_update_after_bind = vk_to_raw_value(&src.descriptor_binding_storage_image_update_after_bind);
        dst.descriptor_binding_storage_buffer_update_after_bind = vk_to_raw_value(&src.descriptor_binding_storage_buffer_update_after_bind);
        dst.descriptor_binding_uniform_texel_buffer_update_after_bind = vk_to_raw_value(&src.descriptor_binding_uniform_texel_buffer_update_after_bind);
        dst.descriptor_binding_storage_texel_buffer_update_after_bind = vk_to_raw_value(&src.descriptor_binding_storage_texel_buffer_update_after_bind);
        dst.descriptor_binding_update_unused_while_pending = vk_to_raw_value(&src.descriptor_binding_update_unused_while_pending);
        dst.descriptor_binding_partially_bound = vk_to_raw_value(&src.descriptor_binding_partially_bound);
        dst.descriptor_binding_variable_descriptor_count = vk_to_raw_value(&src.descriptor_binding_variable_descriptor_count);
        dst.runtime_descriptor_array = vk_to_raw_value(&src.runtime_descriptor_array);
        dst.sampler_filter_minmax = vk_to_raw_value(&src.sampler_filter_minmax);
        dst.scalar_block_layout = vk_to_raw_value(&src.scalar_block_layout);
        dst.imageless_framebuffer = vk_to_raw_value(&src.imageless_framebuffer);
        dst.uniform_buffer_standard_layout = vk_to_raw_value(&src.uniform_buffer_standard_layout);
        dst.shader_subgroup_extended_types = vk_to_raw_value(&src.shader_subgroup_extended_types);
        dst.separate_depth_stencil_layouts = vk_to_raw_value(&src.separate_depth_stencil_layouts);
        dst.host_query_reset = vk_to_raw_value(&src.host_query_reset);
        dst.timeline_semaphore = vk_to_raw_value(&src.timeline_semaphore);
        dst.buffer_device_address = vk_to_raw_value(&src.buffer_device_address);
        dst.buffer_device_address_capture_replay = vk_to_raw_value(&src.buffer_device_address_capture_replay);
        dst.buffer_device_address_multi_device = vk_to_raw_value(&src.buffer_device_address_multi_device);
        dst.vulkan_memory_model = vk_to_raw_value(&src.vulkan_memory_model);
        dst.vulkan_memory_model_device_scope = vk_to_raw_value(&src.vulkan_memory_model_device_scope);
        dst.vulkan_memory_model_availability_visibility_chains = vk_to_raw_value(&src.vulkan_memory_model_availability_visibility_chains);
        dst.shader_output_viewport_index = vk_to_raw_value(&src.shader_output_viewport_index);
        dst.shader_output_layer = vk_to_raw_value(&src.shader_output_layer);
        dst.subgroup_broadcast_dynamic_id = vk_to_raw_value(&src.subgroup_broadcast_dynamic_id);
    }
}

impl VkRawType<VkPhysicalDeviceVulkan12Features> for RawVkPhysicalDeviceVulkan12Features {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceVulkan12Features) -> VkPhysicalDeviceVulkan12Features {
        VkPhysicalDeviceVulkan12Features {
            sampler_mirror_clamp_to_edge: u32::vk_to_wrapped(&src.sampler_mirror_clamp_to_edge),
            draw_indirect_count: u32::vk_to_wrapped(&src.draw_indirect_count),
            storage_buffer_8_bit_access: u32::vk_to_wrapped(&src.storage_buffer_8_bit_access),
            uniform_and_storage_buffer_8_bit_access: u32::vk_to_wrapped(&src.uniform_and_storage_buffer_8_bit_access),
            storage_push_constant_8: u32::vk_to_wrapped(&src.storage_push_constant_8),
            shader_buffer_int_64_atomics: u32::vk_to_wrapped(&src.shader_buffer_int_64_atomics),
            shader_shared_int_64_atomics: u32::vk_to_wrapped(&src.shader_shared_int_64_atomics),
            shader_float_16: u32::vk_to_wrapped(&src.shader_float_16),
            shader_int_8: u32::vk_to_wrapped(&src.shader_int_8),
            descriptor_indexing: u32::vk_to_wrapped(&src.descriptor_indexing),
            shader_input_attachment_array_dynamic_indexing: u32::vk_to_wrapped(&src.shader_input_attachment_array_dynamic_indexing),
            shader_uniform_texel_buffer_array_dynamic_indexing: u32::vk_to_wrapped(&src.shader_uniform_texel_buffer_array_dynamic_indexing),
            shader_storage_texel_buffer_array_dynamic_indexing: u32::vk_to_wrapped(&src.shader_storage_texel_buffer_array_dynamic_indexing),
            shader_uniform_buffer_array_non_uniform_indexing: u32::vk_to_wrapped(&src.shader_uniform_buffer_array_non_uniform_indexing),
            shader_sampled_image_array_non_uniform_indexing: u32::vk_to_wrapped(&src.shader_sampled_image_array_non_uniform_indexing),
            shader_storage_buffer_array_non_uniform_indexing: u32::vk_to_wrapped(&src.shader_storage_buffer_array_non_uniform_indexing),
            shader_storage_image_array_non_uniform_indexing: u32::vk_to_wrapped(&src.shader_storage_image_array_non_uniform_indexing),
            shader_input_attachment_array_non_uniform_indexing: u32::vk_to_wrapped(&src.shader_input_attachment_array_non_uniform_indexing),
            shader_uniform_texel_buffer_array_non_uniform_indexing: u32::vk_to_wrapped(&src.shader_uniform_texel_buffer_array_non_uniform_indexing),
            shader_storage_texel_buffer_array_non_uniform_indexing: u32::vk_to_wrapped(&src.shader_storage_texel_buffer_array_non_uniform_indexing),
            descriptor_binding_uniform_buffer_update_after_bind: u32::vk_to_wrapped(&src.descriptor_binding_uniform_buffer_update_after_bind),
            descriptor_binding_sampled_image_update_after_bind: u32::vk_to_wrapped(&src.descriptor_binding_sampled_image_update_after_bind),
            descriptor_binding_storage_image_update_after_bind: u32::vk_to_wrapped(&src.descriptor_binding_storage_image_update_after_bind),
            descriptor_binding_storage_buffer_update_after_bind: u32::vk_to_wrapped(&src.descriptor_binding_storage_buffer_update_after_bind),
            descriptor_binding_uniform_texel_buffer_update_after_bind: u32::vk_to_wrapped(&src.descriptor_binding_uniform_texel_buffer_update_after_bind),
            descriptor_binding_storage_texel_buffer_update_after_bind: u32::vk_to_wrapped(&src.descriptor_binding_storage_texel_buffer_update_after_bind),
            descriptor_binding_update_unused_while_pending: u32::vk_to_wrapped(&src.descriptor_binding_update_unused_while_pending),
            descriptor_binding_partially_bound: u32::vk_to_wrapped(&src.descriptor_binding_partially_bound),
            descriptor_binding_variable_descriptor_count: u32::vk_to_wrapped(&src.descriptor_binding_variable_descriptor_count),
            runtime_descriptor_array: u32::vk_to_wrapped(&src.runtime_descriptor_array),
            sampler_filter_minmax: u32::vk_to_wrapped(&src.sampler_filter_minmax),
            scalar_block_layout: u32::vk_to_wrapped(&src.scalar_block_layout),
            imageless_framebuffer: u32::vk_to_wrapped(&src.imageless_framebuffer),
            uniform_buffer_standard_layout: u32::vk_to_wrapped(&src.uniform_buffer_standard_layout),
            shader_subgroup_extended_types: u32::vk_to_wrapped(&src.shader_subgroup_extended_types),
            separate_depth_stencil_layouts: u32::vk_to_wrapped(&src.separate_depth_stencil_layouts),
            host_query_reset: u32::vk_to_wrapped(&src.host_query_reset),
            timeline_semaphore: u32::vk_to_wrapped(&src.timeline_semaphore),
            buffer_device_address: u32::vk_to_wrapped(&src.buffer_device_address),
            buffer_device_address_capture_replay: u32::vk_to_wrapped(&src.buffer_device_address_capture_replay),
            buffer_device_address_multi_device: u32::vk_to_wrapped(&src.buffer_device_address_multi_device),
            vulkan_memory_model: u32::vk_to_wrapped(&src.vulkan_memory_model),
            vulkan_memory_model_device_scope: u32::vk_to_wrapped(&src.vulkan_memory_model_device_scope),
            vulkan_memory_model_availability_visibility_chains: u32::vk_to_wrapped(&src.vulkan_memory_model_availability_visibility_chains),
            shader_output_viewport_index: u32::vk_to_wrapped(&src.shader_output_viewport_index),
            shader_output_layer: u32::vk_to_wrapped(&src.shader_output_layer),
            subgroup_broadcast_dynamic_id: u32::vk_to_wrapped(&src.subgroup_broadcast_dynamic_id),
        }
    }
}

impl Default for VkPhysicalDeviceVulkan12Features {
    fn default() -> VkPhysicalDeviceVulkan12Features {
        VkPhysicalDeviceVulkan12Features {
            sampler_mirror_clamp_to_edge: false,
            draw_indirect_count: false,
            storage_buffer_8_bit_access: false,
            uniform_and_storage_buffer_8_bit_access: false,
            storage_push_constant_8: false,
            shader_buffer_int_64_atomics: false,
            shader_shared_int_64_atomics: false,
            shader_float_16: false,
            shader_int_8: false,
            descriptor_indexing: false,
            shader_input_attachment_array_dynamic_indexing: false,
            shader_uniform_texel_buffer_array_dynamic_indexing: false,
            shader_storage_texel_buffer_array_dynamic_indexing: false,
            shader_uniform_buffer_array_non_uniform_indexing: false,
            shader_sampled_image_array_non_uniform_indexing: false,
            shader_storage_buffer_array_non_uniform_indexing: false,
            shader_storage_image_array_non_uniform_indexing: false,
            shader_input_attachment_array_non_uniform_indexing: false,
            shader_uniform_texel_buffer_array_non_uniform_indexing: false,
            shader_storage_texel_buffer_array_non_uniform_indexing: false,
            descriptor_binding_uniform_buffer_update_after_bind: false,
            descriptor_binding_sampled_image_update_after_bind: false,
            descriptor_binding_storage_image_update_after_bind: false,
            descriptor_binding_storage_buffer_update_after_bind: false,
            descriptor_binding_uniform_texel_buffer_update_after_bind: false,
            descriptor_binding_storage_texel_buffer_update_after_bind: false,
            descriptor_binding_update_unused_while_pending: false,
            descriptor_binding_partially_bound: false,
            descriptor_binding_variable_descriptor_count: false,
            runtime_descriptor_array: false,
            sampler_filter_minmax: false,
            scalar_block_layout: false,
            imageless_framebuffer: false,
            uniform_buffer_standard_layout: false,
            shader_subgroup_extended_types: false,
            separate_depth_stencil_layouts: false,
            host_query_reset: false,
            timeline_semaphore: false,
            buffer_device_address: false,
            buffer_device_address_capture_replay: false,
            buffer_device_address_multi_device: false,
            vulkan_memory_model: false,
            vulkan_memory_model_device_scope: false,
            vulkan_memory_model_availability_visibility_chains: false,
            shader_output_viewport_index: false,
            shader_output_layer: false,
            subgroup_broadcast_dynamic_id: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceVulkan12Features {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceVulkan12Features {
    fn vk_free(&self) {
        
    }
}