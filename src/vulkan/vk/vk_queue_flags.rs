// Generated by `scripts/generate.js`

use utils::vk_traits::*;

/// Wrapper for [VkQueueFlagBits](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkQueueFlagBits.html)
#[derive(Debug, Clone, Copy)]
pub struct VkQueueFlags {
    pub graphics: bool,
    pub compute: bool,
    pub transfer: bool,
    pub sparse_binding: bool,
    pub protected: bool,
}

#[doc(hidden)]
pub type RawVkQueueFlags = u32;

impl VkWrappedType<RawVkQueueFlags> for VkQueueFlags {
    fn vk_to_raw(src: &VkQueueFlags, dst: &mut RawVkQueueFlags) {
        *dst = 0;
        if src.graphics { *dst |= 0x00000001; }
        if src.compute { *dst |= 0x00000002; }
        if src.transfer { *dst |= 0x00000004; }
        if src.sparse_binding { *dst |= 0x00000008; }
        if src.protected { *dst |= 0x00000010; }
    }
}

impl VkRawType<VkQueueFlags> for RawVkQueueFlags {
    fn vk_to_wrapped(src: &RawVkQueueFlags) -> VkQueueFlags {
        VkQueueFlags {
            graphics: (src & 0x00000001) != 0,
            compute: (src & 0x00000002) != 0,
            transfer: (src & 0x00000004) != 0,
            sparse_binding: (src & 0x00000008) != 0,
            protected: (src & 0x00000010) != 0,
        }
    }
}

impl Default for VkQueueFlags {
    fn default() -> VkQueueFlags {
        VkQueueFlags {
            graphics: false,
            compute: false,
            transfer: false,
            sparse_binding: false,
            protected: false,
        }
    }
}

impl VkQueueFlags {
    
    pub fn none() -> VkQueueFlags {
        VkQueueFlags {
            graphics: false,
            compute: false,
            transfer: false,
            sparse_binding: false,
            protected: false,
        }
    }
    
    pub fn all() -> VkQueueFlags {
        VkQueueFlags {
            graphics: true,
            compute: true,
            transfer: true,
            sparse_binding: true,
            protected: true,
        }
    }
}

#[macro_export]
macro_rules! VkQueueFlags {
    ( $( $x:ident ),* ) => {
        VkQueueFlags {
            $($x: true,)*
            ..VkQueueFlags::none()
        }
    }
}

impl VkQueueFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.graphics { 0x00000001 } else { 0 }
        + if self.compute { 0x00000002 } else { 0 }
        + if self.transfer { 0x00000004 } else { 0 }
        + if self.sparse_binding { 0x00000008 } else { 0 }
        + if self.protected { 0x00000010 } else { 0 }
    }
    
    pub fn from_u32(value: u32) -> VkQueueFlags {
        VkQueueFlags {
            graphics: value & 0x00000001 > 0,
            compute: value & 0x00000002 > 0,
            transfer: value & 0x00000004 > 0,
            sparse_binding: value & 0x00000008 > 0,
            protected: value & 0x00000010 > 0,
        }
    }
}