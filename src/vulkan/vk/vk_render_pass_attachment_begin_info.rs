// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkImageView,RawVkImageView};

/// Wrapper for [VkRenderPassAttachmentBeginInfo](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassAttachmentBeginInfo.html).
#[derive(Debug, Clone)]
pub struct VkRenderPassAttachmentBeginInfo {
    pub attachments: Vec<VkImageView>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkRenderPassAttachmentBeginInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub attachment_count: u32,
    pub attachments: *mut RawVkImageView,
}

impl VkWrappedType<RawVkRenderPassAttachmentBeginInfo> for VkRenderPassAttachmentBeginInfo {
    fn vk_to_raw(src: &VkRenderPassAttachmentBeginInfo, dst: &mut RawVkRenderPassAttachmentBeginInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::RenderPassAttachmentBeginInfo);
        dst.next = ptr::null_mut();
        dst.attachment_count = src.attachments.len() as u32;
        dst.attachments = new_ptr_vk_array(&src.attachments);
    }
}

impl VkRawType<VkRenderPassAttachmentBeginInfo> for RawVkRenderPassAttachmentBeginInfo {
    fn vk_to_wrapped(src: &RawVkRenderPassAttachmentBeginInfo) -> VkRenderPassAttachmentBeginInfo {
        VkRenderPassAttachmentBeginInfo {
            attachments: new_vk_array(src.attachment_count, src.attachments),
        }
    }
}

impl Default for VkRenderPassAttachmentBeginInfo {
    fn default() -> VkRenderPassAttachmentBeginInfo {
        VkRenderPassAttachmentBeginInfo {
            attachments: Vec::new(),
        }
    }
}

impl VkSetup for VkRenderPassAttachmentBeginInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkRenderPassAttachmentBeginInfo {
    fn vk_free(&self) {
        free_ptr(self.attachments);
    }
}