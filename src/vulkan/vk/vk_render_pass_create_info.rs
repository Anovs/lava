// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkRenderPassCreateFlags,RawVkRenderPassCreateFlags};
use vulkan::vk::{VkAttachmentDescription,RawVkAttachmentDescription};
use vulkan::vk::{VkSubpassDescription,RawVkSubpassDescription};
use vulkan::vk::{VkSubpassDependency,RawVkSubpassDependency};

/// Wrapper for [VkRenderPassCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkRenderPassCreateInfo.html).
#[derive(Debug, Clone)]
pub struct VkRenderPassCreateInfo<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>
    where
        'c: 'b,
        'd: 'b,
        'e: 'b,
        'f: 'b,
        'g: 'b,
{
    pub flags: VkRenderPassCreateFlags,
    pub attachments: &'a [VkAttachmentDescription],
    pub subpasses: &'b [VkSubpassDescription<'c, 'd, 'e, 'f, 'g>],
    pub dependencies: &'h [VkSubpassDependency],
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkRenderPassCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub flags: RawVkRenderPassCreateFlags,
    pub attachment_count: u32,
    pub attachments: *mut RawVkAttachmentDescription,
    pub subpass_count: u32,
    pub subpasses: *mut RawVkSubpassDescription,
    pub dependency_count: u32,
    pub dependencies: *mut RawVkSubpassDependency,
}

impl<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> VkWrappedType<RawVkRenderPassCreateInfo> for VkRenderPassCreateInfo<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>
    where
        'c: 'b,
        'd: 'b,
        'e: 'b,
        'f: 'b,
        'g: 'b,
{
    fn vk_to_raw(src: &VkRenderPassCreateInfo, dst: &mut RawVkRenderPassCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::RenderPassCreateInfo);
        dst.next = ptr::null();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.attachment_count = src.attachments.len() as u32;
        dst.attachments = new_ptr_vk_array(src.attachments);
        dst.subpass_count = src.subpasses.len() as u32;
        dst.subpasses = new_ptr_vk_array(src.subpasses);
        dst.dependency_count = src.dependencies.len() as u32;
        dst.dependencies = new_ptr_vk_array(src.dependencies);
    }
}

impl Default for VkRenderPassCreateInfo<'static, 'static, 'static, 'static, 'static, 'static, 'static, 'static> {
    fn default() -> VkRenderPassCreateInfo<'static, 'static, 'static, 'static, 'static, 'static, 'static, 'static> {
        VkRenderPassCreateInfo {
            flags: VkRenderPassCreateFlags::default(),
            attachments: &[],
            subpasses: &[],
            dependencies: &[],
        }
    }
}

impl<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> VkSetup for VkRenderPassCreateInfo<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>
    where
        'c: 'b,
        'd: 'b,
        'e: 'b,
        'f: 'b,
        'g: 'b,
{
    fn vk_setup(&mut self, fn_table: *mut VkInstanceFunctionTable, instance: RawVkInstance, device: RawVkDevice) {
        
    }
}

impl VkFree for RawVkRenderPassCreateInfo {
    fn vk_free(&mut self) {
        free_vk_ptr_array(self.attachment_count as usize, self.attachments);
        free_vk_ptr_array(self.subpass_count as usize, self.subpasses);
        free_vk_ptr_array(self.dependency_count as usize, self.dependencies);
    }
}