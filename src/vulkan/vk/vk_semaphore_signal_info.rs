// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkSemaphore,RawVkSemaphore};

/// Wrapper for [VkSemaphoreSignalInfo](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreSignalInfo.html).
#[derive(Debug, Clone)]
pub struct VkSemaphoreSignalInfo {
    pub semaphore: VkSemaphore,
    pub value: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSemaphoreSignalInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub semaphore: RawVkSemaphore,
    pub value: u64,
}

impl VkWrappedType<RawVkSemaphoreSignalInfo> for VkSemaphoreSignalInfo {
    fn vk_to_raw(src: &VkSemaphoreSignalInfo, dst: &mut RawVkSemaphoreSignalInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::SemaphoreSignalInfo);
        dst.next = ptr::null_mut();
        dst.semaphore = vk_to_raw_value(&src.semaphore);
        dst.value = vk_to_raw_value(&src.value);
    }
}

impl VkRawType<VkSemaphoreSignalInfo> for RawVkSemaphoreSignalInfo {
    fn vk_to_wrapped(src: &RawVkSemaphoreSignalInfo) -> VkSemaphoreSignalInfo {
        VkSemaphoreSignalInfo {
            semaphore: RawVkSemaphore::vk_to_wrapped(&src.semaphore),
            value: u64::vk_to_wrapped(&src.value),
        }
    }
}

impl Default for VkSemaphoreSignalInfo {
    fn default() -> VkSemaphoreSignalInfo {
        VkSemaphoreSignalInfo {
            semaphore: Default::default(),
            value: 0,
        }
    }
}

impl VkSetup for VkSemaphoreSignalInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.semaphore, fn_table);
    }
}

impl VkFree for RawVkSemaphoreSignalInfo {
    fn vk_free(&self) {
        
    }
}