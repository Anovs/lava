// Generated by `scripts/generate.js`

use utils::vk_traits::*;

/// Wrapper for [VkSparseImageFormatFlagBits](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSparseImageFormatFlagBits.html)
#[derive(Debug, Clone, Copy)]
pub struct VkSparseImageFormatFlags {
    pub single_miptail: bool,
    pub aligned_mip_size: bool,
    pub nonstandard_block_size: bool,
}

#[doc(hidden)]
pub type RawVkSparseImageFormatFlags = u32;

impl VkWrappedType<RawVkSparseImageFormatFlags> for VkSparseImageFormatFlags {
    fn vk_to_raw(src: &VkSparseImageFormatFlags, dst: &mut RawVkSparseImageFormatFlags) {
        *dst = 0;
        if src.single_miptail { *dst |= 0x00000001; }
        if src.aligned_mip_size { *dst |= 0x00000002; }
        if src.nonstandard_block_size { *dst |= 0x00000004; }
    }
}

impl VkRawType<VkSparseImageFormatFlags> for RawVkSparseImageFormatFlags {
    fn vk_to_wrapped(src: &RawVkSparseImageFormatFlags) -> VkSparseImageFormatFlags {
        VkSparseImageFormatFlags {
            single_miptail: (src & 0x00000001) != 0,
            aligned_mip_size: (src & 0x00000002) != 0,
            nonstandard_block_size: (src & 0x00000004) != 0,
        }
    }
}

impl Default for VkSparseImageFormatFlags {
    fn default() -> VkSparseImageFormatFlags {
        VkSparseImageFormatFlags {
            single_miptail: false,
            aligned_mip_size: false,
            nonstandard_block_size: false,
        }
    }
}

impl VkSparseImageFormatFlags {
    
    pub fn none() -> VkSparseImageFormatFlags {
        VkSparseImageFormatFlags {
            single_miptail: false,
            aligned_mip_size: false,
            nonstandard_block_size: false,
        }
    }
    
    pub fn all() -> VkSparseImageFormatFlags {
        VkSparseImageFormatFlags {
            single_miptail: true,
            aligned_mip_size: true,
            nonstandard_block_size: true,
        }
    }
}

#[macro_export]
macro_rules! VkSparseImageFormatFlags {
    ( $( $x:ident ),* ) => {
        VkSparseImageFormatFlags {
            $($x: true,)*
            ..VkSparseImageFormatFlags::none()
        }
    }
}

impl VkSparseImageFormatFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.single_miptail { 0x00000001 } else { 0 }
        + if self.aligned_mip_size { 0x00000002 } else { 0 }
        + if self.nonstandard_block_size { 0x00000004 } else { 0 }
    }
    
    pub fn from_u32(value: u32) -> VkSparseImageFormatFlags {
        VkSparseImageFormatFlags {
            single_miptail: value & 0x00000001 > 0,
            aligned_mip_size: value & 0x00000002 > 0,
            nonstandard_block_size: value & 0x00000004 > 0,
        }
    }
}