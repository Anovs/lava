// Generated by `scripts/generate.js`

use utils::vk_traits::*;

/// Wrapper for [VkSparseMemoryBindFlags](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseMemoryBindFlags.html).
///
/// Use the macro `VkSparseMemoryBindFlags!` as an alternative method to create a structure. For example, these two snippets return the same value:
/// ```
/// VkSparseMemoryBindFlags!(metadata)
/// ```
/// ```
/// VkSparseMemoryBindFlags {
///     metadata: true,
/// }
/// ```
#[derive(Debug, Clone)]
pub struct VkSparseMemoryBindFlags {
    pub metadata: bool,
}

#[doc(hidden)]
pub type RawVkSparseMemoryBindFlags = u32;

impl VkWrappedType<RawVkSparseMemoryBindFlags> for VkSparseMemoryBindFlags {
    fn vk_to_raw(src: &VkSparseMemoryBindFlags, dst: &mut RawVkSparseMemoryBindFlags) {
        *dst = 0;
        if src.metadata { *dst |= 0x00000001; }
    }
}

impl VkRawType<VkSparseMemoryBindFlags> for RawVkSparseMemoryBindFlags {
    fn vk_to_wrapped(src: &RawVkSparseMemoryBindFlags) -> VkSparseMemoryBindFlags {
        VkSparseMemoryBindFlags {
            metadata: (src & 0x00000001) != 0,
        }
    }
}

impl Default for VkSparseMemoryBindFlags {
    fn default() -> VkSparseMemoryBindFlags {
        VkSparseMemoryBindFlags {
            metadata: false,
        }
    }
}

impl VkSparseMemoryBindFlags {
    
    /// Return a structure with all flags to `false`.
    pub fn none() -> Self {
        VkSparseMemoryBindFlags {
            metadata: false,
        }
    }
    
    /// Return a structure with all flags to `true`.
    pub fn all() -> Self {
        VkSparseMemoryBindFlags {
            metadata: true,
        }
    }
    
    /// Return the numerical bit flags corresponding to the structure (as described in the Vulkan specs).
    pub fn to_u32(&self) -> u32 {
        0
        + if self.metadata { 0x00000001 } else { 0 }
    }
    
    /// Create a structure corresponding to the specified numerical bit flags.
    pub fn from_u32(value: u32) -> Self {
        VkSparseMemoryBindFlags {
            metadata: value & 0x00000001 > 0,
        }
    }
}

#[doc(hidden)]
#[macro_export]
macro_rules! VkSparseMemoryBindFlags {
    ( $( $x:ident ),* ) => {
        VkSparseMemoryBindFlags {
            $($x: true,)*
            ..VkSparseMemoryBindFlags::none()
        }
    }
}