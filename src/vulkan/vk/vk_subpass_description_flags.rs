// Generated by `scripts/generate.js`

use utils::vk_traits::*;

#[derive(Debug, Clone, Copy)]
pub struct VkSubpassDescriptionFlags {
    pub per_view_attributes_nvx: bool,
    pub per_view_position_x_only_nvx: bool,
}

pub type RawVkSubpassDescriptionFlags = u32;

impl VkWrappedType<RawVkSubpassDescriptionFlags> for VkSubpassDescriptionFlags {
    fn vk_to_raw(src: &VkSubpassDescriptionFlags, dst: &mut RawVkSubpassDescriptionFlags) {
        *dst = 0;
        if src.per_view_attributes_nvx { *dst |= 0x00000001; }
        if src.per_view_position_x_only_nvx { *dst |= 0x00000002; }
    }
}

impl VkRawType<VkSubpassDescriptionFlags> for RawVkSubpassDescriptionFlags {
    fn vk_to_wrapped(src: &RawVkSubpassDescriptionFlags) -> VkSubpassDescriptionFlags {
        VkSubpassDescriptionFlags {
            per_view_attributes_nvx: (src & 0x00000001) != 0,
            per_view_position_x_only_nvx: (src & 0x00000002) != 0,
        }
    }
}

impl Default for VkSubpassDescriptionFlags {
    fn default() -> VkSubpassDescriptionFlags {
        VkSubpassDescriptionFlags {
            per_view_attributes_nvx: false,
            per_view_position_x_only_nvx: false,
        }
    }
}

impl VkSubpassDescriptionFlags {
    
    pub fn none() -> VkSubpassDescriptionFlags {
        VkSubpassDescriptionFlags {
            per_view_attributes_nvx: false,
            per_view_position_x_only_nvx: false,
        }
    }
    
    pub fn all() -> VkSubpassDescriptionFlags {
        VkSubpassDescriptionFlags {
            per_view_attributes_nvx: true,
            per_view_position_x_only_nvx: true,
        }
    }
}

#[macro_export]
macro_rules! VkSubpassDescriptionFlags {
    ( $( $x:ident ),* ) => {
        VkSubpassDescriptionFlags {
            $($x: true,)*
            ..VkSubpassDescriptionFlags::none()
        }
    }
}

impl VkSubpassDescriptionFlags {
    
    pub fn to_u32(&self) -> u32 {
        0
        + if self.per_view_attributes_nvx { 0x00000001 } else { 0 }
        + if self.per_view_position_x_only_nvx { 0x00000002 } else { 0 }
    }
}